(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    349752,       6877]
NotebookOptionsPosition[    340292,       6686]
NotebookOutlinePosition[    340758,       6704]
CellTagsIndexPosition[    340715,       6701]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 StyleBox["Mohamed M. Hammad",
  FontFamily->"FZLanTingHei-DB-GBK",
  FontSize->12,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]],
 StyleBox["\[LineSeparator]",
  FontSize->12,
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["\n",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Neural Network and Deep Learning with Mathematica                  \
            ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["<",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "Neural_NetWork_and_Deep_Learning"}, 
     "NNDL-05-challengs-NN-opt.nb", CharacterEncoding -> "UTF-8"], None},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/Neural_NetWork_and_Deep_Learning/NNDL-\
05-challengs-NN-opt.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[" ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox[">",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "Neural_NetWork_and_Deep_Learning"}, 
     "NNDL-07-gen-hyper-par.nb", CharacterEncoding -> "UTF-8"], None},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/Neural_NetWork_and_Deep_Learning/NNDL-\
07-gen-hyper-par.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["    ",
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox[ButtonBox["\[CapitalXi]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "Neural_NetWork_and_Deep_Learning"}, "contents.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/Neural_NetWork_and_Deep_Learning/\
contents.nb"],
  FontFamily->"Arial Unicode MS",
  FontSize->17.5,
  FontWeight->"Regular",
  FontColor->RGBColor[
   0.9866483558403907, 0.9388876173037308, 0.6336003662165255]],
 StyleBox["\[LineSeparator]\[LineSeparator]",
  FontSize->12,
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.5, 0]],
 StyleBox["Edited by Hao Feng",
  FontFamily->"Futura",
  FontSize->12,
  FontWeight->"Medium",
  FontSlant->"Italic",
  FontColor->RGBColor[
   0.8488288700694285, 0.3848325322346838, 0.1479972533760586]]
}], "Text",
 CellMargins->{{66, -45}, {4, 12}},
 CellChangeTimes->{{3.9397640484222183`*^9, 3.939764052679113*^9}, 
   3.9397641564677134`*^9, 3.939764214184162*^9, {3.939774845841297*^9, 
   3.9397748486786137`*^9}, 3.9397769383984737`*^9, 3.939777524212697*^9, {
   3.939777679887363*^9, 3.9397776986053457`*^9}, 3.939777748637487*^9, {
   3.939777854556375*^9, 3.939777878635145*^9}, {3.9397779299447737`*^9, 
   3.9397779337440853`*^9}, {3.9397779656956463`*^9, 
   3.9397779872993917`*^9}, {3.939783995957651*^9, 3.9397839959644203`*^9}, 
   3.93994857128743*^9, {3.9403030753694696`*^9, 3.9403030753782463`*^9}, {
   3.940303217729404*^9, 3.940303217737211*^9}, {3.940741024123201*^9, 
   3.940741027365489*^9}, {3.940741081934002*^9, 3.940741081942062*^9}, {
   3.943567220607367*^9, 3.9435672414910088`*^9}, {3.94356735516547*^9, 
   3.943567355169693*^9}, {3.9435681597640142`*^9, 3.943568192257277*^9}, {
   3.94360553842068*^9, 3.943605549222768*^9}, {3.9450355549790707`*^9, 
   3.9450355549843817`*^9}, {3.945035697037093*^9, 3.945035697043181*^9}},
 LineSpacing->{0.6999999999999997, 3},
 Background->RGBColor[
  0.13066300450141147`, 0.12460517280842298`, 0.4353551537346456],
 CellID->912160115,ExpressionUUID->"67aab6c7-b186-4fbc-a04a-683b7453f682"],

Cell[CellGroupData[{

Cell["6 Learning Rate Schedules and Gradient Descent Variants", "Section",
 CellChangeTimes->{{3.943567936366756*^9, 3.9435679403338757`*^9}, {
  3.94356810611018*^9, 3.9435681138472424`*^9}, {3.9436697752713633`*^9, 
  3.943669780056386*^9}, {3.944605092244577*^9, 3.9446051027689734`*^9}, {
  3.9450355605744457`*^9, 3.9450355732021914`*^9}},
 CellID->622795188,ExpressionUUID->"4fba7fed-0087-40ae-a263-55e5b8fe4d49"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 "\[LineSeparator]This chapter provides a Mathematica implementation of the \
concepts and ideas presented in Chapter 5, [1], of the book titled ",
 ButtonBox["Artificial Neural Network and Deep Learning: Fundamentals and \
Theory",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "Artifical_Neural_Network_and_Deep_Learning"}, "contents.nb", 
     CharacterEncoding -> "UTF-8"], None},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/Artifical_Neural_Network_and_Deep_\
Learning/contents.nb"],
 ". We strongly recommend that you begin with the theoretical chapter to \
build a solid foundation before exploring the corresponding practical \
implementation."
}], "Note",
 CellChangeTimes->{{3.9435682523793507`*^9, 3.9435682907152853`*^9}, {
  3.9435754000406303`*^9, 3.943575400046158*^9}, {3.944605112751877*^9, 
  3.944605131151554*^9}, {3.94503559681851*^9, 3.945035597233686*^9}},
 CellID->1196547533,ExpressionUUID->"2c93b86d-f330-4fb3-b295-cb7eba6efbe1"],

Cell["\<\
In deep learning, the optimization process lies at the heart of training \
Neural Networks (NNs). Central to this optimization is the notion of the \
learning rate, a crucial hyperparameter that dictates the step size in the \
parameter space during optimization. Selecting an appropriate learning rate \
and its schedule significantly impacts the convergence speed and the final \
performance of the model. In this chapter, we delve into various learning \
rate schedules and adaptive algorithms that play pivotal roles in optimizing \
NNs. By understanding these techniques, practitioners can fine-tune their \
training processes and achieve better results in their machine-learning \
endeavors.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036306885441*^9}, {
  3.9450363698005857`*^9, 3.945036369854005*^9}},
 CellID->1852358015,ExpressionUUID->"9c04cc97-43e3-4730-b5bc-dcc954aa4d36"],

Cell["\<\
The chapter initiates an exploration of learning rate schedules [64-75], \
which entail predefined strategies for altering the learning rate throughout \
the training process. Learning rate schedules include step decay, inverse \
time decay, exponential decay, polynomial decay with warm restart, cyclical \
learning rate, stochastic gradient descent with warm restarts (cosine decay), \
exponential decay sine wave learning rate, Hessian-aware learning rate decay, \
etc., each with its own advantages and drawbacks. Understanding and \
appropriately implementing these schedules are crucial for achieving optimal \
convergence without encountering issues such as slow convergence or \
overshooting the minima.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.9450363116684504`*^9}, {
  3.9450363698652983`*^9, 3.94503636990637*^9}},
 CellID->1958808618,ExpressionUUID->"32af0e9e-cff1-4546-a556-342119b1ebb8"],

Cell["\<\
Transitioning from learning rate schedules, we explore accelerated gradient \
descent [76-79], a variant of the traditional GD algorithm designed to speed \
up convergence. Two popular accelerated gradient descent algorithms are SGD \
with momentum and Nesterov accelerated gradient descent. In both cases, the \
momentum term helps the optimization algorithm to continue moving in the same \
direction or accelerate in the relevant direction, even if the gradient \
changes direction frequently or the surface of the loss function is highly \
irregular. Both methods help in smoothing out the updates, which is \
particularly useful when dealing with noisy or high-variance gradients common \
in SGD. The momentum term helps navigate through the irregularities of the \
loss surface more effectively, leading to a smoother and often faster path to \
the minimum. By leveraging past gradients, these methods can speed up \
convergence, reducing the time and computational resources needed for \
training. This leads to faster convergence and better overall performance in \
training NNs and other machine-learning models.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.9450363193359327`*^9}, {
  3.945036369916417*^9, 3.945036369997025*^9}},
 CellID->1222639042,ExpressionUUID->"725bc243-34ac-4fcd-b39b-1aa31711dd8e"],

Cell["\<\
Following the discussion on accelerated gradient descent, we turn our \
attention to adaptive learning rate algorithms [80-93]. Adaptive learning \
rate algorithms adaptively adjust the learning rate during training based on \
past gradients, and other relevant metrics. These algorithms aim to strike a \
balance between the benefits of using large learning rates for fast \
convergence and the stability provided by smaller learning rates to prevent \
overshooting or oscillations. Popular examples include AdaGrad, RMSProp, \
AdaDelta, Adam, AdaMax, Nadam, and AMSGRAD, each with its own approach to \
adaptively scale the learning rates for individual model parameters.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.94503632360953*^9}, {
  3.945036370007318*^9, 3.945036370047329*^9}},
 CellID->917494872,ExpressionUUID->"67459e35-aac0-4cfb-8540-9078cbe169d7"],

Cell["\<\
Moreover, we explore second-order optimization methods [11,15,25,37]. \
Second-order optimization methods, such as Newton, Marquardt, and variants \
like conjugate gradient (Hestenes-Stiefel formula, Polak-Ribiere formula, \
Fletcher-Reeves formula), and quasi-Newton (rank one correction, DFP, and \
BFGS), etc., leverage information from the second derivatives of the loss \
function to guide the optimization process. By incorporating curvature \
information, these methods can converge faster and more accurately than \
first-order methods like GD. However, they often come with higher \
computational costs and memory requirements due to the need to compute and \
store second-order derivatives or their approximations.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036296812231*^9}, {
  3.945036335195446*^9, 3.9450363352209063`*^9}, {3.945036370057334*^9, 
  3.945036370097218*^9}},
 CellID->1928013366,ExpressionUUID->"91cd7dcc-9710-4dd3-8837-22795265f2b6"],

Cell[TextData[{
 "This chapter serves as a continuation of the foundational principles \
introduced in ",
 ButtonBox["Chapter 5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    FrontEnd`FileName[{$RootDirectory, "Users", "fengh", "Documents", "RDS", 
      "EDITED", "Neural_NetWork_and_Deep_Learning"}, 
     "NNDL-05-challengs-NN-opt.nb", CharacterEncoding -> "UTF-8"], None},
  ButtonNote->
   "/Users/fengh/Documents/RDS/EDITED/Neural_NetWork_and_Deep_Learning/NNDL-\
05-challengs-NN-opt.nb"],
 ". Here, we delve into the intricate landscape of learning rate schedules \
and adaptive algorithms, employing the computational power of Mathematica to \
elucidate their mechanisms and applications. Divided into two units, this \
chapter demystifies these fundamental concepts."
}], "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036296812231*^9}, {
  3.945036339740938*^9, 3.945036339766679*^9}, {3.945036370107273*^9, 
  3.945036370128275*^9}, {3.94503653915486*^9, 3.9450365391605463`*^9}},
 CellID->1252636148,ExpressionUUID->"a4559d79-a52b-4b71-a36f-d86b9c10f7a7"],

Cell["\<\
The first unit serves as a foundational exploration of learning rate \
schedules and adaptive optimization algorithms, leveraging the dynamic \
capabilities of Mathematica to provide intuitive insights. By building \
optimization algorithms from scratch, the reader gains a deeper understanding \
of the underlying principles. Through interactive manipulations, readers are \
guided step by step to comprehend the nuances of various algorithms. From \
elucidating traditional learning rate schedules such as step decay, inverse \
time decay, and exponential decay to unraveling sophisticated techniques like \
accelerated gradient descent and adaptive learning rate algorithms, this unit \
equips readers with a profound understanding of the mechanisms driving \
optimization processes. Moreover, Mathematica provides a comprehensive suite \
of built-in functions and tools for optimization, enabling users to \
implement, analyze, and visualize a diverse range of optimization problems.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036296812231*^9}, {
  3.94503634575467*^9, 3.945036370210355*^9}},
 CellID->436130983,ExpressionUUID->"dfbe4eb3-47cb-406a-8360-736ec78ad9b5"],

Cell[TextData[{
 "In the second unit, the focus shifts towards practical applications, \
centering on the optimization of NNs using learning rate schedules and \
adaptive algorithms within the Mathematica environment. In this unit, we \
explore the powerful capabilities of Mathematica\[CloseCurlyQuote]s ",
 StyleBox["NetTrain", "CodeText"],
 " function, leveraging a range of optimization methods and suboptions to \
fine-tune the training process and enhance model performance. ",
 StyleBox["NetTrain", "CodeText"],
 " serves as the cornerstone of NN training within Mathematica, providing a \
versatile and user-friendly interface for optimizing model parameters. At the \
heart of NetTrain lies a suite of optimization methods, including ",
 StyleBox["\[OpenCurlyDoubleQuote]ADAM\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]RMSProp\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]SGD\[CloseCurlyDoubleQuote]", "CodeText"],
 ", and ",
 StyleBox["\[OpenCurlyDoubleQuote]SignSGD\[CloseCurlyDoubleQuote]", 
  "CodeText"],
 ", each offering unique strategies for navigating the high-dimensional \
parameter space of NNs. We will not only explore the selection and \
utilization of these optimization methods but also, we will go into the \
intricacies of their associated suboptions. These suboptions, including ",
 StyleBox["\[OpenCurlyDoubleQuote]Momentum\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Beta1\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Beta2\[CloseCurlyDoubleQuote]", "CodeText"],
 ", and ",
 StyleBox["\[OpenCurlyDoubleQuote]Epsilon\[CloseCurlyDoubleQuote]", 
  "CodeText"],
 ", provide users with fine- grained control over the optimization process, \
allowing for nuanced adjustments to suit the specific requirements of their \
NN architectures and training objectives."
}], "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036296812231*^9}, {
  3.945036353600314*^9, 3.945036370314094*^9}},
 CellID->1066240197,ExpressionUUID->"45823881-5d48-42ba-809e-19140bd18048"],

Cell[TextData[{
 "Furthermore, the ",
 StyleBox["\[OpenCurlyDoubleQuote]LearningRateSchedule\[CloseCurlyDoubleQuote]\
", "CodeText"],
 " suboption allows you to specify a learning rate schedule, which can be a \
fixed learning rate, a schedule that decreases the learning rate over time \
(such as exponential decay or step decay), or any other custom schedule you \
define. Through comprehensive demonstrations and hands-on exercises, this \
unit empowers practitioners to harness the full potential of learning rate \
schedules and adaptive algorithms in enhancing the performance of NNs."
}], "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036296812231*^9}, {
  3.945036356960003*^9, 3.9450363703550167`*^9}},
 CellID->1061686974,ExpressionUUID->"56c49089-eb54-4933-bd67-2fb558a83506"],

Cell["\<\
Together, these units shed light on the nuanced interconnections among \
learning rate schedules, adaptive algorithms, and NN optimization.\
\>", "Text",
 CellChangeTimes->{{3.94503628212224*^9, 3.945036296812231*^9}, 
   3.945036370365139*^9},
 CellID->1953244382,ExpressionUUID->"0e588cdb-56e4-44cc-b5f2-f65b8f4b83b2"],

Cell[CellGroupData[{

Cell["\<\
Understanding Learning Rate Schedules and Adaptive Algorithms with Mathematica\
\>", "Subsection",
 CellChangeTimes->{{3.945036657383816*^9, 3.945036672728717*^9}},
 CellID->1037312285,ExpressionUUID->"cdc48c09-4572-4914-9a2a-5cddfbf41931"],

Cell["code 6.1 Step Decay", "CodeCaption",
 CellChangeTimes->{{3.945036675639832*^9, 3.945036677484394*^9}, {
  3.945115607106045*^9, 3.945115609323407*^9}},
 CellID->621517190,ExpressionUUID->"04f12eb4-2e31-4c4d-b128-1d0e14284dd0"],

Cell["\<\
(* The code implements an interactive visualization tool using Mathematica\
\[CloseCurlyQuote]s Manipulate function to explore the behavior of a step \
decay learning rate schedule. Users can adjust two parameters, the drop \
factor (d) and step size (s), via sliders to observe their impact on the \
learning rate decay. The code defines a step decay function that computes the \
learning rate based on the initial learning rate, drop factor, step size, and \
current iteration. Data points representing the learning rate at each \
iteration are generated and plotted dynamically: *)\
\>", "comment",
 CellChangeTimes->{{3.945036687253132*^9, 3.945036692437409*^9}},
 CellID->16470362,ExpressionUUID->"5a9ecda5-3caf-4d78-a6da-5c00ed3b5716"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "data", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"stepDecay", "[", 
        RowBox[{
        "initialLearningRate_", ",", "dropFactor_", ",", "stepSize_", ",", 
         "currentIteration_"}], "]"}], ":=", 
       RowBox[{"initialLearningRate", "*", 
        RowBox[{"dropFactor", "^", 
         RowBox[{"Floor", "[", 
          RowBox[{"currentIteration", "/", "stepSize"}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"stepDecay", "[", 
            RowBox[{"initialLearningRate", ",", "d", ",", "s", ",", "i"}], 
            "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "100"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{"data", ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", 
        RowBox[{"PlotLabel", "->", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<Step Decay with d = `` and s = ``\>\"", ",", "d", ",", "s"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "0.5", ",", "\"\<Drop Factor\>\""}], "}"}], ",", 
     "0.1", ",", "0.9", ",", "0.01"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "10", ",", "\"\<Step Size\>\""}], "}"}], ",", "1", 
     ",", "20", ",", "1"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Initialization", ":>", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"initialLearningRate", "=", "0.2"}], ";"}], 
     "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",\

 CellChangeTimes->{{3.945036698140277*^9, 3.945036886874399*^9}},
 CellLabel->"In[543]:=",
 CellID->133249425,ExpressionUUID->"b10f9d9d-6008-4bcf-ba2a-cb10f100c6ed"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`d$$ = 0.5800000000000001, $CellContext`s$$ =
     8, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`d$$], 0.5, "Drop Factor"}, 0.1, 0.9, 0.01, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`s$$], 10, "Step Size"}, 1, 20, 1, ControlType -> 
      Manipulator}}, Typeset`size$$ = {
    375., {108.40903235489422`, 117.44955969864422`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`d$$ = 0.5, $CellContext`s$$ = 10}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`data$}, $CellContext`stepDecay[
           Pattern[$CellContext`initialLearningRate, 
            Blank[]], 
           Pattern[$CellContext`dropFactor, 
            Blank[]], 
           Pattern[$CellContext`stepSize, 
            Blank[]], 
           Pattern[$CellContext`currentIteration, 
            
            Blank[]]] := $CellContext`initialLearningRate \
$CellContext`dropFactor^
           Floor[$CellContext`currentIteration/$CellContext`stepSize]; \
$CellContext`data$ = Table[{$CellContext`i, 
            $CellContext`stepDecay[$CellContext`initialLearningRate, \
$CellContext`d$$, $CellContext`s$$, $CellContext`i]}, {$CellContext`i, 0, 
            100}]; ListLinePlot[$CellContext`data$, PlotRange -> All, 
          PlotLabel -> 
          StringForm[
           "Step Decay with d = `` and s = ``", $CellContext`d$$, \
$CellContext`s$$], AxesLabel -> {"Iterations", "Learning Rate"}, ImageSize -> 
          300]], "Specifications" :> {{{$CellContext`d$$, 0.5, "Drop Factor"},
          0.1, 0.9, 0.01}, {{$CellContext`s$$, 10, "Step Size"}, 1, 20, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{430.125, {179.15903235489424`, 188.19955969864424`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`initialLearningRate = 0.2; Null}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9450368872026367`*^9},
 CellLabel->"Out[543]=",
 CellID->2048253551,ExpressionUUID->"39908a1c-e068-49fd-ab43-dfcf716fef53"]
}, Open  ]],

Cell["code 6.2 Inverse Time Decay", "CodeCaption",
 CellChangeTimes->{{3.9450369149207697`*^9, 3.94503691638831*^9}, {
  3.945115599847939*^9, 3.945115603036611*^9}},
 CellID->834570247,ExpressionUUID->"9503363b-a30e-424d-8322-5c41958f92cc"],

Cell["\<\
(* In this Manipulate interface, you can interactively choose different \
values for the decay rate and observe the corresponding learning rate decay \
plot. Adjust the decayRate slider to explore how the learning rate changes \
over iterations according to the inverse time decay formula: *)\
\>", "comment",
 CellChangeTimes->{{3.945036927429985*^9, 3.945036932245623*^9}},
 CellID->2002736252,ExpressionUUID->"1c3d77ec-eebf-4a12-bfdf-ca3432e0620b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "data", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"inverseTimeDecay", "[", 
        RowBox[{
        "initialLearningRate_", ",", "decayRate_", ",", "currentIteration_"}],
         "]"}], ":=", 
       RowBox[{"initialLearningRate", "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"decayRate", "*", "currentIteration"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"inverseTimeDecay", "[", 
            RowBox[{"initialLearningRate", ",", "d", ",", "i"}], "]"}]}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "100"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{"data", ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "100"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.002", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotLabel", "->", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<Inverse Time Decay \\nInital Rate = `` \\nd = ``\>\"", ",", 
           "initialLearningRate", ",", "d"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "initialLearningRate", ",", "0.5", ",", 
       "\"\<Initial Learning Rate\>\""}], "}"}], ",", "0.01", ",", "1", ",", 
     "0.01"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", "0.5", ",", "\"\<Decay Rate\>\""}], "}"}], ",", 
     "0.01", ",", "0.9", ",", "0.01"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.9450369389539337`*^9, 3.945037107989814*^9}},
 CellLabel->"In[544]:=",
 CellID->760592262,ExpressionUUID->"231891b5-431a-4439-8dbf-ef9f1d27f667"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`d$$ = 
    0.23, $CellContext`initialLearningRate$$ = 0.78, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialLearningRate$$], 0.5, 
       "Initial Learning Rate"}, 0.01, 1, 0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`d$$], 0.5, "Decay Rate"}, 0.01, 0.9, 0.01, 
      ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {129.35629797989424`, 138.39682532364424`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`d$$ = 
        0.5, $CellContext`initialLearningRate$$ = 0.5}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`data$}, $CellContext`inverseTimeDecay[
           Pattern[$CellContext`initialLearningRate, 
            Blank[]], 
           Pattern[$CellContext`decayRate, 
            Blank[]], 
           Pattern[$CellContext`currentIteration, 
            Blank[]]] := $CellContext`initialLearningRate/(
          1 + $CellContext`decayRate $CellContext`currentIteration); \
$CellContext`data$ = Table[{$CellContext`i, 
            $CellContext`inverseTimeDecay[$CellContext`initialLearningRate$$, \
$CellContext`d$$, $CellContext`i]}, {$CellContext`i, 0, 100}]; 
        ListLinePlot[$CellContext`data$, PlotRange -> {{0, 100}, {0.002, 1}}, 
          PlotLabel -> 
          StringForm[
           "Inverse Time Decay \nInital Rate = `` \nd = ``", \
$CellContext`initialLearningRate$$, $CellContext`d$$], 
          AxesLabel -> {"Iterations", "Learning Rate"}, ImageSize -> 300]], 
      "Specifications" :> {{{$CellContext`initialLearningRate$$, 0.5, 
          "Initial Learning Rate"}, 0.01, 1, 
         0.01}, {{$CellContext`d$$, 0.5, "Decay Rate"}, 0.01, 0.9, 0.01}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{430.125, {200.10629797989424`, 209.14682532364424`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.945037108253436*^9},
 CellLabel->"Out[544]=",
 CellID->784067528,ExpressionUUID->"9536af7f-6c59-4614-9771-360fe01239f2"]
}, Open  ]],

Cell["code 6.3 Exponential Decay", "CodeCaption",
 CellChangeTimes->{{3.9450374175914917`*^9, 3.945037418960662*^9}, {
  3.945115591364901*^9, 3.945115594862214*^9}},
 CellID->1159324126,ExpressionUUID->"e056f3d2-c2e9-4c49-9055-d527721c0ba1"],

Cell["\<\
(* The code uses the standard exponential decay formula, where the learning \
rate decreases exponentially with the increase in the step. Adjust the \
sliders for the initial learning rate and decay rate to observe how the \
learning rate changes over steps according to the standard exponential decay \
formula: *)\
\>", "comment",
 CellChangeTimes->{{3.9450374285664062`*^9, 3.9450374327065067`*^9}},
 CellID->1240756433,ExpressionUUID->"0072c5ca-69c4-4a94-b834-4483368970fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "data", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"exponentialDecay", "[", 
        RowBox[{
        "initialLearningRate_", ",", "decayRate_", ",", "currentIteration_"}],
         "]"}], ":=", 
       RowBox[{"initialLearningRate", "*", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", "decayRate"}], "*", "currentIteration"}], "]"}]}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"exponentialDecay", "[", 
            RowBox[{"initialLearningRate", ",", "decayRate", ",", "i"}], 
            "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "100"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{"data", ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "100"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.002", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotLabel", "->", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<Exponetial Decay\\nInitial Rate = ``,\\nDecay Rate=``\>\"", 
           ",", "initialLearningRate", ",", "decayRate"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "initialLearningRate", ",", "0.5", ",", 
       "\"\<Initial Learning Rate\>\""}], "}"}], ",", "0.01", ",", "1", ",", 
     "0.01"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"decayRate", ",", "0.5", ",", "\"\<Decay Rate\>\""}], "}"}], 
     ",", "0.1", ",", "1", ",", "0.01"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.9450376456337557`*^9, 3.9450378440139914`*^9}},
 CellLabel->"In[3]:=",
 CellID->237913771,ExpressionUUID->"f741ef93-6f8a-4182-a659-db9cfe8ecde6"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`decayRate$$ = 
    0.1, $CellContext`initialLearningRate$$ = 1., Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialLearningRate$$], 0.5, 
       "Initial Learning Rate"}, 0.01, 1, 0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`decayRate$$], 0.5, "Decay Rate"}, 0.1, 1, 0.01, 
      ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {129.35629797989424`, 138.39682532364424`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`decayRate$$ = 
        0.5, $CellContext`initialLearningRate$$ = 0.5}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`data$}, $CellContext`exponentialDecay[
           Pattern[$CellContext`initialLearningRate, 
            Blank[]], 
           Pattern[$CellContext`decayRate, 
            Blank[]], 
           Pattern[$CellContext`currentIteration, 
            Blank[]]] := $CellContext`initialLearningRate 
          Exp[(-$CellContext`decayRate) $CellContext`currentIteration]; \
$CellContext`data$ = Table[{$CellContext`i, 
            $CellContext`exponentialDecay[$CellContext`initialLearningRate$$, \
$CellContext`decayRate$$, $CellContext`i]}, {$CellContext`i, 0, 100}]; 
        ListLinePlot[$CellContext`data$, PlotRange -> {{0, 100}, {0.002, 1}}, 
          PlotLabel -> 
          StringForm[
           "Exponetial Decay\nInitial Rate = ``,\nDecay Rate=``", \
$CellContext`initialLearningRate$$, $CellContext`decayRate$$], 
          AxesLabel -> {"Iterations", "Learning Rate"}, ImageSize -> 300]], 
      "Specifications" :> {{{$CellContext`initialLearningRate$$, 0.5, 
          "Initial Learning Rate"}, 0.01, 1, 
         0.01}, {{$CellContext`decayRate$$, 0.5, "Decay Rate"}, 0.1, 1, 
         0.01}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{430.125, {200.10629797989424`, 209.14682532364424`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.9450377069872704`*^9, {3.9450378377329493`*^9, 3.945037844416114*^9}},
 CellLabel->"Out[3]=",
 CellID->1810917716,ExpressionUUID->"f8a9cd2d-7502-40ad-88bb-083c9e458434"]
}, Open  ]],

Cell["code 6.4 Exponential Decay and Inverse Time Decay", "CodeCaption",
 CellChangeTimes->{{3.945037871568549*^9, 3.9450378736953907`*^9}, {
  3.945115578105356*^9, 3.945115586083885*^9}},
 CellID->1955807528,ExpressionUUID->"f31b30c1-cb82-4fa6-82c5-14c575a29c38"],

Cell["\<\
(* The code defines both exponential decay and inverse time decay functions \
and generates data for both methods. It then plots the learning rates over \
steps for comparison. Adjust the sliders for the initial learning rate, decay \
rate, and decay steps to observe how the learning rates evolve using both \
decay methods: *)\
\>", "comment",
 CellChangeTimes->{{3.945037883512917*^9, 3.9450378871380796`*^9}},
 CellID->1410798970,ExpressionUUID->"476bd5eb-fc93-4628-9c2a-58ea1cad1d44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dataExp", ",", "dataInvTime"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"exponentialDecay", "[", 
        RowBox[{
        "initialLearningRate_", ",", "decayRate_", ",", "currentStep_"}], 
        "]"}], ":=", 
       RowBox[{"initialLearningRate", "*", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", "decayRate"}], "*", "currentStep"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"inverseTimeDecay", "[", 
        RowBox[{
        "initialLearningRate_", ",", "decayRate_", ",", "currentIteration_"}],
         "]"}], ":=", 
       RowBox[{"initialLearningRate", "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"decayRate", "*", "currentIteration"}]}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dataExp", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"exponentialDecay", "[", 
            RowBox[{"initialLearningRate", ",", "decayRate", ",", "i"}], 
            "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "100"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dataInvTime", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"inverseTimeDecay", "[", 
            RowBox[{"initialLearningRate", ",", "decayRate", ",", "i"}], 
            "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "100"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"dataExp", ",", "dataInvTime"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "100"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.002", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "PlotLabel", "->", 
         "\"\<Exponential Decay and Inverse Time Decay\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotLegends", "->", 
         RowBox[{"Placed", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<Exponential Decay\>\"", ",", "\"\<Inverse Time Decay\>\""}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.7", ",", "0.78"}], "}"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "initialLearningRate", ",", "0.7", ",", 
       "\"\<Initial Learning Rate\>\""}], "}"}], ",", "0.01", ",", "1", ",", 
     "0.01"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"decayRate", ",", "0.1", ",", "\"\<Decay Rate\>\""}], "}"}], 
     ",", "0.01", ",", "0.9", ",", "0.001"}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.945067838297134*^9, 3.9450680913925533`*^9}},
 CellLabel->"In[2]:=",
 CellID->965875613,ExpressionUUID->"be384573-2cc6-4d03-9c91-50ee6e204c5a"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`decayRate$$ = 
    0.095, $CellContext`initialLearningRate$$ = 0.84, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialLearningRate$$], 0.7, 
       "Initial Learning Rate"}, 0.01, 1, 0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`decayRate$$], 0.1, "Decay Rate"}, 0.01, 0.9, 0.001, 
      ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {108.40903235489424`, 117.44955969864424`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`decayRate$$ = 
        0.1, $CellContext`initialLearningRate$$ = 0.7}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`dataExp$, $CellContext`dataInvTime$}, \
$CellContext`exponentialDecay[
           Pattern[$CellContext`initialLearningRate, 
            Blank[]], 
           Pattern[$CellContext`decayRate, 
            Blank[]], 
           Pattern[$CellContext`currentStep, 
            Blank[]]] := $CellContext`initialLearningRate 
          Exp[(-$CellContext`decayRate) $CellContext`currentStep]; \
$CellContext`inverseTimeDecay[
           Pattern[$CellContext`initialLearningRate, 
            Blank[]], 
           Pattern[$CellContext`decayRate, 
            Blank[]], 
           Pattern[$CellContext`currentIteration, 
            Blank[]]] := $CellContext`initialLearningRate/(
          1 + $CellContext`decayRate $CellContext`currentIteration); \
$CellContext`dataExp$ = Table[{$CellContext`i, 
            $CellContext`exponentialDecay[$CellContext`initialLearningRate$$, \
$CellContext`decayRate$$, $CellContext`i]}, {$CellContext`i, 0, 
            100}]; $CellContext`dataInvTime$ = Table[{$CellContext`i, 
            $CellContext`inverseTimeDecay[$CellContext`initialLearningRate$$, \
$CellContext`decayRate$$, $CellContext`i]}, {$CellContext`i, 0, 100}]; 
        ListLinePlot[{$CellContext`dataExp$, $CellContext`dataInvTime$}, 
          PlotRange -> {{0, 100}, {0.002, 1}}, PlotLabel -> 
          "Exponential Decay and Inverse Time Decay", PlotLegends -> 
          Placed[{"Exponential Decay", "Inverse Time Decay"}, {0.7, 0.78}], 
          AxesLabel -> {"Iterations", "Learning Rate"}, ImageSize -> 300]], 
      "Specifications" :> {{{$CellContext`initialLearningRate$$, 0.7, 
          "Initial Learning Rate"}, 0.01, 1, 
         0.01}, {{$CellContext`decayRate$$, 0.1, "Decay Rate"}, 0.01, 0.9, 
         0.001}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{430.125, {179.15903235489424`, 188.19955969864424`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9450679321196623`*^9, 3.9450680916677637`*^9},
 CellLabel->"Out[2]=",
 CellID->549243851,ExpressionUUID->"d457eaf3-e5a2-461e-9ac9-2c7ca042ec4f"]
}, Open  ]],

Cell["code 6.5 Polynomial Decay", "CodeCaption",
 CellChangeTimes->{{3.945068105394747*^9, 3.945068107701212*^9}, {
  3.9451155693656483`*^9, 3.945115572718439*^9}},
 CellID->1256688951,ExpressionUUID->"ebfcdebf-2566-45c8-8412-8af4b9c031e9"],

Cell["\<\
(* The code aims to create an interactive visualization tool for exploring \
polynomial decay in learning rate dynamics. Utilizing Mathematica\
\[CloseCurlyQuote]s Manipulate function, users can dynamically adjust \
parameters such as the initial learning rate, power of the polynomial decay \
function, and total iterations via sliders. Within the module, a polynomial \
decay function is defined to compute the learning rate at each iteration \
based on the specified parameters. Data points representing the learning rate \
over iterations are generated and plotted using ListLinePlot, with the plot \
displaying the decay curve: *)\
\>", "comment",
 CellChangeTimes->{{3.9450681202376633`*^9, 3.945068133056919*^9}},
 CellID->1602674610,ExpressionUUID->"47e4b08c-25e8-4ef6-abf5-a449b5a6a4c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "data", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"polynomialDecay", "[", 
        RowBox[{
        "initialLearningRate_", ",", "power_", ",", "totalIterations_", ",", 
         "currentIteration_"}], "]"}], ":=", 
       RowBox[{"initialLearningRate", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"currentIteration", "/", "totalIterations"}]}], ")"}], "^",
          "power"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"polynomialDecay", "[", 
            RowBox[{
            "initialLearningRate", ",", "power", ",", "totalIterations", ",", 
             "i"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "0", ",", "totalIterations"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{"data", ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "2000"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.002", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotLabel", "->", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<Polynomial Decay\\nInitial Rate=``,Power=``,Total \
Iterations=``\>\"", ",", "initialLearningRate", ",", "power", ",", 
           "totalIterations"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "initialLearningRate", ",", "0.7", ",", 
       "\"\<Initial Learning Rate\>\""}], "}"}], ",", "0.01", ",", "1", ",", 
     "0.01"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"power", ",", "0.9", ",", "\"\<Power\>\""}], "}"}], ",", "0.1", 
     ",", "2", ",", "0.1"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "totalIterations", ",", "1500", ",", "\"\<Total Iterations\>\""}], 
      "}"}], ",", "100", ",", "2000", ",", "100"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Initialization", ":>", 
    RowBox[{"{", 
     RowBox[{"(*", 
      RowBox[{"Set", " ", "parameters"}], "*)"}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.9450681390264072`*^9, 3.9450683570836067`*^9}},
 CellLabel->"In[4]:=",
 CellID->2027549323,ExpressionUUID->"1de7dee8-7219-487a-beb1-b76c74acfe4f"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`initialLearningRate$$ = 
    0.91, $CellContext`power$$ = 0.4, $CellContext`totalIterations$$ = 1500, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialLearningRate$$], 0.7, 
       "Initial Learning Rate"}, 0.01, 1, 0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`power$$], 0.9, "Power"}, 0.1, 2, 0.1, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`totalIterations$$], 1500, "Total Iterations"}, 100, 
      2000, 100, ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {118.88266516739421`, 127.92319251114421`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`initialLearningRate$$ = 
        0.7, $CellContext`power$$ = 0.9, $CellContext`totalIterations$$ = 
        1500}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`data$}, $CellContext`polynomialDecay[
           Pattern[$CellContext`initialLearningRate, 
            Blank[]], 
           Pattern[$CellContext`power, 
            Blank[]], 
           Pattern[$CellContext`totalIterations, 
            Blank[]], 
           Pattern[$CellContext`currentIteration, 
            Blank[]]] := $CellContext`initialLearningRate (
            1 - $CellContext`currentIteration/$CellContext`totalIterations)^$\
CellContext`power; $CellContext`data$ = Table[{$CellContext`i, 
            $CellContext`polynomialDecay[$CellContext`initialLearningRate$$, \
$CellContext`power$$, $CellContext`totalIterations$$, $CellContext`i]}, \
{$CellContext`i, 0, $CellContext`totalIterations$$}]; 
        ListLinePlot[$CellContext`data$, PlotRange -> {{0, 2000}, {0.002, 1}},
           PlotLabel -> 
          StringForm[
           "Polynomial Decay\nInitial Rate=``,Power=``,Total Iterations=``", \
$CellContext`initialLearningRate$$, $CellContext`power$$, \
$CellContext`totalIterations$$], AxesLabel -> {"Iterations", "Learning Rate"},
           ImageSize -> 300]], 
      "Specifications" :> {{{$CellContext`initialLearningRate$$, 0.7, 
          "Initial Learning Rate"}, 0.01, 1, 
         0.01}, {{$CellContext`power$$, 0.9, "Power"}, 0.1, 2, 
         0.1}, {{$CellContext`totalIterations$$, 1500, "Total Iterations"}, 
         100, 2000, 100}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{430.125, {206.2576651673942, 215.2981925111442}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.945068191592005*^9, 3.945068357581398*^9},
 CellLabel->"Out[4]=",
 CellID->173389460,ExpressionUUID->"5c505344-c49e-4aeb-af58-c61923640be2"]
}, Open  ]],

Cell["code 6.6 Polynomial Decay with Warm Restarts", "CodeCaption",
 CellChangeTimes->{{3.945068396896166*^9, 3.945068398030759*^9}, {
  3.945115555599422*^9, 3.945115564337253*^9}},
 CellID->21345241,ExpressionUUID->"b6e56348-7654-4c5a-83b1-d119ce7f71ff"],

Cell["\<\
(* The code aims to analyze and visualize polynomial decay with warm \
restarts, a technique often employed in training NN. It defines a function, \
polynomialDecayWithRestart, within a module to simulate learning rate decay \
with periodic resets to prevent convergence to suboptimal solutions. \
Parameters such as the initial learning rate, powers representing different \
decay rates, total iterations, and warm restart fractions are defined to \
allow for customizable exploration of decay strategies. Data lists are \
generated for various decay powers using nested table commands, and these are \
plotted using ListLinePlot. The resulting plot displays the learning rate \
strategies, with each curve representing a different decay rate: *)\
\>", "comment",
 CellChangeTimes->{{3.9450684064345503`*^9, 3.945068416369299*^9}},
 CellID->1376829416,ExpressionUUID->"5a18c0ef-572d-4b96-9d95-f4565a69f586"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"polynomialDecayWithRestart", "[", 
     RowBox[{
     "initialLearningRate_", ",", "power_", ",", "totalEpochs_", ",", 
      "restartFractions_", ",", "currentIterations_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "restartPoints", ",", "currentEpoch", ",", "currentLearningRate", ",", 
        "currentIteration", ",", "totalEpoch"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"restartPoints", "=", 
        RowBox[{"Round", "[", 
         RowBox[{"restartFractions", "*", "totalEpochs"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Piecewise", "[", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentLearningRate", ",", "totalEpoch"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{"initialLearningRate", ",", 
                RowBox[{"restartPoints", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], ";"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"restartPoints", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ">=", "currentIterations", ">=",
              "1"}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentLearningRate", ",", "totalEpoch"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"initialLearningRate", "*", "0.65"}], ",", 
                RowBox[{"restartPoints", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], ";"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"restartPoints", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ">=", "currentIterations", ">=", 
             RowBox[{
              RowBox[{"restartPoints", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentLearningRate", ",", "totalEpoch"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"initialLearningRate", "*", 
                 RowBox[{"0.65", "^", "2"}]}], ",", 
                RowBox[{"restartPoints", "[", 
                 RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], ";"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"restartPoints", "[", 
              RowBox[{"[", "3", "]"}], "]"}], ">=", "currentIterations", ">=", 
             RowBox[{
              RowBox[{"restartPoints", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "+", "1"}]}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"currentLearningRate", ",", "totalEpoch"}], "}"}], "=", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"initialLearningRate", "*", 
                 RowBox[{"0.65", "^", "3"}]}], ",", "totalEpochs"}], "}"}]}], 
             ";"}], ",", "\[IndentingNewLine]", 
            RowBox[{"totalEpochs", ">=", "currentIterations", ">=", 
             RowBox[{
              RowBox[{"restartPoints", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "+", "1"}]}]}], "}"}]}], 
         "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"currentLearningRate", "*", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"currentIterations", "/", "totalEpoch"}]}], ")"}], "^", 
         "power"}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"initialLearningRate", "=", "0.2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"powers", "=", 
   RowBox[{"{", 
    RowBox[{"0.9", ",", "0.7", ",", "0.5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalIterations", "=", "1000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"restartFractions", "=", 
    RowBox[{"{", 
     RowBox[{"0.25", ",", "0.5", ",", "0.75"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dataLists", "=", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"polynomialDecayWithRestart", "[", 
           RowBox[{
           "initialLearningRate", ",", "power", ",", "totalIterations", ",", 
            "restartFractions", ",", "i"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "totalIterations"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"power", ",", "powers"}], "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
  RowBox[{"dataLists", ",", "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], "}"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<n=0.9\>\"", ",", "\"\<n=0.7\>\"", ",", "\"\<n=0.5\>\""}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.85", ",", "0.78"}], "}"}]}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.9450684247032223`*^9, 3.945068511208765*^9}, {
  3.945068545111061*^9, 3.945068925286776*^9}},
 CellLabel->"In[7]:=",
 CellID->1436264831,ExpressionUUID->"b2ba42e6-f58c-4bdb-b946-5d6a4e6a216c"],

Cell[BoxData[
 TagBox[
  GraphicsBox[{{{}, 
     InterpretationBox[{
       TagBox[{{}, {}, 
         TagBox[
          {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
            NCache[
             Rational[1, 180], 0.005555555555555556]], AbsoluteThickness[2], 
           LineBox[CompressedData["
1:eJxN2nk41P33P/DRShttaNO0qxQqhUpPaaHCUEqpjC07Y8vOmDFjMDPmbqWk
SRutSFKRSSWlUPddadcmKjWVSvvP7/qe93V9/HNfj16OMy/nvt7nnBljPEOd
fbqxWKzW7izW///v/32pF4z0P7GTJbi2gP4BzZtlhj4BjDVRNz/K7qozYx00
med9mziX8RBcbLA0SR3HWB8cm2j1k76MR8ItJ9ZsTkctmQ0ficcv6SPGY9Hh
abuw+TLj8eB3s+5hepzxRPQuWbMgeTtjQ3D0t6ivJzKegooxH4YM2cTYCKq2
TYXrHBhPx7f9b47kzWZsgn9TvXWbDRib4kHhmVaD3oxnIFVDZeD24Sp5Jgpm
OJ/edo/xLPCEcwvrqhib4V2V9be/hxnPxjj2uFxTBeM5KJq2Yxs3hrE5Wgrs
Hku5jC0QF/wyvMyWsSUOre7p/NiE8VzcHmsTrTGM8TycWG30dKwG4/loHL1U
bN1WQ7ZC+eyB/htuMV4AjuqvcPNZxsCd6cn/SveR+cC0sZ9XKtOZc2vkLS3T
KA5jzq3Rbj78/oW1zPlCPF3ne/eaNXO+ENrnH325NZk5t8Ho9pMz7w1kzm0w
93U/6f3vV+h8ET49Hvqz6RmZvwiOo18k3LnGnC+Gdbugf0Mxc74Yi9d8L7iS
w5wvge1gLD+bwpwvwVWXJepCf+Z8KdiF6q07nZjzpRh6WX+GwII5t0WYu6zG
fwxzbotHfQbZO2gx53a4yHK/aPzxMp3bwfU7e/SA+2TWMlT+6vRoUzHny6A9
K0F0sYA5Xw7l2ZmiHQrmfDkM/HLX+8Uw5ytQWjCx9xwuc74CYzGb382WObdH
xfCxl64bM+f2cNSbVZelx5w74EljwVanv5fo3AHzfU/q6bwmsxwRuMTfua6e
OXdE+bs2K2EZc85BwcnZTXPyyOAgOXnJsDYR8/0c8As1fu8IJqs4uJptnWTt
wsQ7oWx7487WeUy8Ez4L/RdJxzPxTniddybJqB8T74TCWautr32upnhn+Lg3
ij0fkuGMwZVKu85qMt8ZkgmmqRlHyCpn3N74wGTYFiZ+JS43vLA7EMvEr8Q5
E+G1qR5M/EqEWD4qPGnLxK/EB2fWK2MTJn4VpObvI4/pMfGrUH7kn5UT/l6k
+FVo0LkUt6uFrFqFEwZLX/atJ7Nc0De6Pj32NBkuECz/4v0il4l3wcwfC0Pt
Upl4F/wqmJx/NJCJX41hT3p+01rJxK+Gsa6Br7clE78aB9bkvz03holfDaNL
RxP7azHxaxAxZp7uerWK4tfgv+D5Jw7dI/PXoNvGFKv2C2TVGsS3qKqMD5FZ
rqg9v3tKiIyJd8Wyxp3RBZFMvCt21LP3PnFj4l0xS5GWo2PDxK+FUqHhbjWF
iV+L8PUFr30HMvFrofP94+rhH6sofi2mnTu0aH0VmbUODdzPadtlZKxD3K7R
OjVuZP46TBtodqN9MhO/DmlD/xzp13mB4t3Qc0GP3WNryHDDrG5ZGcbbyHw3
rJiX7zvTk6xyw71Tv0ZPN2Hi12OKXHff6D+VFL8ePc6Obup9g8xfj/62f4pb
csiq9ai+smJEhS+ZtQFG0a4siRkTvwGjt4y2X9adid8A+Di2d7tVQfEbwAtb
eKM4j8zaiI6IP/+tDiJjI2q5Mz59tCDzN0K0YtYAYW8mfiOGLP47qM+d8xTv
jmP6pm/E+WS4w7KPZuL3UDLfHZJwbqnHfLLKHSvsS2Kq+jDxXNgXDygZ1HTu
/8zmomHGKFu3g2RwYWY8bGxOOJnLRR+Nhok3FpD5XLiMyJnX0Y+s5GJG3w12
Ax+cpXxc8DdKZow7TG7mYntI/8eTI8ksD2zvz502wZrM9sDsoeG9hw4gwwOp
d046fH9QTvk9MMPz16tbh8l8D6grjp/MiyQrPTD+oUTmbk1WecBZVMkdMoDc
7AHugOdalQ/OUH5PNDa/91t7mMz2xMunFhvaIsjwxJZdYVeCQOZ64rt9dvKL
fmS+JzpK//jZ3y+j/J6wyrfaeOQgWeWJWE+zuT/CyM2esHzx+8E8KzLLC91z
3+iF9yGzvcCanVyXc/c05feC/gf/+lP5ZK4XtpcmdFaFkPle2PfxIPuCJVnp
hbX920ae6EVWeWHUttXVWbdLKb8X3Hv3eOWZR2Z544tDd9dJAWS2N7Jq1rY/
MiPDG/JnX6OEGmSuN0zcj1wcfvMU5fdGsObwvfnZZKU3tqvLHg73Jqu8MdS0
xEZoTG72hrf+x30Pf5RQfh94X2KpxtWQ2T54pae1ye0fMnzgolu1TrCezPXB
9ejVXtmTyHwfNEjDbfZ8Kqb8Pojm6FYqKskqH0zJ36oIl5CbfbB7Z2zCwpVk
1iaMuZcyn2VAZm+Ca1uC/GhrEeXfhKzQ+YaLTpG5m/B2iuDitUQyfxNCLjwZ
MM+WrNyEmUP2V+8aRFZtwpRswbC6sycp/yboG3ubmTuQWb5wrz0xPeH5Ccrv
i7hN51x2bCbDF3qfTb6I+pC5Xd9fddVpWd5xyu+LLUEdhc9NyUpfsB/lmjlc
OUb5fVFVcXGC1JXc7ItRC8Yd2P32KOX3QwPv6e34JDLbD+wTWjemDiTDD0qp
5b4j+49Qfj94yvXcvpmR+X64/eBWp05tIeXv8rjdoV/XklV+2H5Z+8ihtwWU
3w/JfbensRPJLH8cSD7y0HMAme2P7TeNgoP2Hqb8/tj/SPJlrgmZ649RGx6P
blQdovz+ePdaUzLJiaz0x+i0/LN4dpDy+2PYrAfTh4eRm/3xgG/lWMIiswK6
+oN3SG/FAcofgJcBQdf1RpMRgEQP74xnx/dT/gAMM4qv8JxH5geAV9BrVc71
fMofAOEdp0lCV7IqAO9rjNpHteyj/AHI9TCz9I0gswJxML4+cT2LzA6E2/Cz
f35IlZQ/EKE21vcWDCNzA+Ez6sEzx2V7KX9XfNSMv+4eeZQ/EL9y/vtWEL2H
8gdi1e/XFuNkuZQ/EFkLX+6r2beb8gdhVmadf8bpXZQ/CPb7Kof61OZQ/iDw
vrluWPEgm/IH4ZjG3IFmb3dS/iBIPlX/HPRzB+UPQrj7r/NNWmRVEPY8XZQT
rbed8gdh+eMG+6fjtlH+YPR998+V39O3Uv5gvPy9uP6C+RbKH4y7Uf1L+1r/
Q/mDMX1u+OXrSxWUPxiNyX02VubIKX8w8pM/BS9XSil/MEq05y/5mJ9B+YNh
3Geq0nmfhPKH4E9JYpjGbjHlD0H9uhi3mKxUyh8Ce9X2tEFJAsofgm8pGUv+
+vApfwgmlJr+s16aQPlDMPOI5js3yxjKH4IpkW2+D25FUP4QdCucEtGaHUL5
Q+HTPSOgp5UP5Q/FlpL7h1ZeXk35Q8H63y9uKH7v6fN8/BV6XvFDcb/I6nRJ
KfP8C0XOheo7VgeY518oDugftr62lXn+heL5f9++OgmZ5x8P/VQVn5vCyTo8
VDh+N9voyTwPebDcduz8MyeyCQ+6U24JvKzJ4CFh6ob0FyZkDg92Yxbe9GCT
uTw0fw5a8USbzOPhwsMrPdb+ZZ6fPFx2Mum49Z6s4AF/M/TtnjDPUx6OHz8Z
euEmuYiHybMjvplWMs9XHpS8g8f3HyM38lA6dqBicC65mYel7+NzUzLJah6q
FxxqbI8js8LQe97yKa4BZJ0wDDjBPqxaS2aHwaTj7qJJdmSTMAxr19eQmjP9
IQyeLzPvv59E5oThdlJDnaMe0y/CYHko8c6JXmReGH63rWrVe0fPf34YAhbW
Lqu/TlaEobbe5ya/kKwMw8k200BjCbkoDJP3jx/9YBNZFYYzWye/5C8mN4ZB
dGL06XHjmX4ThqJB96XV3cjqMFQ+HL5pwzPqJ6xwDPiYO7ejiqwTjpj/tDTT
8ph+FI6HoX+uDE0km4Sj6pkWT+nG9KdwfLQ9zppkSeaEY0iWW3ihPtOvwjFl
RmzVpG/Un3jh+NVv/fN9d5j+FQ6ewfI7eqVkRTjKHZO2pG9h+lk4OBYGQ77x
yEXhuNdis4rrSFaFY09O54or08iN4fiTbtY5oR+5ORw+h184Ct5Q/1OHo9ea
h/YPasmsCMwxffl22mGyTgS8K0vHJYrI7AjsMvr0/qoX2SQCikEmSwcsJCMC
FqPUEzhsMicCquv7UmV/qH9yI/BlVP76mkdkXgT0nOYe/nGOzI/AW/GBDVNy
yIoIjInTiHWJJisj0DHF81O8C7koAp8yqqv3zCSrIvB5Yp8X55h+3RiBQQ19
V/z7gfpzcwRq54m+ttwkqyPQXGbw8MtRMisS4acCPv1NJ+tE4lD0q1k9/cjs
SKw83bGr5xKySSQWTnw9UmM8GZEwn9BR8k2DzImEeNFcl7an1P+5kRj//NLP
O5VkXiTszibkVe4m8yOxLmyumTKWrIiE6ZSKM4lrmHkiEvKe+0atNiMXRaL2
eNjGyYOZ+SISfvd3hX1T0/zQGIkHdcEOqnpm3ohE2+3R74THyOpIDLh4zXph
BjN/RMHf23fJT1+yThTw4676xGJmHomCzt6mORvGkU2i8ORc/0G9NMiIwh3/
zqjCJzSfcKLwq/nH2qUVzLwShfb61aVPc8i8KPiVG8WHR5P5UTjMiT/wdxVZ
EQWLmwYT02aQlV3fb9b4RVOHXBSF28fGa4naad5RRWH2WanLz+vkxijMEa5s
DCwgN0fh5cC8kLsisjoK7/gBE+Z6kVmbscg0qy0HZJ3N6NFx9uSnUWT2Zqw1
Dg1a/JPmJZPNcPytOWRLExmbYbmobFfTaTJnM6S1sR36W8nczaibM3noSh6Z
txlJRkFqsT2ZvxnVU87Hlk4hKzbDavvGAw97k5WbYbMr2OvXS5rHijbjtP7N
Qt1qsmozBAnTA6bsJTd23WfLgJ1zEsjNm9HoVDrWai1Z3XW+1/jv/NlkVjSs
urkazBlM1olGs3Nd2GQ1zXfsaMxe/+7NkJtkk2hkRTyL+15IRjT8emwddE9M
5kSDq3Mk/7gXMy9G43q+fEQiyLxorJuzKXjxKGZ+jIb74EGSXj9oXlRE45di
mpvqLjNPRuO5W7+74afIRdG4nFf+epSCmS+joTvmY9LFIHJjNGaumpSxwY7c
HI0gx8RvHyeQ1dEYfu5SaVI3MisG7fnRJ7s/pflTJwbXbVT/8c8z82gMjIuD
Bn7dSTaJASI/OnlFkhGD3QM2CWo5ZE4M/tskkE+YRubGQDoy1yNOi8yLwfBL
+1tqXtE8y49BqMZYzb7VZEUM+u2YVbQkj6yMwcn5mbWxceSiGCyL97Y8sJqs
isHVBRnvr8wgN8ZAi+dw88kAcnMMPsoHJD6+Q/OyOgbHp+itfCsjs2Lx4eCG
Ny2LyTqxaBwTp934m+ZpdiwKwtplh06TTWLxw0bfJCCYjFgo35pWDZ9A5sRi
zmWr7uWPaP7mxmKBUa9L1tvIvFis1da8fGY5mR+LFT/Crg/rTlbEwr9kcI7v
OZrXlbGwtlv5URlGLorF7IPsrVcMyapYtG9unXfnKc3zjbEYvlV8tGEHuTkW
gsNzdpXak9WxiLTOqBb2YOb/OBiPcHw07zzN/zpx6H1QsudpGLMPxGHyhbXn
Ag3JJnEYpPj8svkJsx/EoSJJcNNqO5kTh3SD4WNFy8ncOJwbrZSf0iDz4vB3
VFnFtTO0T/Dj4G6dv/JqMFnRlT93dufRcWRlHKYan1kRfZ/2jaI4aCRfUBtm
kVVxMMtlp6gWkRu78olv7Jz/g/aP5jgU1x2t23uSrI7Dsvn8ohZvMiselcqq
uwOHk3XiMXJqcB27gfYVdjxs8tV6g1PJJvGw/PzGutWcjHg86aNZt7ed9hlO
PNrKb5pY5JO58Wh19313ajWZF48z00PCtfuS+fFYnHN8xvIq2n8UXfEXXuzc
FEFWxkPPO7G3xyRyUTwKRtg/s3hI+5EqHptN5yer5eTGrvs8/DkrdSG5uev1
T93n2PGF9id1PFrGOgxFIZmVgBP2ly9vWk/WScBB3S/bfLXJ7AQs0JaUWlfT
vmWSAN05a+w6IslIQKhlc2jSJDInATlfnKMunMqi+yfgyoiZXlP1ybwEuHsn
51sn0L7GT4Cept6Qv09ldP8E9Or+MsnDhqxMwDPbn7JNh2ifK0rASm15fV8t
Zr9LQIvLoeMOgZl0/wQsen84yugms+8lYKmFfHn+dLI6AbOkj6cez0qn+yfi
Ycn813Zq2gd1EvHRvNggikNmJ2Lh73ULphal0f0TsfmrKtFPm4xE/HoV3WgY
QvsjJxFpd0e/8b0hovsnYix/24wxU8i8RNy5Or3KMY32S34i4i3a7d6/ENL9
E/F+AmfStwVkZSIUQUcsvXfT/lmUiJnjc1qnf02h+ydi1jLr3hwOuTERda33
66oKaT9tTkReTWtpVDeyOhF7Dt9vbixNovsnIdFMHTvCK5Hun4TYEQ8kpdq0
z7KTsKDQ8bHgXBzdPwmyL9KVAV6xdP8kXF/yyG55H9p3OUkoNwn9pHFyM90/
CV8K7KN8nKLo/kmI3HmpcclH2of5SShx4G4MlYfT/ZPgeNfuTp5hGN0/CQ83
Ww0bmBxK909ChCLRbO/BILp/EvYUPV/Z7bI/3T8J81OiivXub6L7J8F6VdRL
rxdedP8kVP+27nzRzKX7J6N7XgsveI8b3T8Z0Qlq9i2OC90/GWt2l074N9ue
7p8MmNvX7C9fQPdPBut/vzjJKHm+dGKFFvN+TTJW504sqv1C/YWXDK304d11
m5j3b7p+fsM7a+45siK56/9vPf/DuWRlMvKM+ka9TSIXJcPEbKankQdZlYyK
pR+NAmzIjckojd1768AEcnMyrldkrXjUm+l/yeh1ue8unTfUr1h8+LauKrO+
Qdbko1v/A3tCT5B1+CgWTF6xS0HW5wNv+124GM70Rz4GjAz+8GoV2bDrnMV9
1GsO0y/58Iz7xB8/jGzOR+hiw/tWP6nfgY+QOz+bXR6Tbfnwn7Nxm38VmcNH
rXr2h9h9ZFc+LJ54tYuFTH/l4/HAsxkKH7Jfl4tYl3YsZfotH7GNP/7JmUyO
4WOF84bP2X2Z/tv1+lX/Pt/WTv1Uwkf6xL9usgaygo9PH6LWCYrJ2XxkVV66
H7GV6c98ZMP/jkcUuaDr9Q96ZLtiDdOv+XidKTaeaUEu58M092qq7gimf/MR
lvfJ5usv6se1fHyY7uh3+wnTz/lw/qvffkRFbuJDXZh8Mzmf6e98eKce6uGU
Sm7lY3TYAZnBJqbf8zGtSOjVupTc2XWfE9YpJyYz/T8Fv+/WP+P1JWum4IPb
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
f/Ndk1yQDh9X4zcz39C8VZSOpF5nBf515PJ0/PC0O77rGFnV9fqu/+t5VUau
TYfzwNm5H0LIjenYMcrceTCH3JSO1WmZiTNMmfkvHSNN6nTtBzHzX1e9HsTp
en2meU2djj8XekVFMvNeZzqOj7o0JeU0M/9loEf9W+P0Hcz8l4FVdfsTpNHM
/JeBwxc6NDNdmfkvA/tF9TdSLZi/l8pARFkvVexwsmEGtrJdH/j/ZOa/DHgu
8xzs8oiZ/7q+/22B59xKMjIQ6LW1amQe2TYDG6YFjfmeROZkYIsjN7nRneya
gbirSY35YN5fz8DDj2f68saQ/TLQ9v7RJPNuzPvtGeB02zvi53OaJ2My0PFe
/rj8EvP+ewZsHUZ6hx0gSzIw4sW2g+NFZEUGil+Py77tQ87OwM/Vt0zjl5CV
GbhtkuJnMIlc0JW//JNpRW9yUQbCi6qEq1ppHi3PwLgMt5Wva8mqDMRnD9oR
WUiuzcCA2VrWv9LJjRnIfW1plxRAbspAbXTs/h/LyM0ZYPcLWhQ2ldyaAYeZ
cvbzvmR1Bka9m25k/47m2c6u7z8Y6lZyg8zKxL5ZNvkDj5M1M3G4NqgjQEbW
ycSx+qTFF4LJ+pm4evu+pK8DmZ2JNy5Hi52nkw0z8WzXu5KtA8gmmSj290iu
f0/zsHkmftfu0OreQEYmeh9/ZmN6kmybide7N7DXZpE5mUha8lYRF0p27co/
1DhtuyOZm4n2o1kdhcZkv65z11nXz2iTeZkYmtL9+4UPNF/HZEKrUxlW1cD8
/V4m4pYFjT97kizJxKSfSRrHssiKTPidPNK5M5ScnYmDy6O/JziSlZm4/Yf9
eZ0xuSATVvN2/GeqTS7KxLXFb/W7P6H5vTwTd/L1Bm3bQ1Zl4u3yfJ7uBnJt
Jqpu1WtnjGTm/0ycq55+/f1Dmu+buu5zKDd20W5m/s+Eomb2t4x1zPzf5etr
R1QPI6szMVFvd2VbEzP/Z4L/s7pUI5vMkqJbfs1drTVkTSksLl/s1NBlPg+S
IsdA/b7tP9oP9KWoVx6SXtzKfD4kxew1Kw5InMmGUnzVWtl7wUCyiRQXZMbi
lw20T5hLYVntpI6RkyHFTYuRQ36tINtKoS1+eCG4L5kjRY/xlRU3r9G+4SrF
r241TSMkZK4UocraR2uWkP2keFuy7p+UHmSeFLUbrldmV9M+EiPF/ZZBhnv4
ZL4UTS2N2+RWZIkUre/Mrgb9ov1E0fX6pD/5c86Rs6UY3uAieB9NVkqh+v4y
/R8zcoEUTw4dWsX+TPtLkRTNBi17dhWRy6WY+mbqaFYIWSVFmcxIwZlKru26
n3fZocxW2ncapdibkadbfJDcJIW66tg/Kk9ysxSrFoqvnh1Nbu16fQk7fXIf
0T6k7sqf8EvXL4fcKcWHcX6pI1eTWTKYv9JadXYQWVMGpXb4ZCtmf9KRYWhs
5MEjmWR9GSLDtTb9WUpmy9Dw3KiXRQ+yoQwxm86PWqeifcpEhgnL7a09Esjm
Mry20u7mYE6GDHuF2e2jO2jfspXBOfKC7O5JMkeGA+N9/MICya4yyB6v+Pth
Ipkrw5eZjxqcntM+5ifD/NAW5x17yDwZfrYH/6pwJcfIcHS659wrg8l8Gaz1
18aeqKd9TSLD/cE2w2PSyQoZ5iQMSxiziJwtw6jS/u0rf9M+p5TBoEDn9Jhw
coEMlx21Xx5pof2uSIa19+//aV9HLu86VzjEtdUHU/1luLJizbndC8m1Mphd
aNTpXkb7YKMMgyzXVoyaTG6SYeniHq/bdtN+2Nz1+7j+4YDPAHJr1+uPPPNJ
zqd9US2DyLD6lNcn2hc7Zaj96130zIvMkoOdfHdrrzu0P2rKMen127aGxWQd
OQq35YycW+ZL9Zejed70sMUTyWw5FsYu6PluO+2bhnKMjp5XN7Un2USOgqM5
Yo1I2j/N5dAdKL7q/5z2T8jxeIteC5dDtpXD9mbTr+eVtI9y5Cju2PP87RSy
qxzrPVPGRe/0pPrLEbD3WWdyd7KfHI9CZ0AjlPZXnhwX7vjyvtyn/TVGjvyd
pbLVi8h8Oe4Zps+et96d6i+H326toRnTab9VyDE35aFD2l/ab7Pl+Hpwbrdx
DfR5sVKOE9PP7162Zx3VX44PxtVb2vxp/y2SI5rP02ub5Ur1l+N2afFx4z/0
990qORKe3jupvEKfN9fKu553L4pGZNJ+3CiHyxbvU/EOK6n+cliX95+wQ9uZ
6i/HTX54mkU9h+ovh6lTy6I1Qxyp/l2//7P5Ax3EK6j+cigDraec/GhH9c/C
mKfV8iMuS6n+WUhzt3xrXryI6p+FW/fn5nfrvpDqn4XYaReOBGyxovpnQaVn
XxnQzYLqn4XZkpoNX+xnUv2zwO8cfV19cwrVPwuJk+eNCT83kuqfBRZ9/T+O
eFwY
            "]]},
          Annotation[#, "Charting`Private`Tag#1"]& ], 
         TagBox[
          {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
            NCache[
             Rational[1, 180], 0.005555555555555556]], AbsoluteThickness[2], 
           LineBox[CompressedData["
1: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
M+8mQtNohaGOfySdfyJsR8mPLnePoPOXYQnnpGCcI83DajLs7Du3ZjTC6Pxl
2B2yKnHPxFA6fxnUR32Z+LcnzctsGTKzrHlOT3h0/jJcdT2vMX1lEJ2/DP3r
OrQa6wPo/GVYq9j1evZCPzp/GTbNepRbsMWbzl+GmMp+blmXPOj8ZfDM2asb
esmNzl+GxcJbp2N6u9L5y1BxJydl/2MnOn8Z8pZd+5fTYkPnLwPr/774Mpy3
K3bdC6onAhku3kyPdzQiy2XYoAh60WMcOVOGoGGtCcUa5DwZXo6RrFrRk6yQ
4cVUpdOnb1QvimQY8VtNIHtNLpXhP5sLN7UfkMtk+Hhu/IyjVWSlDB2i+COm
Z8g1Mhy1/Dnz0kFybffv/2ZRJbaRG2SQ3dq5okJGbpbB7/jN+7P45FYZslZr
2xT6kNu6P/+tTcXD1pI7ZHAc6fkp1prMkqPtU23/ZjOymhwHIiz/Wkwmq8uR
23NFxdZRZE05gm+7L3jfj3k+Jsf3I60i099UvwzkGHifEy1k6iVHjpIE/tgq
5nmZqRyzzrb69bzFPD+Tg/sj19G8nGwlx9PXCfVBR5jnaXJYq2a9LNhJdpbj
lO+uiOpU5vmaHElrvOXvYsk+crzqyhncZzOZJ4f56PM9x7qS+XL4Fzq4GC0n
C+Rojb6iPs+CLJfD5vtaTcup5Ew5unYs81syhqn/cgytPt21YCBT/+WYPaPg
ukkX1dciOXYd+nRV/xO5VA6NHVEtQ56Sy+S4f6pzwo9bZKUcobEDIuvLyTVy
iF8b3z9yhKn/cqg2P5uesJOp/3Ic+uYoXpbK1P/ufFevXxkSy9R/OcYccHh7
z5+p/3L46bS+SlnP1H85XPieJfOXkVlJWDVPPv/THLJaEuIq/0vKmUxWT0Jo
nrbEeBRZMwm/R/PG1/Yls7vdPMXVo5Op/0nwnx6s97WVzEmCYwTCohrIpknY
W86f++saGUm4PugRL+ws2SoJnHftaq0HyXZJmLzbtsNxK9k5CcKL02ZekJK5
3Z8v6ObRUeFknyT8qzV0CfUg85IQYm8yo2oVmZ+EkT0PjVdn+hdBEl581Jzg
OIMsT4Lqmh96WbrM89juzz9UPvaaOjkvCVaVH1g//lE/okhC0sDhF8f8Ry5K
wqePt6znPWOe1yZhT13p1jW3yWVJyHhhtM23nHl+2/370MyxCDtMrumOj/oU
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
            "]]},
          Annotation[#, "Charting`Private`Tag#2"]& ], 
         TagBox[
          {RGBColor[0.560181, 0.691569, 0.194885], PointSize[
            NCache[
             Rational[1, 180], 0.005555555555555556]], AbsoluteThickness[2], 
           LineBox[CompressedData["
1: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
k7fQuSpMrRge4C/RFhWWJz0pajOdLlLhanpK3729aKsKXh0Gf6trT5eroJ5Q
a8GA58ynshgMDAs43e8MbR+DVy0CptdcR8tj0KfubOWWaNo5BmOcCgfV86QR
g9ur5DYjOtAeMVh8ZeNzt6q0IgbL2nVq3/gO864yBsaJ30r3HKClyvFdk/s0
MNMZMZjavPXoAfPprBi0sfvZ2XkAnVt5fS773j5rRFtiUIyGG/xeMj8XxeDl
51d9c07T1hh8zc/PP7SKLo/B+0LPhsmhtCwW2edWda3nRtvHInpjn7czWog8
Hgt5y469/N8zjzvHwmVc7IVeF0U+j0XfAwVRJ9bTHrHo9vP1F5tIWhGLyanG
mjajaWUsEgNMY/Jb0FIsbG/t8+nwjnk+IxbnCuoWe5yns2LhWhzWs9NqOjcW
bYylFfnBtCUWj2Mea74OpotiIZvzfeDLRrQ1FjkHi8OMT3k+KI/Fj2XLZv17
hJbFIW5qnZ5/G2n7ODzKKasTPJOWx6Fd8xOfDnShneNwr7D5q6yfPF8gDt2d
0q50LaI94lDtnXfIrCxaEcd8TivjmLdpKY75mc6IYx7meSUrjvmWzo1jXqUt
ccyfdFEc86Q478QxH/K8Ux7HvCfOP/HMb7R9PPMYLY9nvqKd45mXeF5CPPMP
7RHPPEMr4plPaGU88wbPV1I88wOdEc88QGfFc3+nc+O5X9OWeO6/PJ8VxXM/
pa3x3B/p8njud7QsgfsXz3P2CdyPaHkC9xfaOYH7BY0E1v8szj+B9ZxWJLA+
08oE1ltaSmD95PkxI4H1cB3nn8D6RucmsF6t5fwTWH/oogTWE54/rQmsD6s5
/wS+77Qske/vKs4/ke8jz6vyRL5ftHMi35dMzj+Rz/8Kzj+RzzOtSOTzyfOu
MpHP25+cfyKfn2WcfyKfh6WcfyLXl+fj3ESu12LOP5H3P4PzT+T9XMT5J/L+
mDl/MV8D55/E69dx/km8Hg3nn8Tvlzh/8flozj8Jsv/755EEO62dIfcV64Ui
CTYP6uy9Y6WVSaiIiexjc52WkhDy9b8GLc/TGUm43MfR1TVf/J6RhPJTs9eP
3k3nJqGeoVO/yVm0JQlHo/OrTF1KFyXhc5VuZZO1tDUJ889mPhwTI+pfEuY6
3i3rGyjqn4R+awtftppF20roeK3ho6oTRD2U4LV+xOm7w2hHCfoHxYm5fUR9
lLDjU0O7+A60k4TGw3vMQHNRLyXEHBq+4Hs92kWC26j+zffb0JBQpnsSMbuC
9c9NQnfbtwrbMlFPJYQ9eXZ92y3aW8LlAb3PDLos6quEp2ubtio6SftK+Cch
/773PlFvJXTeVffDzc20SsLwY689J64Q9VeCv9Ku7EwarZdg3/LNji7xoh5L
eCb/bsoIpjMlFDYPlZ4r6CwJ4xN9ovtPpLMl1Di2Z652OJ0rYX5+2z4Ffeg8
Ce+aeD2s0kH8PlX5ef2eqT2a0QUSDtcKMc4Q+0GRhGqjtvslyOgSCXWvDHv8
51tR3yXMGP/l9ZZHdJmE8psTo3ffoMsl9G2xK3hXAf1Jwqplnc9uzKdlauj2
XfXP2EXbquHYSOEeuY62V+POhqA5nhm0oxqP9k5f2iaZlqtxv7XX1dfhtJMa
TVRedrnzaWc1et5v7uzrRbuoscOjZ5fGo2iosTnh5btjfWm3ys8/8QmZ2on2
UOPsRb/0l81pbzWk1rkDo+rRisrrX5QZ9EFG+6rxasBY26C33K+UatQuOvj1
5kNapYZbL6nngGJaUuNq0q/rl5+j9WrM2Le2/ZPDdIYai7Tfj3TcTmeqcatj
8eCFq+gsNbb/SNyRaaSz1TD1qVt6Mp7OVaPHknEX7wTReWp8eHF8yhsf2lJ5
P24uC/7oTheoEd/z6Nf3oIvUMK4tfPq0G12iht0n+2ZFrWirGgk3NerdDeky
NcreXJZJ1cR+r4Z+5sDkkRXcfz+pcaHmtVdVn9CyZLR62qnjQbGf2yZD3Xll
y+nnaftkPNBXz6s4TDsm43C/qsWabPF7aTLyep7xsV1JO1W2N27ST0qjnZNR
3TXE/WUM7ZKM74a/pbH+Ij8kAwn/7s+aRrslo81ly6Wy0SJPJOPOiMl72vSj
vZNxLeq/gZM6inyRjNzRap/oprRvMpI2JJSb7UTeSMaUi89urPjKvKBKxrty
j3fLXoj8kYwd0afbpd6m9cn4b8B1T99CkUeS8eban5MGHqUzk+GxdEXdGjtF
PknGmr0PfP5aRWcnY6LTx9ZKg8gryaj9Z0E/+1g6Lxnrv+anbPQT+SWZv2fQ
BcmYuiPXYa0bXZSMnVGLmlR3oUuSYecw6JhPe9qajOkxLW9ud6DLkjFkzrtR
T6rT5ZXfP6/gacMK5p1PyehW8Iux+yORf1IQ7jbXbojIT7YpyNl3Z9CQv2j7
FGTOOvyj+17aMQWPdarmjbJoeQqqht1XPk6nnVKgjX5+aWsC7ZyCzdbj1bwD
aZcU1F627/mnaTRSMHrlCI+0UbRbCl4ENPmlpgvtkQLv5k9uR7ejvVMwd2hC
VnEj8Xt8pfeeaNmqKu2bAuPnJZ1m/sd8pkxBxwOPTNpSWpUCd8PKOusui9/v
U9CyilG16Sitr7yeqknLl2+nM1Lg01beNXoFnZmCKRsrbIen0lkpKKw9/dnP
MDo7Bav3Ri/bpqBzUzAtu9flfuPpvBRcMLtMPtaPtlR+/6N/Xjr9QRekYKdD
lYlqB7ooBb83njz8bFW6JAXpmRVJ78uZH62V9/uW+Xjde3RZCppXG3q4YSFd
noLrNbLbVM2jP6VgZa29R+9spmUanBy51TlrMW2rwfQAh97jEml7DWrOKIh/
6E87anAhcNf+OV60XAObN5d0F4fSThokNRu4+Tdn2lmDMI86+yY0o1006K3t
6h1mS0MDfft7UW/LmH/dNFjSYe+3yxbaQ4Mm38clR2XS3hqMM80c+iKEVmgw
ul9GVMeRtK8GDScox/VuQSs1uDOu+/taFczPKg2Wv0tenF1ISxoEV504ou5G
Wl85vl9W534qOkOD1uf6z+gyns7UwNx6sfVJa5HPNZD2+Pw19zPzd7YGa0bG
22z+m87VQLstY9XWTXSeBsNtLsT7q0R+16DkknHp67F0gQa+ce1PdWsp8rwG
V1/Fl3avYJ4v0eD9kC0nywtEvtfAeGbJH/5r6DINfizfdXttCF2ugf21eQbD
EPpT5fWuLyjt8istS8XT9zXj0p7yPGCbitcRNuWZR2j7VIz6knNuupF2TIX9
sE2xRTNoeSp6d42MrehMO6Xiwu0W7S/84HnCORWo6/XPqCu0Syqc6pT+FSnO
G0jF5z/O/jEmhHZLRU/71R0LBtIeqQixrrv1vA7tXXm91W703nuH5xFFKoYv
cezcZCftm4pbz+yWy2NoZSruO9v1OjuCVqXihN23Q9Ua0VIq8znPM/pU5m06
I5X5mc5MZR6ms1KZb+nsVOZVnn9yU5k/6bxU5knaksp8SBekMu/RRanMbzw/
laQyj9HWVOYruiyVeYkuT2X+4XnrUyrzDC3TMp/QtlrmDdpey/zA85mjlnmA
lmu5v9NOWu7XtLOW+y/Pcy5a7qc0tNwfaTct9zvaQ8v9i+c/by33I1qh5f5C
+2q5X9BKLes/z4sqLes5LWlZn2m9lvWWztCyfvJ8mallPaSztKxvdLaW9Yrn
z1wt608611/LekJbtKwPPJ8WaPm+m7j+Wr6/dImW76OR66/l+8XzbJmW7wtd
ruXzz39P/qTl86zn+uv4fPL8a6vj86bl+uv4/KRy/XV8HsT5WMf1TeH667he
yVx/He+/muuv4/3keRo63p9Err+O843n+ut4/TFcf3E9kVx/8f2hXH/xeT+u
vw6y//un0mGPbpvusD3rn6RD1N6B0SNsaL0OF94cL7/8jvUso/J69+nLxj2m
M3Xw6vxowrkbdJYO7x5/aN2ngM7WIWBEgXuWqJ+5Olx0wsUqO+m8yvY57XTT
19AWHa6MbRW720wX6NBnbP7yj4l0kQ5vJk4sclXSJTp4+Dr/FjGbtuowskXY
wq0T6DIdJEeHnUVDxe89OnxVf/j3bU/6kw7NtBestduJ33/0aHhOnteisaj/
eqwp9PVwshX1X49yVdnqPz6z/jrq8TbSYmr1nJbrEbzqeaOGt2knPfwmu7b7
Wijqvx7z63vtu3VM1H89Fv15dsfe3aL+65E/965MWifqvx6ODS9vGb5I1H89
Nm7LNNhIov7rUe+JY9YhJa3Qw23zlxuzZ9O+eoxxOPF7tQm0Uo8pjQ/5rx1C
q/QYH1Iju3MPWqr8fKPs8wda03o92vj6HOneiM7Q40WoJXBbNTpTj34Ne1xt
UMH9I0uP/q7PiiMe09l6DKv50O9yMZ2rxyvbV3HNztF5eiwZvP7L7EO0RY9q
s2ZcX7uVLqi8Xxc8Pl5ZThfp8fFIqOcnLV2ix9+j44scosX/n0QPV/X72R0X
0mV6HJ3Q5l0vL7pcj9DNv4X2Hkl/0qNg2I6CTn1oWRqGlvo+cWxP26Zh5PPd
h7440PZpWJ++uO21X2jHNOToX7RY/4H7nTwN9apOSJ/9hHZKw0J/x1lNbtDO
aVD0HR9/7iztkobA08eLfA+K3w8rx3/2fIRsC+2WhvM3618wLaM90tDjWNvB
dTW0dxrgfSVTE04r0uBwMODImzm0bxou7allcp9AK9PwR1rQ502DaVUaIvyr
P3/pTEtpqHb/v+Ed5GL/T8Noj5/vp4v9PKPy+6dtuaf+wf04Mw0n+ld/vvoV
nZWGu+3Kvm+/Q2enYbp0XLarUOz/aQh2WlmyIV/s/5XXk90twLhd7P9pmDr1
3lrfTLH/p6Gv+s/Jrjqx/6fhkM/zqO+RdEka8jraPTkwj7amoVf9k9pZE+my
NCTUmdf/+2C6PA3el14+MzvTn9KQrrwXWv93WmbA8PHjD+nq0LYG/PNnaWb5
V+YHewP8Xlu+jHlOOxrgINtxbGUJLTdg08uSEzfP0U4GpB+qd9/uIO1swLE/
F9s4b6JdDGjoKrcZsZiGAZHvPx0fl0S7GTD/1tWGI4NoDwNWWW5Yu02nvQ24
2mVrlbqjaIUBDfqMn3C7N+1rwNreo3JWthG/NxuwOzG23K0BrTKg96MO78p+
it+fDcjpVT0j5hWtN0C2vEHWl1t0hgHLjh76GlBAZxpgarAr9vJBOsuAr5af
71psorMN+M1UZ6Aig841YMjauC6LE+g8A4La9l6115+2GFD7nv/kU150gQGF
8zU9LMPoIgPeRLetkSPyWEll+7fWGw0taKsBN/9LKZ5sR5cZcL59WGi9T8xf
5Qa8vT5w+OFH9KfK+/vF6/dxV2mZEftWDr1cdJy2NWLNkZVNh+yg7Y3Y0OdH
cdZykf+MGDXvt/Mvk0X+M+LnwuV5bUNE/jOiTXCD8DHTRf4z4v3S30/MHEm7
GLE900UxowcNI3qPzW8x8nfazYijR24fb25HexhRWGurzPqBedDbiLnyl9nm
B7TCCNd7g6Pb/U37GuHQ9l2HHUdopRFK1Re14xZaZYRxzEeX0AxaMqLh29Z2
B+JovRFlXcfssy6gMyqvd+7xJx886Uwjho0cPutDf/HvE0bEDm529V57OtuI
HkPvvdnTgM414mWHhCC/78yjeUYEZ/f4UquMthjx56roYcuu0QVGSNYXn6od
p4uMGLLC868Z2+gSI1YfU41avZi2GvG2i3MvSxxdVnl9Nr06FM6ny41o3rJl
4VF3+pMRC52n5i12pWUmfN/5edHY1rStCYndTr96UZu2N6Hv6+oBIR+Yhx1N
aN7GtO6GyNNyE+yOpDRreYF2MsHm9IKo8ftoZxP22Dzs67OadjHhRX9LhbuG
hgl355zt2jqIdjOhYfSa4H8n0x4mPG52sGfgQNrbhJon2la5345WmPDG2eje
qx7ta8KDgicrfD8yjytN8DocOz62lFaZ8HHT5od+52nJhEazDp3uvYfWm9Am
49IU63I6w4TQQZtkCxJF/jehtLGv/Px8kf9NKO5rsK86TuR/E3QJunZNetK5
JoQ8PLTPtimdZ4Khnb3sahXaYsLVHtZtD4p4XigwobrP/ttX19JFJgw7vaBu
sD9dYkL0kipbD/YW/75lwrf6zl+32tBlJizdtMUbf/N8UV45/+GRX5JW0p9M
eH1zVp1582iZGZ5hjXOed6FtzWh1Kqqs/meeR+zNGH5p56F//6Idzbhwa5Ks
r4mWm7EuNX1l78m0kxlHD/43uLA57WxGeX9pU8Vjnl9czDAvS/Tcv5uGGfZO
ruerRNJuZpQu3L/gXj/aw8x8Tnubmbd5/lGYmZ9pXzPzMK00M9/SKjPzKs9H
kpn5k9abmSfpDDPzIZ1pZt7jeSrLzPxGZ5uZx+hcM/MVnWdmXuL5y2Jm/qEL
zMwzdJGZ+YQuMTNv8LxmNTM/0GVm5gG63Mz9nf5k5n7N850snfsvbZvO/VSc
/9K5P4rzXzr3O1qezv2LdkrnfkQ7p3N/4XnRJZ37BY101n/aLZ31nOdJj3TW
Z9o7nfWWVqSzfvK86ZvOekgr01nfaFU66xXPo1I66w+tT2c9oTPSWR94Xs1M
5/tOZ6Xz/U3i+qfzfaRz0/l+8Xybl873JYHrn87nn+fdgnQ+z3Fc/3Q+n7Fc
/3Q+bzwPW9P5/Ki4/ul8Hvjv0+VifaO4/mK9eH6WLeL9j+D6L+L9DOP6L+L9
4fnacRHnG8L1X8TrD+T6L+L1+HL9xffP4/qLz8/g+i+CjH//DxeAnfM=
            "]]},
          Annotation[#, "Charting`Private`Tag#3"]& ]},
        {"WolframDynamicHighlight", <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
       StyleBox[
        DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
          Slot["HighlightElements"], 
          Slot["LayoutOptions"], 
          Slot["Meta"], 
          Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 180]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1: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
51sn0L7GT4Cept6Qv09ldP8E9Or+MsnDhqxMwDPbn7JNh2ifK0rASm15fV8t
Zr9LQIvLoeMOgZl0/wQsen84yugms+8lYKmFfHn+dLI6AbOkj6cez0qn+yfi
Ycn813Zq2gd1EvHRvNggikNmJ2Lh73ULphal0f0TsfmrKtFPm4xE/HoV3WgY
QvsjJxFpd0e/8b0hovsnYix/24wxU8i8RNy5Or3KMY32S34i4i3a7d6/ENL9
E/F+AmfStwVkZSIUQUcsvXfT/lmUiJnjc1qnf02h+ydi1jLr3hwOuTERda33
66oKaT9tTkReTWtpVDeyOhF7Dt9vbixNovsnIdFMHTvCK5Hun4TYEQ8kpdq0
z7KTsKDQ8bHgXBzdPwmyL9KVAV6xdP8kXF/yyG55H9p3OUkoNwn9pHFyM90/
CV8K7KN8nKLo/kmI3HmpcclH2of5SShx4G4MlYfT/ZPgeNfuTp5hGN0/CQ83
Ww0bmBxK909ChCLRbO/BILp/EvYUPV/Z7bI/3T8J81OiivXub6L7J8F6VdRL
rxdedP8kVP+27nzRzKX7J6N7XgsveI8b3T8Z0Qlq9i2OC90/GWt2l074N9ue
7p8MmNvX7C9fQPdPBut/vzjJKHm+dGKFFvN+TTJW504sqv1C/YWXDK304d11
m5j3b7p+fsM7a+45siK56/9vPf/DuWRlMvKM+ka9TSIXJcPEbKankQdZlYyK
pR+NAmzIjckojd1768AEcnMyrldkrXjUm+l/yeh1ue8unTfUr1h8+LauKrO+
Qdbko1v/A3tCT5B1+CgWTF6xS0HW5wNv+124GM70Rz4GjAz+8GoV2bDrnMV9
1GsO0y/58Iz7xB8/jGzOR+hiw/tWP6nfgY+QOz+bXR6Tbfnwn7Nxm38VmcNH
rXr2h9h9ZFc+LJ54tYuFTH/l4/HAsxkKH7Jfl4tYl3YsZfotH7GNP/7JmUyO
4WOF84bP2X2Z/tv1+lX/Pt/WTv1Uwkf6xL9usgaygo9PH6LWCYrJ2XxkVV66
H7GV6c98ZMP/jkcUuaDr9Q96ZLtiDdOv+XidKTaeaUEu58M092qq7gimf/MR
lvfJ5usv6se1fHyY7uh3+wnTz/lw/qvffkRFbuJDXZh8Mzmf6e98eKce6uGU
Sm7lY3TYAZnBJqbf8zGtSOjVupTc2XWfE9YpJyYz/T8Fv+/WP+P1JWum4IPb
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
f/Ndk1yQDh9X4zcz39C8VZSOpF5nBf515PJ0/PC0O77rGFnV9fqu/+t5VUau
TYfzwNm5H0LIjenYMcrceTCH3JSO1WmZiTNMmfkvHSNN6nTtBzHzX1e9HsTp
en2meU2djj8XekVFMvNeZzqOj7o0JeU0M/9loEf9W+P0Hcz8l4FVdfsTpNHM
/JeBwxc6NDNdmfkvA/tF9TdSLZi/l8pARFkvVexwsmEGtrJdH/j/ZOa/DHgu
8xzs8oiZ/7q+/22B59xKMjIQ6LW1amQe2TYDG6YFjfmeROZkYIsjN7nRneya
gbirSY35YN5fz8DDj2f68saQ/TLQ9v7RJPNuzPvtGeB02zvi53OaJ2My0PFe
/rj8EvP+ewZsHUZ6hx0gSzIw4sW2g+NFZEUGil+Py77tQ87OwM/Vt0zjl5CV
GbhtkuJnMIlc0JW//JNpRW9yUQbCi6qEq1ppHi3PwLgMt5Wva8mqDMRnD9oR
WUiuzcCA2VrWv9LJjRnIfW1plxRAbspAbXTs/h/LyM0ZYPcLWhQ2ldyaAYeZ
cvbzvmR1Bka9m25k/47m2c6u7z8Y6lZyg8zKxL5ZNvkDj5M1M3G4NqgjQEbW
ycSx+qTFF4LJ+pm4evu+pK8DmZ2JNy5Hi52nkw0z8WzXu5KtA8gmmSj290iu
f0/zsHkmftfu0OreQEYmeh9/ZmN6kmybide7N7DXZpE5mUha8lYRF0p27co/
1DhtuyOZm4n2o1kdhcZkv65z11nXz2iTeZkYmtL9+4UPNF/HZEKrUxlW1cD8
/V4m4pYFjT97kizJxKSfSRrHssiKTPidPNK5M5ScnYmDy6O/JziSlZm4/Yf9
eZ0xuSATVvN2/GeqTS7KxLXFb/W7P6H5vTwTd/L1Bm3bQ1Zl4u3yfJ7uBnJt
Jqpu1WtnjGTm/0ycq55+/f1Dmu+buu5zKDd20W5m/s+Eomb2t4x1zPzf5etr
R1QPI6szMVFvd2VbEzP/Z4L/s7pUI5vMkqJbfs1drTVkTSksLl/s1NBlPg+S
IsdA/b7tP9oP9KWoVx6SXtzKfD4kxew1Kw5InMmGUnzVWtl7wUCyiRQXZMbi
lw20T5hLYVntpI6RkyHFTYuRQ36tINtKoS1+eCG4L5kjRY/xlRU3r9G+4SrF
r241TSMkZK4UocraR2uWkP2keFuy7p+UHmSeFLUbrldmV9M+EiPF/ZZBhnv4
ZL4UTS2N2+RWZIkUre/Mrgb9ov1E0fX6pD/5c86Rs6UY3uAieB9NVkqh+v4y
/R8zcoEUTw4dWsX+TPtLkRTNBi17dhWRy6WY+mbqaFYIWSVFmcxIwZlKru26
n3fZocxW2ncapdibkadbfJDcJIW66tg/Kk9ysxSrFoqvnh1Nbu16fQk7fXIf
0T6k7sqf8EvXL4fcKcWHcX6pI1eTWTKYv9JadXYQWVMGpXb4ZCtmf9KRYWhs
5MEjmWR9GSLDtTb9WUpmy9Dw3KiXRQ+yoQwxm86PWqeifcpEhgnL7a09Esjm
Mry20u7mYE6GDHuF2e2jO2jfspXBOfKC7O5JMkeGA+N9/MICya4yyB6v+Pth
Ipkrw5eZjxqcntM+5ifD/NAW5x17yDwZfrYH/6pwJcfIcHS659wrg8l8Gaz1
18aeqKd9TSLD/cE2w2PSyQoZ5iQMSxiziJwtw6jS/u0rf9M+p5TBoEDn9Jhw
coEMlx21Xx5pof2uSIa19+//aV9HLu86VzjEtdUHU/1luLJizbndC8m1Mphd
aNTpXkb7YKMMgyzXVoyaTG6SYeniHq/bdtN+2Nz1+7j+4YDPAHJr1+uPPPNJ
zqd9US2DyLD6lNcn2hc7Zaj96130zIvMkoOdfHdrrzu0P2rKMen127aGxWQd
OQq35YycW+ZL9Zejed70sMUTyWw5FsYu6PluO+2bhnKMjp5XN7Un2USOgqM5
Yo1I2j/N5dAdKL7q/5z2T8jxeIteC5dDtpXD9mbTr+eVtI9y5Cju2PP87RSy
qxzrPVPGRe/0pPrLEbD3WWdyd7KfHI9CZ0AjlPZXnhwX7vjyvtyn/TVGjvyd
pbLVi8h8Oe4Zps+et96d6i+H326toRnTab9VyDE35aFD2l/ab7Pl+Hpwbrdx
DfR5sVKOE9PP7162Zx3VX44PxtVb2vxp/y2SI5rP02ub5Ur1l+N2afFx4z/0
990qORKe3jupvEKfN9fKu553L4pGZNJ+3CiHyxbvU/EOK6n+cliX95+wQ9uZ
6i/HTX54mkU9h+ovh6lTy6I1Qxyp/l2//7P5Ax3EK6j+cigDraec/GhH9c/C
mKfV8iMuS6n+WUhzt3xrXryI6p+FW/fn5nfrvpDqn4XYaReOBGyxovpnQaVn
XxnQzYLqn4XZkpoNX+xnUv2zwO8cfV19cwrVPwuJk+eNCT83kuqfBRZ9/T+O
eFwY
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 180]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1: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
M+8mQtNohaGOfySdfyJsR8mPLnePoPOXYQnnpGCcI83DajLs7Du3ZjTC6Pxl
2B2yKnHPxFA6fxnUR32Z+LcnzctsGTKzrHlOT3h0/jJcdT2vMX1lEJ2/DP3r
OrQa6wPo/GVYq9j1evZCPzp/GTbNepRbsMWbzl+GmMp+blmXPOj8ZfDM2asb
esmNzl+GxcJbp2N6u9L5y1BxJydl/2MnOn8Z8pZd+5fTYkPnLwPr/774Mpy3
K3bdC6onAhku3kyPdzQiy2XYoAh60WMcOVOGoGGtCcUa5DwZXo6RrFrRk6yQ
4cVUpdOnb1QvimQY8VtNIHtNLpXhP5sLN7UfkMtk+Hhu/IyjVWSlDB2i+COm
Z8g1Mhy1/Dnz0kFybffv/2ZRJbaRG2SQ3dq5okJGbpbB7/jN+7P45FYZslZr
2xT6kNu6P/+tTcXD1pI7ZHAc6fkp1prMkqPtU23/ZjOymhwHIiz/Wkwmq8uR
23NFxdZRZE05gm+7L3jfj3k+Jsf3I60i099UvwzkGHifEy1k6iVHjpIE/tgq
5nmZqRyzzrb69bzFPD+Tg/sj19G8nGwlx9PXCfVBR5jnaXJYq2a9LNhJdpbj
lO+uiOpU5vmaHElrvOXvYsk+crzqyhncZzOZJ4f56PM9x7qS+XL4Fzq4GC0n
C+Rojb6iPs+CLJfD5vtaTcup5Ew5unYs81syhqn/cgytPt21YCBT/+WYPaPg
ukkX1dciOXYd+nRV/xO5VA6NHVEtQ56Sy+S4f6pzwo9bZKUcobEDIuvLyTVy
iF8b3z9yhKn/cqg2P5uesJOp/3Ic+uYoXpbK1P/ufFevXxkSy9R/OcYccHh7
z5+p/3L46bS+SlnP1H85XPieJfOXkVlJWDVPPv/THLJaEuIq/0vKmUxWT0Jo
nrbEeBRZMwm/R/PG1/Yls7vdPMXVo5Op/0nwnx6s97WVzEmCYwTCohrIpknY
W86f++saGUm4PugRL+ws2SoJnHftaq0HyXZJmLzbtsNxK9k5CcKL02ZekJK5
3Z8v6ObRUeFknyT8qzV0CfUg85IQYm8yo2oVmZ+EkT0PjVdn+hdBEl581Jzg
OIMsT4Lqmh96WbrM89juzz9UPvaaOjkvCVaVH1g//lE/okhC0sDhF8f8Ry5K
wqePt6znPWOe1yZhT13p1jW3yWVJyHhhtM23nHl+2/370MyxCDtMrumOj/oU
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
                "]]}, "Charting`Private`Tag#2"], 
             Annotation[{
               Hue[0.1421359549995791, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 180]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1: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
k7fQuSpMrRge4C/RFhWWJz0pajOdLlLhanpK3729aKsKXh0Gf6trT5eroJ5Q
a8GA58ynshgMDAs43e8MbR+DVy0CptdcR8tj0KfubOWWaNo5BmOcCgfV86QR
g9ur5DYjOtAeMVh8ZeNzt6q0IgbL2nVq3/gO864yBsaJ30r3HKClyvFdk/s0
MNMZMZjavPXoAfPprBi0sfvZ2XkAnVt5fS773j5rRFtiUIyGG/xeMj8XxeDl
51d9c07T1hh8zc/PP7SKLo/B+0LPhsmhtCwW2edWda3nRtvHInpjn7czWog8
Hgt5y469/N8zjzvHwmVc7IVeF0U+j0XfAwVRJ9bTHrHo9vP1F5tIWhGLyanG
mjajaWUsEgNMY/Jb0FIsbG/t8+nwjnk+IxbnCuoWe5yns2LhWhzWs9NqOjcW
bYylFfnBtCUWj2Mea74OpotiIZvzfeDLRrQ1FjkHi8OMT3k+KI/Fj2XLZv17
hJbFIW5qnZ5/G2n7ODzKKasTPJOWx6Fd8xOfDnShneNwr7D5q6yfPF8gDt2d
0q50LaI94lDtnXfIrCxaEcd8TivjmLdpKY75mc6IYx7meSUrjvmWzo1jXqUt
ccyfdFEc86Q478QxH/K8Ux7HvCfOP/HMb7R9PPMYLY9nvqKd45mXeF5CPPMP
7RHPPEMr4plPaGU88wbPV1I88wOdEc88QGfFc3+nc+O5X9OWeO6/PJ8VxXM/
pa3x3B/p8njud7QsgfsXz3P2CdyPaHkC9xfaOYH7BY0E1v8szj+B9ZxWJLA+
08oE1ltaSmD95PkxI4H1cB3nn8D6RucmsF6t5fwTWH/oogTWE54/rQmsD6s5
/wS+77Qske/vKs4/ke8jz6vyRL5ftHMi35dMzj+Rz/8Kzj+RzzOtSOTzyfOu
MpHP25+cfyKfn2WcfyKfh6WcfyLXl+fj3ESu12LOP5H3P4PzT+T9XMT5J/L+
mDl/MV8D55/E69dx/km8Hg3nn8Tvlzh/8flozj8Jsv/755EEO62dIfcV64Ui
CTYP6uy9Y6WVSaiIiexjc52WkhDy9b8GLc/TGUm43MfR1TVf/J6RhPJTs9eP
3k3nJqGeoVO/yVm0JQlHo/OrTF1KFyXhc5VuZZO1tDUJ889mPhwTI+pfEuY6
3i3rGyjqn4R+awtftppF20roeK3ho6oTRD2U4LV+xOm7w2hHCfoHxYm5fUR9
lLDjU0O7+A60k4TGw3vMQHNRLyXEHBq+4Hs92kWC26j+zffb0JBQpnsSMbuC
9c9NQnfbtwrbMlFPJYQ9eXZ92y3aW8LlAb3PDLos6quEp2ubtio6SftK+Cch
/773PlFvJXTeVffDzc20SsLwY689J64Q9VeCv9Ku7EwarZdg3/LNji7xoh5L
eCb/bsoIpjMlFDYPlZ4r6CwJ4xN9ovtPpLMl1Di2Z652OJ0rYX5+2z4Ffeg8
Ce+aeD2s0kH8PlX5ef2eqT2a0QUSDtcKMc4Q+0GRhGqjtvslyOgSCXWvDHv8
51tR3yXMGP/l9ZZHdJmE8psTo3ffoMsl9G2xK3hXAf1Jwqplnc9uzKdlauj2
XfXP2EXbquHYSOEeuY62V+POhqA5nhm0oxqP9k5f2iaZlqtxv7XX1dfhtJMa
TVRedrnzaWc1et5v7uzrRbuoscOjZ5fGo2iosTnh5btjfWm3ys8/8QmZ2on2
UOPsRb/0l81pbzWk1rkDo+rRisrrX5QZ9EFG+6rxasBY26C33K+UatQuOvj1
5kNapYZbL6nngGJaUuNq0q/rl5+j9WrM2Le2/ZPDdIYai7Tfj3TcTmeqcatj
8eCFq+gsNbb/SNyRaaSz1TD1qVt6Mp7OVaPHknEX7wTReWp8eHF8yhsf2lJ5
P24uC/7oTheoEd/z6Nf3oIvUMK4tfPq0G12iht0n+2ZFrWirGgk3NerdDeky
NcreXJZJ1cR+r4Z+5sDkkRXcfz+pcaHmtVdVn9CyZLR62qnjQbGf2yZD3Xll
y+nnaftkPNBXz6s4TDsm43C/qsWabPF7aTLyep7xsV1JO1W2N27ST0qjnZNR
3TXE/WUM7ZKM74a/pbH+Ij8kAwn/7s+aRrslo81ly6Wy0SJPJOPOiMl72vSj
vZNxLeq/gZM6inyRjNzRap/oprRvMpI2JJSb7UTeSMaUi89urPjKvKBKxrty
j3fLXoj8kYwd0afbpd6m9cn4b8B1T99CkUeS8eban5MGHqUzk+GxdEXdGjtF
PknGmr0PfP5aRWcnY6LTx9ZKg8gryaj9Z0E/+1g6Lxnrv+anbPQT+SWZv2fQ
BcmYuiPXYa0bXZSMnVGLmlR3oUuSYecw6JhPe9qajOkxLW9ud6DLkjFkzrtR
T6rT5ZXfP6/gacMK5p1PyehW8Iux+yORf1IQ7jbXbojIT7YpyNl3Z9CQv2j7
FGTOOvyj+17aMQWPdarmjbJoeQqqht1XPk6nnVKgjX5+aWsC7ZyCzdbj1bwD
aZcU1F627/mnaTRSMHrlCI+0UbRbCl4ENPmlpgvtkQLv5k9uR7ejvVMwd2hC
VnEj8Xt8pfeeaNmqKu2bAuPnJZ1m/sd8pkxBxwOPTNpSWpUCd8PKOusui9/v
U9CyilG16Sitr7yeqknLl2+nM1Lg01beNXoFnZmCKRsrbIen0lkpKKw9/dnP
MDo7Bav3Ri/bpqBzUzAtu9flfuPpvBRcMLtMPtaPtlR+/6N/Xjr9QRekYKdD
lYlqB7ooBb83njz8bFW6JAXpmRVJ78uZH62V9/uW+Xjde3RZCppXG3q4YSFd
noLrNbLbVM2jP6VgZa29R+9spmUanBy51TlrMW2rwfQAh97jEml7DWrOKIh/
6E87anAhcNf+OV60XAObN5d0F4fSThokNRu4+Tdn2lmDMI86+yY0o1006K3t
6h1mS0MDfft7UW/LmH/dNFjSYe+3yxbaQ4Mm38clR2XS3hqMM80c+iKEVmgw
ul9GVMeRtK8GDScox/VuQSs1uDOu+/taFczPKg2Wv0tenF1ISxoEV504ou5G
Wl85vl9W534qOkOD1uf6z+gyns7UwNx6sfVJa5HPNZD2+Pw19zPzd7YGa0bG
22z+m87VQLstY9XWTXSeBsNtLsT7q0R+16DkknHp67F0gQa+ce1PdWsp8rwG
V1/Fl3avYJ4v0eD9kC0nywtEvtfAeGbJH/5r6DINfizfdXttCF2ugf21eQbD
EPpT5fWuLyjt8istS8XT9zXj0p7yPGCbitcRNuWZR2j7VIz6knNuupF2TIX9
sE2xRTNoeSp6d42MrehMO6Xiwu0W7S/84HnCORWo6/XPqCu0Syqc6pT+FSnO
G0jF5z/O/jEmhHZLRU/71R0LBtIeqQixrrv1vA7tXXm91W703nuH5xFFKoYv
cezcZCftm4pbz+yWy2NoZSruO9v1OjuCVqXihN23Q9Ua0VIq8znPM/pU5m06
I5X5mc5MZR6ms1KZb+nsVOZVnn9yU5k/6bxU5knaksp8SBekMu/RRanMbzw/
laQyj9HWVOYruiyVeYkuT2X+4XnrUyrzDC3TMp/QtlrmDdpey/zA85mjlnmA
lmu5v9NOWu7XtLOW+y/Pcy5a7qc0tNwfaTct9zvaQ8v9i+c/by33I1qh5f5C
+2q5X9BKLes/z4sqLes5LWlZn2m9lvWWztCyfvJ8mallPaSztKxvdLaW9Yrn
z1wt608611/LekJbtKwPPJ8WaPm+m7j+Wr6/dImW76OR66/l+8XzbJmW7wtd
ruXzz39P/qTl86zn+uv4fPL8a6vj86bl+uv4/KRy/XV8HsT5WMf1TeH667he
yVx/He+/muuv4/3keRo63p9Err+O843n+ut4/TFcf3E9kVx/8f2hXH/xeT+u
vw6y//un0mGPbpvusD3rn6RD1N6B0SNsaL0OF94cL7/8jvUso/J69+nLxj2m
M3Xw6vxowrkbdJYO7x5/aN2ngM7WIWBEgXuWqJ+5Olx0wsUqO+m8yvY57XTT
19AWHa6MbRW720wX6NBnbP7yj4l0kQ5vJk4sclXSJTp4+Dr/FjGbtuowskXY
wq0T6DIdJEeHnUVDxe89OnxVf/j3bU/6kw7NtBestduJ33/0aHhOnteisaj/
eqwp9PVwshX1X49yVdnqPz6z/jrq8TbSYmr1nJbrEbzqeaOGt2knPfwmu7b7
Wijqvx7z63vtu3VM1H89Fv15dsfe3aL+65E/965MWifqvx6ODS9vGb5I1H89
Nm7LNNhIov7rUe+JY9YhJa3Qw23zlxuzZ9O+eoxxOPF7tQm0Uo8pjQ/5rx1C
q/QYH1Iju3MPWqr8fKPs8wda03o92vj6HOneiM7Q40WoJXBbNTpTj34Ne1xt
UMH9I0uP/q7PiiMe09l6DKv50O9yMZ2rxyvbV3HNztF5eiwZvP7L7EO0RY9q
s2ZcX7uVLqi8Xxc8Pl5ZThfp8fFIqOcnLV2ix9+j44scosX/n0QPV/X72R0X
0mV6HJ3Q5l0vL7pcj9DNv4X2Hkl/0qNg2I6CTn1oWRqGlvo+cWxP26Zh5PPd
h7440PZpWJ++uO21X2jHNOToX7RY/4H7nTwN9apOSJ/9hHZKw0J/x1lNbtDO
aVD0HR9/7iztkobA08eLfA+K3w8rx3/2fIRsC+2WhvM3618wLaM90tDjWNvB
dTW0dxrgfSVTE04r0uBwMODImzm0bxou7allcp9AK9PwR1rQ502DaVUaIvyr
P3/pTEtpqHb/v+Ed5GL/T8Noj5/vp4v9PKPy+6dtuaf+wf04Mw0n+ld/vvoV
nZWGu+3Kvm+/Q2enYbp0XLarUOz/aQh2WlmyIV/s/5XXk90twLhd7P9pmDr1
3lrfTLH/p6Gv+s/Jrjqx/6fhkM/zqO+RdEka8jraPTkwj7amoVf9k9pZE+my
NCTUmdf/+2C6PA3el14+MzvTn9KQrrwXWv93WmbA8PHjD+nq0LYG/PNnaWb5
V+YHewP8Xlu+jHlOOxrgINtxbGUJLTdg08uSEzfP0U4GpB+qd9/uIO1swLE/
F9s4b6JdDGjoKrcZsZiGAZHvPx0fl0S7GTD/1tWGI4NoDwNWWW5Yu02nvQ24
2mVrlbqjaIUBDfqMn3C7N+1rwNreo3JWthG/NxuwOzG23K0BrTKg96MO78p+
it+fDcjpVT0j5hWtN0C2vEHWl1t0hgHLjh76GlBAZxpgarAr9vJBOsuAr5af
71psorMN+M1UZ6Aig841YMjauC6LE+g8A4La9l6115+2GFD7nv/kU150gQGF
8zU9LMPoIgPeRLetkSPyWEll+7fWGw0taKsBN/9LKZ5sR5cZcL59WGi9T8xf
5Qa8vT5w+OFH9KfK+/vF6/dxV2mZEftWDr1cdJy2NWLNkZVNh+yg7Y3Y0OdH
cdZykf+MGDXvt/Mvk0X+M+LnwuV5bUNE/jOiTXCD8DHTRf4z4v3S30/MHEm7
GLE900UxowcNI3qPzW8x8nfazYijR24fb25HexhRWGurzPqBedDbiLnyl9nm
B7TCCNd7g6Pb/U37GuHQ9l2HHUdopRFK1Re14xZaZYRxzEeX0AxaMqLh29Z2
B+JovRFlXcfssy6gMyqvd+7xJx886Uwjho0cPutDf/HvE0bEDm529V57OtuI
HkPvvdnTgM414mWHhCC/78yjeUYEZ/f4UquMthjx56roYcuu0QVGSNYXn6od
p4uMGLLC868Z2+gSI1YfU41avZi2GvG2i3MvSxxdVnl9Nr06FM6ny41o3rJl
4VF3+pMRC52n5i12pWUmfN/5edHY1rStCYndTr96UZu2N6Hv6+oBIR+Yhx1N
aN7GtO6GyNNyE+yOpDRreYF2MsHm9IKo8ftoZxP22Dzs67OadjHhRX9LhbuG
hgl355zt2jqIdjOhYfSa4H8n0x4mPG52sGfgQNrbhJon2la5345WmPDG2eje
qx7ta8KDgicrfD8yjytN8DocOz62lFaZ8HHT5od+52nJhEazDp3uvYfWm9Am
49IU63I6w4TQQZtkCxJF/jehtLGv/Px8kf9NKO5rsK86TuR/E3QJunZNetK5
JoQ8PLTPtimdZ4Khnb3sahXaYsLVHtZtD4p4XigwobrP/ttX19JFJgw7vaBu
sD9dYkL0kipbD/YW/75lwrf6zl+32tBlJizdtMUbf/N8UV45/+GRX5JW0p9M
eH1zVp1582iZGZ5hjXOed6FtzWh1Kqqs/meeR+zNGH5p56F//6Idzbhwa5Ks
r4mWm7EuNX1l78m0kxlHD/43uLA57WxGeX9pU8Vjnl9czDAvS/Tcv5uGGfZO
ruerRNJuZpQu3L/gXj/aw8x8Tnubmbd5/lGYmZ9pXzPzMK00M9/SKjPzKs9H
kpn5k9abmSfpDDPzIZ1pZt7jeSrLzPxGZ5uZx+hcM/MVnWdmXuL5y2Jm/qEL
zMwzdJGZ+YQuMTNv8LxmNTM/0GVm5gG63Mz9nf5k5n7N850snfsvbZvO/VSc
/9K5P4rzXzr3O1qezv2LdkrnfkQ7p3N/4XnRJZ37BY101n/aLZ31nOdJj3TW
Z9o7nfWWVqSzfvK86ZvOekgr01nfaFU66xXPo1I66w+tT2c9oTPSWR94Xs1M
5/tOZ6Xz/U3i+qfzfaRz0/l+8Xybl873JYHrn87nn+fdgnQ+z3Fc/3Q+n7Fc
/3Q+bzwPW9P5/Ki4/ul8Hvjv0+VifaO4/mK9eH6WLeL9j+D6L+L9DOP6L+L9
4fnacRHnG8L1X8TrD+T6L+L1+HL9xffP4/qLz8/g+i+CjH//DxeAnfM=
                "]]}, "Charting`Private`Tag#3"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, 
              "PlotRange" -> {{0, 1000.}, {0, 0.19959959919799442`}}, 
              "Frame" -> {{False, False}, {False, False}}, 
              "AxesOrigin" -> {0, 0}, "ImageSize" -> {300, 300/GoldenRatio}, 
              "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
              GoldenRatio^(-1), "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[1, 180]], 
                 RGBColor[0.560181, 0.691569, 0.194885], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 180]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 180]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, 
             "PlotRange" -> {{0, 1000.}, {0, 0.19959959919799442`}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {300, 300/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[1, 180]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[1, 180]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[1, 180]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>],
         ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
          4.503599627370496*^15, -4.503599627370496*^15}}],
        Selectable->False]},
      Annotation[{{{}, {}, 
         Annotation[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[1, 180]], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
51sn0L7GT4Cept6Qv09ldP8E9Or+MsnDhqxMwDPbn7JNh2ifK0rASm15fV8t
Zr9LQIvLoeMOgZl0/wQsen84yugms+8lYKmFfHn+dLI6AbOkj6cez0qn+yfi
Ycn813Zq2gd1EvHRvNggikNmJ2Lh73ULphal0f0TsfmrKtFPm4xE/HoV3WgY
QvsjJxFpd0e/8b0hovsnYix/24wxU8i8RNy5Or3KMY32S34i4i3a7d6/ENL9
E/F+AmfStwVkZSIUQUcsvXfT/lmUiJnjc1qnf02h+ydi1jLr3hwOuTERda33
66oKaT9tTkReTWtpVDeyOhF7Dt9vbixNovsnIdFMHTvCK5Hun4TYEQ8kpdq0
z7KTsKDQ8bHgXBzdPwmyL9KVAV6xdP8kXF/yyG55H9p3OUkoNwn9pHFyM90/
CV8K7KN8nKLo/kmI3HmpcclH2of5SShx4G4MlYfT/ZPgeNfuTp5hGN0/CQ83
Ww0bmBxK909ChCLRbO/BILp/EvYUPV/Z7bI/3T8J81OiivXub6L7J8F6VdRL
rxdedP8kVP+27nzRzKX7J6N7XgsveI8b3T8Z0Qlq9i2OC90/GWt2l074N9ue
7p8MmNvX7C9fQPdPBut/vzjJKHm+dGKFFvN+TTJW504sqv1C/YWXDK304d11
m5j3b7p+fsM7a+45siK56/9vPf/DuWRlMvKM+ka9TSIXJcPEbKankQdZlYyK
pR+NAmzIjckojd1768AEcnMyrldkrXjUm+l/yeh1ue8unTfUr1h8+LauKrO+
Qdbko1v/A3tCT5B1+CgWTF6xS0HW5wNv+124GM70Rz4GjAz+8GoV2bDrnMV9
1GsO0y/58Iz7xB8/jGzOR+hiw/tWP6nfgY+QOz+bXR6Tbfnwn7Nxm38VmcNH
rXr2h9h9ZFc+LJ54tYuFTH/l4/HAsxkKH7Jfl4tYl3YsZfotH7GNP/7JmUyO
4WOF84bP2X2Z/tv1+lX/Pt/WTv1Uwkf6xL9usgaygo9PH6LWCYrJ2XxkVV66
H7GV6c98ZMP/jkcUuaDr9Q96ZLtiDdOv+XidKTaeaUEu58M092qq7gimf/MR
lvfJ5usv6se1fHyY7uh3+wnTz/lw/qvffkRFbuJDXZh8Mzmf6e98eKce6uGU
Sm7lY3TYAZnBJqbf8zGtSOjVupTc2XWfE9YpJyYz/T8Fv+/WP+P1JWum4IPb
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
f/Ndk1yQDh9X4zcz39C8VZSOpF5nBf515PJ0/PC0O77rGFnV9fqu/+t5VUau
TYfzwNm5H0LIjenYMcrceTCH3JSO1WmZiTNMmfkvHSNN6nTtBzHzX1e9HsTp
en2meU2djj8XekVFMvNeZzqOj7o0JeU0M/9loEf9W+P0Hcz8l4FVdfsTpNHM
/JeBwxc6NDNdmfkvA/tF9TdSLZi/l8pARFkvVexwsmEGtrJdH/j/ZOa/DHgu
8xzs8oiZ/7q+/22B59xKMjIQ6LW1amQe2TYDG6YFjfmeROZkYIsjN7nRneya
gbirSY35YN5fz8DDj2f68saQ/TLQ9v7RJPNuzPvtGeB02zvi53OaJ2My0PFe
/rj8EvP+ewZsHUZ6hx0gSzIw4sW2g+NFZEUGil+Py77tQ87OwM/Vt0zjl5CV
GbhtkuJnMIlc0JW//JNpRW9yUQbCi6qEq1ppHi3PwLgMt5Wva8mqDMRnD9oR
WUiuzcCA2VrWv9LJjRnIfW1plxRAbspAbXTs/h/LyM0ZYPcLWhQ2ldyaAYeZ
cvbzvmR1Bka9m25k/47m2c6u7z8Y6lZyg8zKxL5ZNvkDj5M1M3G4NqgjQEbW
ycSx+qTFF4LJ+pm4evu+pK8DmZ2JNy5Hi52nkw0z8WzXu5KtA8gmmSj290iu
f0/zsHkmftfu0OreQEYmeh9/ZmN6kmybide7N7DXZpE5mUha8lYRF0p27co/
1DhtuyOZm4n2o1kdhcZkv65z11nXz2iTeZkYmtL9+4UPNF/HZEKrUxlW1cD8
/V4m4pYFjT97kizJxKSfSRrHssiKTPidPNK5M5ScnYmDy6O/JziSlZm4/Yf9
eZ0xuSATVvN2/GeqTS7KxLXFb/W7P6H5vTwTd/L1Bm3bQ1Zl4u3yfJ7uBnJt
Jqpu1WtnjGTm/0ycq55+/f1Dmu+buu5zKDd20W5m/s+Eomb2t4x1zPzf5etr
R1QPI6szMVFvd2VbEzP/Z4L/s7pUI5vMkqJbfs1drTVkTSksLl/s1NBlPg+S
IsdA/b7tP9oP9KWoVx6SXtzKfD4kxew1Kw5InMmGUnzVWtl7wUCyiRQXZMbi
lw20T5hLYVntpI6RkyHFTYuRQ36tINtKoS1+eCG4L5kjRY/xlRU3r9G+4SrF
r241TSMkZK4UocraR2uWkP2keFuy7p+UHmSeFLUbrldmV9M+EiPF/ZZBhnv4
ZL4UTS2N2+RWZIkUre/Mrgb9ov1E0fX6pD/5c86Rs6UY3uAieB9NVkqh+v4y
/R8zcoEUTw4dWsX+TPtLkRTNBi17dhWRy6WY+mbqaFYIWSVFmcxIwZlKru26
n3fZocxW2ncapdibkadbfJDcJIW66tg/Kk9ysxSrFoqvnh1Nbu16fQk7fXIf
0T6k7sqf8EvXL4fcKcWHcX6pI1eTWTKYv9JadXYQWVMGpXb4ZCtmf9KRYWhs
5MEjmWR9GSLDtTb9WUpmy9Dw3KiXRQ+yoQwxm86PWqeifcpEhgnL7a09Esjm
Mry20u7mYE6GDHuF2e2jO2jfspXBOfKC7O5JMkeGA+N9/MICya4yyB6v+Pth
Ipkrw5eZjxqcntM+5ifD/NAW5x17yDwZfrYH/6pwJcfIcHS659wrg8l8Gaz1
18aeqKd9TSLD/cE2w2PSyQoZ5iQMSxiziJwtw6jS/u0rf9M+p5TBoEDn9Jhw
coEMlx21Xx5pof2uSIa19+//aV9HLu86VzjEtdUHU/1luLJizbndC8m1Mphd
aNTpXkb7YKMMgyzXVoyaTG6SYeniHq/bdtN+2Nz1+7j+4YDPAHJr1+uPPPNJ
zqd9US2DyLD6lNcn2hc7Zaj96130zIvMkoOdfHdrrzu0P2rKMen127aGxWQd
OQq35YycW+ZL9Zejed70sMUTyWw5FsYu6PluO+2bhnKMjp5XN7Un2USOgqM5
Yo1I2j/N5dAdKL7q/5z2T8jxeIteC5dDtpXD9mbTr+eVtI9y5Cju2PP87RSy
qxzrPVPGRe/0pPrLEbD3WWdyd7KfHI9CZ0AjlPZXnhwX7vjyvtyn/TVGjvyd
pbLVi8h8Oe4Zps+et96d6i+H326toRnTab9VyDE35aFD2l/ab7Pl+Hpwbrdx
DfR5sVKOE9PP7162Zx3VX44PxtVb2vxp/y2SI5rP02ub5Ur1l+N2afFx4z/0
990qORKe3jupvEKfN9fKu553L4pGZNJ+3CiHyxbvU/EOK6n+cliX95+wQ9uZ
6i/HTX54mkU9h+ovh6lTy6I1Qxyp/l2//7P5Ax3EK6j+cigDraec/GhH9c/C
mKfV8iMuS6n+WUhzt3xrXryI6p+FW/fn5nfrvpDqn4XYaReOBGyxovpnQaVn
XxnQzYLqn4XZkpoNX+xnUv2zwO8cfV19cwrVPwuJk+eNCT83kuqfBRZ9/T+O
eFwY
            "]]}, "Charting`Private`Tag#1"], 
         Annotation[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[1, 180]], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
M+8mQtNohaGOfySdfyJsR8mPLnePoPOXYQnnpGCcI83DajLs7Du3ZjTC6Pxl
2B2yKnHPxFA6fxnUR32Z+LcnzctsGTKzrHlOT3h0/jJcdT2vMX1lEJ2/DP3r
OrQa6wPo/GVYq9j1evZCPzp/GTbNepRbsMWbzl+GmMp+blmXPOj8ZfDM2asb
esmNzl+GxcJbp2N6u9L5y1BxJydl/2MnOn8Z8pZd+5fTYkPnLwPr/774Mpy3
K3bdC6onAhku3kyPdzQiy2XYoAh60WMcOVOGoGGtCcUa5DwZXo6RrFrRk6yQ
4cVUpdOnb1QvimQY8VtNIHtNLpXhP5sLN7UfkMtk+Hhu/IyjVWSlDB2i+COm
Z8g1Mhy1/Dnz0kFybffv/2ZRJbaRG2SQ3dq5okJGbpbB7/jN+7P45FYZslZr
2xT6kNu6P/+tTcXD1pI7ZHAc6fkp1prMkqPtU23/ZjOymhwHIiz/Wkwmq8uR
23NFxdZRZE05gm+7L3jfj3k+Jsf3I60i099UvwzkGHifEy1k6iVHjpIE/tgq
5nmZqRyzzrb69bzFPD+Tg/sj19G8nGwlx9PXCfVBR5jnaXJYq2a9LNhJdpbj
lO+uiOpU5vmaHElrvOXvYsk+crzqyhncZzOZJ4f56PM9x7qS+XL4Fzq4GC0n
C+Rojb6iPs+CLJfD5vtaTcup5Ew5unYs81syhqn/cgytPt21YCBT/+WYPaPg
ukkX1dciOXYd+nRV/xO5VA6NHVEtQ56Sy+S4f6pzwo9bZKUcobEDIuvLyTVy
iF8b3z9yhKn/cqg2P5uesJOp/3Ic+uYoXpbK1P/ufFevXxkSy9R/OcYccHh7
z5+p/3L46bS+SlnP1H85XPieJfOXkVlJWDVPPv/THLJaEuIq/0vKmUxWT0Jo
nrbEeBRZMwm/R/PG1/Yls7vdPMXVo5Op/0nwnx6s97WVzEmCYwTCohrIpknY
W86f++saGUm4PugRL+ws2SoJnHftaq0HyXZJmLzbtsNxK9k5CcKL02ZekJK5
3Z8v6ObRUeFknyT8qzV0CfUg85IQYm8yo2oVmZ+EkT0PjVdn+hdBEl581Jzg
OIMsT4Lqmh96WbrM89juzz9UPvaaOjkvCVaVH1g//lE/okhC0sDhF8f8Ry5K
wqePt6znPWOe1yZhT13p1jW3yWVJyHhhtM23nHl+2/370MyxCDtMrumOj/oU
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
            "]]}, "Charting`Private`Tag#2"], 
         Annotation[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[1, 180]], 
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
k7fQuSpMrRge4C/RFhWWJz0pajOdLlLhanpK3729aKsKXh0Gf6trT5eroJ5Q
a8GA58ynshgMDAs43e8MbR+DVy0CptdcR8tj0KfubOWWaNo5BmOcCgfV86QR
g9ur5DYjOtAeMVh8ZeNzt6q0IgbL2nVq3/gO864yBsaJ30r3HKClyvFdk/s0
MNMZMZjavPXoAfPprBi0sfvZ2XkAnVt5fS773j5rRFtiUIyGG/xeMj8XxeDl
51d9c07T1hh8zc/PP7SKLo/B+0LPhsmhtCwW2edWda3nRtvHInpjn7czWog8
Hgt5y469/N8zjzvHwmVc7IVeF0U+j0XfAwVRJ9bTHrHo9vP1F5tIWhGLyanG
mjajaWUsEgNMY/Jb0FIsbG/t8+nwjnk+IxbnCuoWe5yns2LhWhzWs9NqOjcW
bYylFfnBtCUWj2Mea74OpotiIZvzfeDLRrQ1FjkHi8OMT3k+KI/Fj2XLZv17
hJbFIW5qnZ5/G2n7ODzKKasTPJOWx6Fd8xOfDnShneNwr7D5q6yfPF8gDt2d
0q50LaI94lDtnXfIrCxaEcd8TivjmLdpKY75mc6IYx7meSUrjvmWzo1jXqUt
ccyfdFEc86Q478QxH/K8Ux7HvCfOP/HMb7R9PPMYLY9nvqKd45mXeF5CPPMP
7RHPPEMr4plPaGU88wbPV1I88wOdEc88QGfFc3+nc+O5X9OWeO6/PJ8VxXM/
pa3x3B/p8njud7QsgfsXz3P2CdyPaHkC9xfaOYH7BY0E1v8szj+B9ZxWJLA+
08oE1ltaSmD95PkxI4H1cB3nn8D6RucmsF6t5fwTWH/oogTWE54/rQmsD6s5
/wS+77Qske/vKs4/ke8jz6vyRL5ftHMi35dMzj+Rz/8Kzj+RzzOtSOTzyfOu
MpHP25+cfyKfn2WcfyKfh6WcfyLXl+fj3ESu12LOP5H3P4PzT+T9XMT5J/L+
mDl/MV8D55/E69dx/km8Hg3nn8Tvlzh/8flozj8Jsv/755EEO62dIfcV64Ui
CTYP6uy9Y6WVSaiIiexjc52WkhDy9b8GLc/TGUm43MfR1TVf/J6RhPJTs9eP
3k3nJqGeoVO/yVm0JQlHo/OrTF1KFyXhc5VuZZO1tDUJ889mPhwTI+pfEuY6
3i3rGyjqn4R+awtftppF20roeK3ho6oTRD2U4LV+xOm7w2hHCfoHxYm5fUR9
lLDjU0O7+A60k4TGw3vMQHNRLyXEHBq+4Hs92kWC26j+zffb0JBQpnsSMbuC
9c9NQnfbtwrbMlFPJYQ9eXZ92y3aW8LlAb3PDLos6quEp2ubtio6SftK+Cch
/773PlFvJXTeVffDzc20SsLwY689J64Q9VeCv9Ku7EwarZdg3/LNji7xoh5L
eCb/bsoIpjMlFDYPlZ4r6CwJ4xN9ovtPpLMl1Di2Z652OJ0rYX5+2z4Ffeg8
Ce+aeD2s0kH8PlX5ef2eqT2a0QUSDtcKMc4Q+0GRhGqjtvslyOgSCXWvDHv8
51tR3yXMGP/l9ZZHdJmE8psTo3ffoMsl9G2xK3hXAf1Jwqplnc9uzKdlauj2
XfXP2EXbquHYSOEeuY62V+POhqA5nhm0oxqP9k5f2iaZlqtxv7XX1dfhtJMa
TVRedrnzaWc1et5v7uzrRbuoscOjZ5fGo2iosTnh5btjfWm3ys8/8QmZ2on2
UOPsRb/0l81pbzWk1rkDo+rRisrrX5QZ9EFG+6rxasBY26C33K+UatQuOvj1
5kNapYZbL6nngGJaUuNq0q/rl5+j9WrM2Le2/ZPDdIYai7Tfj3TcTmeqcatj
8eCFq+gsNbb/SNyRaaSz1TD1qVt6Mp7OVaPHknEX7wTReWp8eHF8yhsf2lJ5
P24uC/7oTheoEd/z6Nf3oIvUMK4tfPq0G12iht0n+2ZFrWirGgk3NerdDeky
NcreXJZJ1cR+r4Z+5sDkkRXcfz+pcaHmtVdVn9CyZLR62qnjQbGf2yZD3Xll
y+nnaftkPNBXz6s4TDsm43C/qsWabPF7aTLyep7xsV1JO1W2N27ST0qjnZNR
3TXE/WUM7ZKM74a/pbH+Ij8kAwn/7s+aRrslo81ly6Wy0SJPJOPOiMl72vSj
vZNxLeq/gZM6inyRjNzRap/oprRvMpI2JJSb7UTeSMaUi89urPjKvKBKxrty
j3fLXoj8kYwd0afbpd6m9cn4b8B1T99CkUeS8eban5MGHqUzk+GxdEXdGjtF
PknGmr0PfP5aRWcnY6LTx9ZKg8gryaj9Z0E/+1g6Lxnrv+anbPQT+SWZv2fQ
BcmYuiPXYa0bXZSMnVGLmlR3oUuSYecw6JhPe9qajOkxLW9ud6DLkjFkzrtR
T6rT5ZXfP6/gacMK5p1PyehW8Iux+yORf1IQ7jbXbojIT7YpyNl3Z9CQv2j7
FGTOOvyj+17aMQWPdarmjbJoeQqqht1XPk6nnVKgjX5+aWsC7ZyCzdbj1bwD
aZcU1F627/mnaTRSMHrlCI+0UbRbCl4ENPmlpgvtkQLv5k9uR7ejvVMwd2hC
VnEj8Xt8pfeeaNmqKu2bAuPnJZ1m/sd8pkxBxwOPTNpSWpUCd8PKOusui9/v
U9CyilG16Sitr7yeqknLl2+nM1Lg01beNXoFnZmCKRsrbIen0lkpKKw9/dnP
MDo7Bav3Ri/bpqBzUzAtu9flfuPpvBRcMLtMPtaPtlR+/6N/Xjr9QRekYKdD
lYlqB7ooBb83njz8bFW6JAXpmRVJ78uZH62V9/uW+Xjde3RZCppXG3q4YSFd
noLrNbLbVM2jP6VgZa29R+9spmUanBy51TlrMW2rwfQAh97jEml7DWrOKIh/
6E87anAhcNf+OV60XAObN5d0F4fSThokNRu4+Tdn2lmDMI86+yY0o1006K3t
6h1mS0MDfft7UW/LmH/dNFjSYe+3yxbaQ4Mm38clR2XS3hqMM80c+iKEVmgw
ul9GVMeRtK8GDScox/VuQSs1uDOu+/taFczPKg2Wv0tenF1ISxoEV504ou5G
Wl85vl9W534qOkOD1uf6z+gyns7UwNx6sfVJa5HPNZD2+Pw19zPzd7YGa0bG
22z+m87VQLstY9XWTXSeBsNtLsT7q0R+16DkknHp67F0gQa+ce1PdWsp8rwG
V1/Fl3avYJ4v0eD9kC0nywtEvtfAeGbJH/5r6DINfizfdXttCF2ugf21eQbD
EPpT5fWuLyjt8istS8XT9zXj0p7yPGCbitcRNuWZR2j7VIz6knNuupF2TIX9
sE2xRTNoeSp6d42MrehMO6Xiwu0W7S/84HnCORWo6/XPqCu0Syqc6pT+FSnO
G0jF5z/O/jEmhHZLRU/71R0LBtIeqQixrrv1vA7tXXm91W703nuH5xFFKoYv
cezcZCftm4pbz+yWy2NoZSruO9v1OjuCVqXihN23Q9Ua0VIq8znPM/pU5m06
I5X5mc5MZR6ms1KZb+nsVOZVnn9yU5k/6bxU5knaksp8SBekMu/RRanMbzw/
laQyj9HWVOYruiyVeYkuT2X+4XnrUyrzDC3TMp/QtlrmDdpey/zA85mjlnmA
lmu5v9NOWu7XtLOW+y/Pcy5a7qc0tNwfaTct9zvaQ8v9i+c/by33I1qh5f5C
+2q5X9BKLes/z4sqLes5LWlZn2m9lvWWztCyfvJ8mallPaSztKxvdLaW9Yrn
z1wt608611/LekJbtKwPPJ8WaPm+m7j+Wr6/dImW76OR66/l+8XzbJmW7wtd
ruXzz39P/qTl86zn+uv4fPL8a6vj86bl+uv4/KRy/XV8HsT5WMf1TeH667he
yVx/He+/muuv4/3keRo63p9Err+O843n+ut4/TFcf3E9kVx/8f2hXH/xeT+u
vw6y//un0mGPbpvusD3rn6RD1N6B0SNsaL0OF94cL7/8jvUso/J69+nLxj2m
M3Xw6vxowrkbdJYO7x5/aN2ngM7WIWBEgXuWqJ+5Olx0wsUqO+m8yvY57XTT
19AWHa6MbRW720wX6NBnbP7yj4l0kQ5vJk4sclXSJTp4+Dr/FjGbtuowskXY
wq0T6DIdJEeHnUVDxe89OnxVf/j3bU/6kw7NtBestduJ33/0aHhOnteisaj/
eqwp9PVwshX1X49yVdnqPz6z/jrq8TbSYmr1nJbrEbzqeaOGt2knPfwmu7b7
Wijqvx7z63vtu3VM1H89Fv15dsfe3aL+65E/965MWifqvx6ODS9vGb5I1H89
Nm7LNNhIov7rUe+JY9YhJa3Qw23zlxuzZ9O+eoxxOPF7tQm0Uo8pjQ/5rx1C
q/QYH1Iju3MPWqr8fKPs8wda03o92vj6HOneiM7Q40WoJXBbNTpTj34Ne1xt
UMH9I0uP/q7PiiMe09l6DKv50O9yMZ2rxyvbV3HNztF5eiwZvP7L7EO0RY9q
s2ZcX7uVLqi8Xxc8Pl5ZThfp8fFIqOcnLV2ix9+j44scosX/n0QPV/X72R0X
0mV6HJ3Q5l0vL7pcj9DNv4X2Hkl/0qNg2I6CTn1oWRqGlvo+cWxP26Zh5PPd
h7440PZpWJ++uO21X2jHNOToX7RY/4H7nTwN9apOSJ/9hHZKw0J/x1lNbtDO
aVD0HR9/7iztkobA08eLfA+K3w8rx3/2fIRsC+2WhvM3618wLaM90tDjWNvB
dTW0dxrgfSVTE04r0uBwMODImzm0bxou7allcp9AK9PwR1rQ502DaVUaIvyr
P3/pTEtpqHb/v+Ed5GL/T8Noj5/vp4v9PKPy+6dtuaf+wf04Mw0n+ld/vvoV
nZWGu+3Kvm+/Q2enYbp0XLarUOz/aQh2WlmyIV/s/5XXk90twLhd7P9pmDr1
3lrfTLH/p6Gv+s/Jrjqx/6fhkM/zqO+RdEka8jraPTkwj7amoVf9k9pZE+my
NCTUmdf/+2C6PA3el14+MzvTn9KQrrwXWv93WmbA8PHjD+nq0LYG/PNnaWb5
V+YHewP8Xlu+jHlOOxrgINtxbGUJLTdg08uSEzfP0U4GpB+qd9/uIO1swLE/
F9s4b6JdDGjoKrcZsZiGAZHvPx0fl0S7GTD/1tWGI4NoDwNWWW5Yu02nvQ24
2mVrlbqjaIUBDfqMn3C7N+1rwNreo3JWthG/NxuwOzG23K0BrTKg96MO78p+
it+fDcjpVT0j5hWtN0C2vEHWl1t0hgHLjh76GlBAZxpgarAr9vJBOsuAr5af
71psorMN+M1UZ6Aig841YMjauC6LE+g8A4La9l6115+2GFD7nv/kU150gQGF
8zU9LMPoIgPeRLetkSPyWEll+7fWGw0taKsBN/9LKZ5sR5cZcL59WGi9T8xf
5Qa8vT5w+OFH9KfK+/vF6/dxV2mZEftWDr1cdJy2NWLNkZVNh+yg7Y3Y0OdH
cdZykf+MGDXvt/Mvk0X+M+LnwuV5bUNE/jOiTXCD8DHTRf4z4v3S30/MHEm7
GLE900UxowcNI3qPzW8x8nfazYijR24fb25HexhRWGurzPqBedDbiLnyl9nm
B7TCCNd7g6Pb/U37GuHQ9l2HHUdopRFK1Re14xZaZYRxzEeX0AxaMqLh29Z2
B+JovRFlXcfssy6gMyqvd+7xJx886Uwjho0cPutDf/HvE0bEDm529V57OtuI
HkPvvdnTgM414mWHhCC/78yjeUYEZ/f4UquMthjx56roYcuu0QVGSNYXn6od
p4uMGLLC868Z2+gSI1YfU41avZi2GvG2i3MvSxxdVnl9Nr06FM6ny41o3rJl
4VF3+pMRC52n5i12pWUmfN/5edHY1rStCYndTr96UZu2N6Hv6+oBIR+Yhx1N
aN7GtO6GyNNyE+yOpDRreYF2MsHm9IKo8ftoZxP22Dzs67OadjHhRX9LhbuG
hgl355zt2jqIdjOhYfSa4H8n0x4mPG52sGfgQNrbhJon2la5345WmPDG2eje
qx7ta8KDgicrfD8yjytN8DocOz62lFaZ8HHT5od+52nJhEazDp3uvYfWm9Am
49IU63I6w4TQQZtkCxJF/jehtLGv/Px8kf9NKO5rsK86TuR/E3QJunZNetK5
JoQ8PLTPtimdZ4Khnb3sahXaYsLVHtZtD4p4XigwobrP/ttX19JFJgw7vaBu
sD9dYkL0kipbD/YW/75lwrf6zl+32tBlJizdtMUbf/N8UV45/+GRX5JW0p9M
eH1zVp1582iZGZ5hjXOed6FtzWh1Kqqs/meeR+zNGH5p56F//6Idzbhwa5Ks
r4mWm7EuNX1l78m0kxlHD/43uLA57WxGeX9pU8Vjnl9czDAvS/Tcv5uGGfZO
ruerRNJuZpQu3L/gXj/aw8x8Tnubmbd5/lGYmZ9pXzPzMK00M9/SKjPzKs9H
kpn5k9abmSfpDDPzIZ1pZt7jeSrLzPxGZ5uZx+hcM/MVnWdmXuL5y2Jm/qEL
zMwzdJGZ+YQuMTNv8LxmNTM/0GVm5gG63Mz9nf5k5n7N850snfsvbZvO/VSc
/9K5P4rzXzr3O1qezv2LdkrnfkQ7p3N/4XnRJZ37BY101n/aLZ31nOdJj3TW
Z9o7nfWWVqSzfvK86ZvOekgr01nfaFU66xXPo1I66w+tT2c9oTPSWR94Xs1M
5/tOZ6Xz/U3i+qfzfaRz0/l+8Xybl873JYHrn87nn+fdgnQ+z3Fc/3Q+n7Fc
/3Q+bzwPW9P5/Ki4/ul8Hvjv0+VifaO4/mK9eH6WLeL9j+D6L+L9DOP6L+L9
4fnacRHnG8L1X8TrD+T6L+L1+HL9xffP4/qLz8/g+i+CjH//DxeAnfM=
            "]]}, "Charting`Private`Tag#3"]}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 1000.}, {0, 0.19959959919799442`}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {300, 300/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             PointSize[
              Rational[1, 180]], 
             RGBColor[0.560181, 0.691569, 0.194885], 
             AbsoluteThickness[2]], 
            Directive[
             PointSize[
              Rational[1, 180]], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2]], 
            Directive[
             PointSize[
              Rational[1, 180]], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          ListLinePlot, "GroupHighlight" -> False|>|>, 
       "DynamicHighlight"]], {{}, {}}}, InsetBox[
     TemplateBox[{"\"n=0.9\"", "\"n=0.7\"", "\"n=0.5\""},
      "LineLegend",
      DisplayFunction->(FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ),
      Editable->True,
      InterpretationFunction:>(RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "180"], "]"}], ",", 
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "180"], "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "180"], "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& )], 
     Scaled[{0.85, 0.78}], ImageScaled[{0.5, 0.5}],
     BaseStyle->{FontSize -> Larger},
     FormatType->StandardForm]},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{
     FormBox[
      TagBox["\"Iterations\"", HoldForm], TraditionalForm], 
     FormBox[
      TagBox["\"Learning Rate\"", HoldForm], TraditionalForm]},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImageSize->300,
   Method->{
    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
       Directive[
        RGBColor[0.368417, 0.506779, 0.709798], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.880722, 0.611041, 0.142051], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.560181, 0.691569, 0.194885], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.922526, 0.385626, 0.209179], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.528488, 0.470624, 0.701351], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.772079, 0.431554, 0.102387], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.363898, 0.618501, 0.782349], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[1, 0.75, 0], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.647624, 0.37816, 0.614037], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.571589, 0.586483, 0.], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.915, 0.3325, 0.2125], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
        
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
        AbsoluteThickness[2]], 
       Directive[
        RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
        AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
     "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
     "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
     "OptimizePlotMarkers" -> True, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}},
   PlotRange->{{0, 1000.}, {0, 0.19959959919799442`}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.02], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}],
  InterpretTemplate[Legended[
    Graphics[{{}, 
      Annotation[{{{}, {}, 
         Annotation[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[1, 180]], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
51sn0L7GT4Cept6Qv09ldP8E9Or+MsnDhqxMwDPbn7JNh2ifK0rASm15fV8t
Zr9LQIvLoeMOgZl0/wQsen84yugms+8lYKmFfHn+dLI6AbOkj6cez0qn+yfi
Ycn813Zq2gd1EvHRvNggikNmJ2Lh73ULphal0f0TsfmrKtFPm4xE/HoV3WgY
QvsjJxFpd0e/8b0hovsnYix/24wxU8i8RNy5Or3KMY32S34i4i3a7d6/ENL9
E/F+AmfStwVkZSIUQUcsvXfT/lmUiJnjc1qnf02h+ydi1jLr3hwOuTERda33
66oKaT9tTkReTWtpVDeyOhF7Dt9vbixNovsnIdFMHTvCK5Hun4TYEQ8kpdq0
z7KTsKDQ8bHgXBzdPwmyL9KVAV6xdP8kXF/yyG55H9p3OUkoNwn9pHFyM90/
CV8K7KN8nKLo/kmI3HmpcclH2of5SShx4G4MlYfT/ZPgeNfuTp5hGN0/CQ83
Ww0bmBxK909ChCLRbO/BILp/EvYUPV/Z7bI/3T8J81OiivXub6L7J8F6VdRL
rxdedP8kVP+27nzRzKX7J6N7XgsveI8b3T8Z0Qlq9i2OC90/GWt2l074N9ue
7p8MmNvX7C9fQPdPBut/vzjJKHm+dGKFFvN+TTJW504sqv1C/YWXDK304d11
m5j3b7p+fsM7a+45siK56/9vPf/DuWRlMvKM+ka9TSIXJcPEbKankQdZlYyK
pR+NAmzIjckojd1768AEcnMyrldkrXjUm+l/yeh1ue8unTfUr1h8+LauKrO+
Qdbko1v/A3tCT5B1+CgWTF6xS0HW5wNv+124GM70Rz4GjAz+8GoV2bDrnMV9
1GsO0y/58Iz7xB8/jGzOR+hiw/tWP6nfgY+QOz+bXR6Tbfnwn7Nxm38VmcNH
rXr2h9h9ZFc+LJ54tYuFTH/l4/HAsxkKH7Jfl4tYl3YsZfotH7GNP/7JmUyO
4WOF84bP2X2Z/tv1+lX/Pt/WTv1Uwkf6xL9usgaygo9PH6LWCYrJ2XxkVV66
H7GV6c98ZMP/jkcUuaDr9Q96ZLtiDdOv+XidKTaeaUEu58M092qq7gimf/MR
lvfJ5usv6se1fHyY7uh3+wnTz/lw/qvffkRFbuJDXZh8Mzmf6e98eKce6uGU
Sm7lY3TYAZnBJqbf8zGtSOjVupTc2XWfE9YpJyYz/T8Fv+/WP+P1JWum4IPb
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
f/Ndk1yQDh9X4zcz39C8VZSOpF5nBf515PJ0/PC0O77rGFnV9fqu/+t5VUau
TYfzwNm5H0LIjenYMcrceTCH3JSO1WmZiTNMmfkvHSNN6nTtBzHzX1e9HsTp
en2meU2djj8XekVFMvNeZzqOj7o0JeU0M/9loEf9W+P0Hcz8l4FVdfsTpNHM
/JeBwxc6NDNdmfkvA/tF9TdSLZi/l8pARFkvVexwsmEGtrJdH/j/ZOa/DHgu
8xzs8oiZ/7q+/22B59xKMjIQ6LW1amQe2TYDG6YFjfmeROZkYIsjN7nRneya
gbirSY35YN5fz8DDj2f68saQ/TLQ9v7RJPNuzPvtGeB02zvi53OaJ2My0PFe
/rj8EvP+ewZsHUZ6hx0gSzIw4sW2g+NFZEUGil+Py77tQ87OwM/Vt0zjl5CV
GbhtkuJnMIlc0JW//JNpRW9yUQbCi6qEq1ppHi3PwLgMt5Wva8mqDMRnD9oR
WUiuzcCA2VrWv9LJjRnIfW1plxRAbspAbXTs/h/LyM0ZYPcLWhQ2ldyaAYeZ
cvbzvmR1Bka9m25k/47m2c6u7z8Y6lZyg8zKxL5ZNvkDj5M1M3G4NqgjQEbW
ycSx+qTFF4LJ+pm4evu+pK8DmZ2JNy5Hi52nkw0z8WzXu5KtA8gmmSj290iu
f0/zsHkmftfu0OreQEYmeh9/ZmN6kmybide7N7DXZpE5mUha8lYRF0p27co/
1DhtuyOZm4n2o1kdhcZkv65z11nXz2iTeZkYmtL9+4UPNF/HZEKrUxlW1cD8
/V4m4pYFjT97kizJxKSfSRrHssiKTPidPNK5M5ScnYmDy6O/JziSlZm4/Yf9
eZ0xuSATVvN2/GeqTS7KxLXFb/W7P6H5vTwTd/L1Bm3bQ1Zl4u3yfJ7uBnJt
Jqpu1WtnjGTm/0ycq55+/f1Dmu+buu5zKDd20W5m/s+Eomb2t4x1zPzf5etr
R1QPI6szMVFvd2VbEzP/Z4L/s7pUI5vMkqJbfs1drTVkTSksLl/s1NBlPg+S
IsdA/b7tP9oP9KWoVx6SXtzKfD4kxew1Kw5InMmGUnzVWtl7wUCyiRQXZMbi
lw20T5hLYVntpI6RkyHFTYuRQ36tINtKoS1+eCG4L5kjRY/xlRU3r9G+4SrF
r241TSMkZK4UocraR2uWkP2keFuy7p+UHmSeFLUbrldmV9M+EiPF/ZZBhnv4
ZL4UTS2N2+RWZIkUre/Mrgb9ov1E0fX6pD/5c86Rs6UY3uAieB9NVkqh+v4y
/R8zcoEUTw4dWsX+TPtLkRTNBi17dhWRy6WY+mbqaFYIWSVFmcxIwZlKru26
n3fZocxW2ncapdibkadbfJDcJIW66tg/Kk9ysxSrFoqvnh1Nbu16fQk7fXIf
0T6k7sqf8EvXL4fcKcWHcX6pI1eTWTKYv9JadXYQWVMGpXb4ZCtmf9KRYWhs
5MEjmWR9GSLDtTb9WUpmy9Dw3KiXRQ+yoQwxm86PWqeifcpEhgnL7a09Esjm
Mry20u7mYE6GDHuF2e2jO2jfspXBOfKC7O5JMkeGA+N9/MICya4yyB6v+Pth
Ipkrw5eZjxqcntM+5ifD/NAW5x17yDwZfrYH/6pwJcfIcHS659wrg8l8Gaz1
18aeqKd9TSLD/cE2w2PSyQoZ5iQMSxiziJwtw6jS/u0rf9M+p5TBoEDn9Jhw
coEMlx21Xx5pof2uSIa19+//aV9HLu86VzjEtdUHU/1luLJizbndC8m1Mphd
aNTpXkb7YKMMgyzXVoyaTG6SYeniHq/bdtN+2Nz1+7j+4YDPAHJr1+uPPPNJ
zqd9US2DyLD6lNcn2hc7Zaj96130zIvMkoOdfHdrrzu0P2rKMen127aGxWQd
OQq35YycW+ZL9Zejed70sMUTyWw5FsYu6PluO+2bhnKMjp5XN7Un2USOgqM5
Yo1I2j/N5dAdKL7q/5z2T8jxeIteC5dDtpXD9mbTr+eVtI9y5Cju2PP87RSy
qxzrPVPGRe/0pPrLEbD3WWdyd7KfHI9CZ0AjlPZXnhwX7vjyvtyn/TVGjvyd
pbLVi8h8Oe4Zps+et96d6i+H326toRnTab9VyDE35aFD2l/ab7Pl+Hpwbrdx
DfR5sVKOE9PP7162Zx3VX44PxtVb2vxp/y2SI5rP02ub5Ur1l+N2afFx4z/0
990qORKe3jupvEKfN9fKu553L4pGZNJ+3CiHyxbvU/EOK6n+cliX95+wQ9uZ
6i/HTX54mkU9h+ovh6lTy6I1Qxyp/l2//7P5Ax3EK6j+cigDraec/GhH9c/C
mKfV8iMuS6n+WUhzt3xrXryI6p+FW/fn5nfrvpDqn4XYaReOBGyxovpnQaVn
XxnQzYLqn4XZkpoNX+xnUv2zwO8cfV19cwrVPwuJk+eNCT83kuqfBRZ9/T+O
eFwY
            "]]}, "Charting`Private`Tag#1"], 
         Annotation[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[1, 180]], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1:eJxN2nlYzO/3P/ARkj3ZimSyVAgTUlE8LVEJlSIUU9pLTfu0z9pMe6koxFhL
lrKHYkLJnoQoZEvWd5YoxK/f9Tmv6/rOP66HuzNn7u7Lfc55DV33IAdPFRaL
1dqTxfr/f/7v1Taf9f2rvoXs+nz6C9T/2N+/MYyxGhouD7UIdWesjmyHrFO9
7RgPQ9dcV78tFow1oRq8f7XWFMbaYP0TBG/XZMxG663OE8NVGY9DnLPK0JRv
NeQJmBUSnfSrmbEemn5OHeRxh7EBtNPr865dYDwZOc5DdCceYmyIqtKQXbFb
GU9DZmOw2h0xYw58KkJWawUzNsLQtCsJGzYwnoFe0p0xBcsYz4Rl9tgFD00Z
z0J9H+dranqMjSFdMKe38VDGs+G4dt+XdSzGJhh5y1kc/eka2RRZ49SOZz9h
bIan25YEH7zGeA60LmaeP3GK8Vw46dqIy/YwNsf51vLKs+mMLVAXrhVQGsN4
Hn70iODv9WE8HzVmd5rSnBgDZQ9VMkIWkgVA/OzHErvpzPoCJLf9Oqmvzawv
gK1v+5AONWZ9Iew2meVUtlfT+kIYpI/iSF6SWYvAGnr3yfy7zPoivNQJSvp+
gVlfjFy/75y9Rcz6Yqgozaqtcpl1SwyJ+2XRKmTWLfF9aF2qIJBZX4Lr8rmF
Q9Yz60sg/Jgp3LGUWV+Krvp+6jqzmPWlWF53aUk+m1m3wt/mfVoDBzLrVvB4
LIuN6qyidWvUNGpuevaGLLAG79xz5dw6Zt0GTuuQlHWRWbdB2tiokufFzPoy
zF24V09vG7O+DB3Tjr7wEDPrtsh/uun+jiBm3RYLJ/p8vrGeWV+OnAEzJ35d
yqwvR/vwYX5DZjHrK1Ar45QYsJn1FdheKmoxGcCsr8Q+vcc95ndcpfWVCO35
8KvFazLLDgdHfS6eVUuGHXQNfUaPL2d+3g5xQ1yM+xaRlXYQtRx/15LNxNsj
x1B3UnkCE2+P1tbpr+X+TLw9XCqM+i9fw8Tb4/LvJelqi5h4BySeXO96YRoT
7wCvc3o+nqOYeAeYHDLYparKxDtg3Yviz7u+XKH4VXgZedFq2lMyVkFt0twd
p2rIglV4Pe9ivdEpsnIVRoUcenVgNxPviCVXdM+opzDxjlBZPmhOSAQT7wjO
oJGuN9yYeEc4Hdk3QGs5E++E61OfGG8wZeKdwDtcUJU/nol3wuXO1KKbg5h4
J1yz6nHzW+dlil+Ne+cHaGm8IWM1dn/hx+vVkgWrkZhV1cK5QFauRvB5PQuj
g0z8GphFiAP0s5j4NRihHbZxaCwTvwaXisBq92Li1+BRv+emt+yZeGfM3fTl
a545E++MRtOrI9frM/HOyN9tm6mhwcQ745y9nuWlP5UUvxaSC1k6bm/J6HZH
cK+Oe2TBWryotHkmLicr18J1+bzsXoVM/Do4aPfvF53FxK/DtPN9J72OYeLX
4Yrv5IcLvZj4dXig/Poj146JXw8Toxje0zlM/HpUxgfoa01k4tcjQbfrn9Vg
Jn49pmd/fhrQqaR4F0TKkvdLXpHhgrsDFbMzb5MFLvDZKYjIOEtWukCnZ5el
aA8T7wqepXuiTwoT74oj6yI0F4Yz8a4YeT+sadBGJt4V4936n7hjxcRvQJTl
ar5wBhO/AYd2Ng3U12biN2BVWqrdpd5M/AacLw6cm/PsEsVvRLPvqP3px8nY
iHD/GdmbJWTBRrTnR13irCErN4J3dPWzR5OYeC7+1d7Y5/7n4v/M5uL8N+/L
tXfI4CK2cskH3T1kLhcJ8//cdgolC7ioUcvQDLAkK7gYrBcQ6TGSrOTCJ3Z9
7rx3Ff9zMxcmd0JH/zpPZrnhq9Wg41tTyWw3lGw/93voBjLcUJBkuDt4Opnr
hpw+phYlLLLADXYXysJv3Sun/G640SFrqdlLVrohVjdgyv5QcrMbTDzVnrku
JrPckdN4M7d9GJntjtxPz9/6vblA+d1xSnWEd8VpMtcd5eL6fR+lZIE7Sh+o
GHY4kRXueHP7e/LziWSlO8aqOVnvbT9P+d1R5TXo0/wqMmsTkDOr82wOmb0J
w2I/fOrrQcYmsI8utzKeSeZuQlmuvchMhSzYhF5JRzVG3DtH+TdhTuz5gBu7
ycpNeOHjxFodSG7ehPG4ZFZmTmZ54NzaGGFbPzLbA/lLDc3/NpRRfg/cbA+8
0XyQzPXAxD8n5dvCyAIPlPUeeVd3IVnhgf3TZ32JH0xWeuD6vN8Wx5rOUn4P
RCYJ/h07RGZ5wjnoZrQggsz2hIHJ3v90F5HhiVS9VXlbBpO5nmjaH33oXuMZ
yu+Jv8bV9s8KyQpPbBpx6tzZULLSEwLzlT1d55ObPeGT8Nb6dj8yyws5O6v2
9Hl4mvJ7df97eDKy/x4yvGB00v/4Q38y1wtZ30/7+84mC7zgUpQ59zKLrPDC
wwOqA5tvnKL8XtiW9f5yZQ652Qutgzxme20gs7yxMT189i19MtsbvrrRsq9t
Jym/N5oOb3/56ByZ642e5Wbt0SKywBvm8524T2zICm/Uz3p69rsGWekNvu9f
Yc2TE5TfG/0NubMd95JZPvC4u8piqy+Z7YNXh79/TuWQ4YPaaSZbZv88Tvl9
ULL+zfqsCrLABzHfEzfvEJMVPvi4dGa9gzVZ6YML3jay04PIzT6wWDTUu/J+
KeX3RVHd3LlheWS2L4ZNMD1+04UMX/w5Hruuik3m+qLs1VinipoSyu+LN7+a
3k1aSVb4ImFq1IMb9ccovy/eDo3nbF9LbvaFxGDS1aynRym/H9jvVvY6zCWz
/WBnuk/t+csjlN8PXWwLqZ4HmesH/Xvcy1GvD1P+bp+2y67dRFb4oeGzlu24
l8WU3w8jr08747mR3OwHZ7V9PbMaD1F+fyy4W6/MX01m+8PjxcKrYbVFlN8f
rR8Wa4+wJnP9EZS17BdPWUj5/VEvmrsjcjZZ4Y/dPzYajj58kPJ3v18fxyPL
dMjN/rCfpHPtZ8YByh8AleLkIwNYZHYAdjRtfR4euJ/yB+DMneAu7cZ9lD8A
jRozo99ZkgUBMKt8Zac8tpfyB8BvYNU+8XCyMgDGqvesNKL3UP4ATMUUi6VN
Csq/GZf9gjs65pLZm3Hi3lnDL0a7Kf9mDH6unq3bUkD5N6PBdFi/vjk7Kf9m
iAb0k46au4Pyb4aMMz/u+JN8yr8ZvTYkvOkfkkf5N+P2r8HvFrC2Uf5AaN85
yZ0jyaX8gbh3w9Z4+59syh+IxF5xuw97b6H8gTjbr+8ZkyuZlD8Qfgs8R2Zo
plP+QFhsqd8aEJdM+QPhpWarf6kokfIHguf1wuVMoojyB+G5ESsz/U0M5Q/C
soB9DRMMgyl/EFj/98UNQtyq0R9rNtN9IQjCkkeNLzU2khVB+DvhgI2zHXP/
BKG8zX5M/gLm/gnCttnHHB/MYO4fHh73iXw/YAJZnYfVa9Y1zB/O3Ec81F39
MTJQlczhge/duHfbT+Z+4sF1myykvJVsx8PAM36CpsfMfcWDxo9XVT9vkHk8
ROkuNB9UztxfPKzceKVp7FFyJg89O3IUhruY+4yHCs37glkZ5FIeknPlESYC
5n7jIbL4WLRxMLmWB98LhonT3MnNPDzSaMgat4rcxgN2h24dspjMCoZfSUnq
71lk9WAsPzppc/NEMjsYFx/5c5QjyJxgnP718c72Psz+gwE99QW8Drov7YKh
4jEhAe/I3GCs8vcQ9mfuX14w7q/6Mf/eDbIgGOlLPpzIukDODEbi1Pl1tkfI
imCccWvIVSkglwbDf42s/UQaWRmMn1aq71zjybXBuPC8w7tnEHPfB8Oj8YPv
vo3ktu79nnVssbBj7v8QnFuRVV8HsnoIQuPeTnE3YupBCOqVklcfdMmcEAx8
EPc1SIOpDyEwsL+z8rMKs/8Q1MH5q9c3pl6EoE/5q9rHr8i8EGTH6rxcUs/U
jxDYBu/QPnaVnBmCESvrIgafZupJCALHjn3rd4BcGoIjtyo3KXOZ+hKCY4ef
vhycSK4NQb+eUevWRjD1JgTbM2KVO73IbSFwUT3Z78lqMisUmdk104YsJauH
ovcam3ELTcjsUIQ+PfAkQJ/MCcWHrQbLs0aSEYpxNv8CS/qQ7UKxV2JsfO0n
U69CUdbndE7DWzIvFINmWIpePSILQtHkmfz17TVyZiiS/Xs/eXOWrAjFpVqN
qU8LyaWhOLbo/fPb28jKUGx5X9ByVkauDYXZWS3jHZHk5lDEnRl3KdKb3BaK
betX85evYepvGMZem+SovZSsHoaDfd9Zvp7N1OMwVLidwQE9MicM9uFJJhtH
MPU5DJMTp43RUCXbhaFjYUpNzAeqx9wwbMsR/716g8wLw3iLWuW/Q0z9DsPD
TwXfpiSRM8Owrsf5aGsfpp6HwXF/ppnzUnJpGIZ8nTzUWY+sDENdr6nvrXqT
a8PA67yvmPyaqfdhePvmm2bXZXJbGFZebp+p3ENmheProgd1oQKyejhaD+k8
HLmRzA7H2+iPY45YkDnhUMx8k8TRJiMcdm9MO/f/ov7BLhwvruyy6fuYzA3H
mH0OLq5nybxwuLlrDNiTSxaEg7NktEl9KDkzHEPn65//YU9WhGPUGL9gNQ65
NBxrStJN+w4iK8Nx8M7J9x0fqD+pDUe7g6/7o+vk5nBs/nokan8huS0cGX3f
9uVKyawIpC57+6HvJrJ6BH6uffFzD8jsCLxZ6NvbQIfMiUDe66APO35Tv4MI
KI3nC7oayHYRMAuOyLc9Q+ZGYPUE1QFJ2WReBJJ0DI+c4DH9UwQWLwhafn05
OTMCn6ftuHxrMtNPRWDrowtPy/uQSyOg/VKTl/+a6a8iENnGsXGvJNdGILvi
1NyRu5h+KwJuQ0VDy6LJbRHw3bZr9+I1ZFYkrAJmHC2fSVaPBPegSI2tTmZH
4kHWh9jAj9SfcSIxqOZJfWENGZHYpXH98c39ZLtIZGjNcnwiIHMjUftkW//7
LmReJJJbvatPm5IFkbjjr2YjGkbOjITpu+p1pm3U7ykicfRq3YVHN8mlkdgi
NJ7OLSQrI7Gy/Eb4PRG5NhLzn5isnLKB3ByJ8IBXUZvNyG2RmL3w44ltw8gs
Poz12WcO/Uf9ozof76y/Wuy7QWbz0WgZ3FNygMzhY+9t84vLBGTwMbgtesKv
dWQ7Pi5+u/U+3ZjM5aPryqKrfdXJPD6Ov1vl7vee+lEBH4p+18NKr5Iz+dB4
V3aocRdZwYfgafjRD3xyKR97rggmNzsw/S0fhauir5cZkmv5mN081Chclel3
+VAJ/td7eDP1t2187DZ6/n7bOab/jULYlFmCri1k9ShYL7D1sAxg+uEojHKf
PjPIksyJQmBrSmK0DhlRyB21t93rJ/XLdlFwvzRt+KxaMjcK/ucdI18UkXlR
kOyRHg4UkgVRKDH3nde4lpwZhdXNV87pzSArolCduX6/XT9yaRRimhqFzi+p
/1ZGoXxtWZ3FeXJtFFxPDBzG2kJujsI4feGlXb7ktihkh+gs01pAZkVj3JeZ
k4I0yerRqPpqWLP7P+rf2dG4M9JvS3E1mRONwryRn9MLyIhGsFMPC9swsl00
Hso8ml7YkLnRWPv54oSVumReNAZY7vDN/knzgCAaek3rOo/eJmdGo1rzj/au
fWRFNAYWPR25KYpcGo2r+vH6f1aQldE4rWIq9plAro1Gk2nn+sJOmieao7G5
6kfj2Tvktmh4L1+vl7+PmT9i8P5c22obPlk9BknOV4U3bJl5JAZCjaoTmrpk
TgwMRWeeeL9n5pMYHJ3xbc3sLWS7GHwzXX5puxmZG4NDD38/29K8i/Yfg8Jc
e562jCyIwdDJ20cYTyVnxiAk5pXrkzqadxQxuPOt5FxfPrk0Bq/+ZYiV2mRl
DHrwFJ2/lTQP1cZgl94H83Me5OYYnDEuXNneh9wWA8fZTkOPFtO8xIqF76JT
S57aktVjcTorRSz6vJ32H4vrOovN8zPInFjEblh+bgyHjFis0ls6YkAtzVt2
sfiy6v08bhCZG4szN4s+DB9E5sUix+dPgcERmscEsehaun5ntjU5MxaDY6s/
2bfQfKaIBS+rxXGDiFwai8zgQpuTY8jKWPA/L+ywKdtK+4/F9D0HOWMdyM2x
mKPQ8Z30gea7tlhEPZh83F1MZsXhjwX30JVRZPU4aHUYRS0+nkP7j4MgJvJK
0xIyJw5vPOPyxY3MfBiHrkyPgOlBZLs4KGfL/jzoQebG4duEtCUB2TQ/8uKQ
trtqc8t4siAOuvIl+0xOZtH+46C5bGZfhwVkRRwuavhm6d2hebM0DvFWux7u
X0tWxsHsV8rT8GsZtP84/B4W5FfcQPNocxwebXEbXt6SRvuPQ5g0ckjMl1Ta
fzwuOottTnSk0P7jUdCmI9H7Q/MrOx5Nc2wsc38n0f7jobHRXnjyh5z2H49j
Dv+1Tvkko/3HI7PevHrnM5p3ufGQ64eY5d6Q0v7jgWGO+VmlEtp/PD7U9tj5
I0NM++9+f6lqeT8fmo8V8Qir2vf7o4mQ9h8PRbLhjMFdCbT/eJQ9epnQERZH
+4/HyH+Nyf3qo2n/8ei49+Vw4nA+7T8ey95d73tzRjjtPwEmn26p9xwXQvtP
wMmnlwwKD26m/Scg9/Gck38cvGj/CXjTdC68M2Y97T8BrP/7sktAv/96jbn4
l3lekoD+y6z7ObeReQnYkeYq/PSCeX6SgKw6i9j4++TMBFy5/eh7vyqyIgEO
+f3ebDlDLk2ApvjgkhFFzP2fgAmPA4bm5jP3fwI8Tg+2HJzC3P8JWFhj9EAS
y9z/CfAc51XRvpm5/wXw65r+020jWU2APWKV2Ot2TD0QoGorLA0XkjUFKM41
t02eSWYLUM82TX41gWwgwN+nmzpMRpA5AsTPeZ4h60M2FUBqWGZd18HUDwGM
v73X0XxPthIg8YGb2tpGpp4I8On59785t8jOAtQofH/frGDqiwDiVyE/upjn
Tz4CuPmVtk5WMPVGAJXCYzccssh8AUKDW3LCRWSBAO8qyudnh5LlArDsRVcO
e5AzBRCFhGpeciLnCVCy6+zs20uY510CdBi7jXhoQi4SQGfK5pLHBuRSAS6W
XO58pEUuE0D/+YxPtf2Y52Pd7+/NF179TfWrRgAzI5NjJz4y9UyA/F5//HY8
JTcIkDnVvCT+DvM8TQDFGKcQl0vkVgFu9089PKuU3NZ9nlsGOvTZQ+4QYJzt
J5f6LDJLiLP+E6/sEJHVhGhx2hrjGkpWF6LVWDVOy4OsKURHJvviXUcyW4i1
j8KNBZZkAyFY36IfT55N5ghRc1+uuKtHNhViVmejIHAkGUJs7czm9VEjWwmx
T/Wk5/YOqrd2QtgEjVmt/47sLMQtnXyTY4/JXCG+at7+N+0G2UeIoG/Yf+g8
mSfEaFuXUTqHyXwhYO61JnUHWSDE7hqJ3fcUslyIuSvKfznFkjOFqPvw2eZ4
ADlPiAdvG41VXckKIV5ojC11XE4uEiJFj3NspwW5VIgQtvuEZ1PJZd3Of6mq
pUNWCtGoec56+SByjRBzrqVWtv+h/qFWCN90WcKip+QGIbKVklPiCnKzEMXn
HJeeKSC3CuEdGqbTGEduE+L7j/7sr67kDiGeX/1o9NuCzBLh14xMsx9jyGoi
/HdpuParLupH1EUY57LgYuVTsqYIuwqjem2pILNFODChum5VAdlAhIINtwf0
iSNzRHjR637uYReyqQhmnaftFpiTIYKf/eexNaPJViJsW5byZv5v6m/sRPg5
y0hc9ITsLELQwpFPepxnngeLsHtd75vL8sk+IrystZ+dyPRLPBGuqz//XbqG
zBch3Uzr983ZZIEIb4q+aTwaTpaLcD6sRbfuO/VLmSLo3//Qu+I+OU+Eiby4
ndtOkBUizCvNuuyWRS4Soex5nuNoHrlUhI3Lo6ddXUEuE8HdLmuKy1SyUoQE
02K9V/3JNSJk6v/rdH5P/VitCO33ZyVU1JAbRKiYsSZDvZDcLMITtYcqDlJy
qwh8d+Fx4SZymwgu/0lDdi8gd4iQtMhX+/BYpv8T4+Ov3tL9XdTPqYmhd0km
TGkkq4uhP827ZeM5sqYYexSeMt1tTH8oxus7cpPaMLKBGKqrRlz3d2D6RTHu
qGYM/D6dbCqGsXnxA5+BTP8oxu07dl+uv6f+0EqM7AF500fWMP2kGIfCyjfY
HSA7izHeRts2XMT0l2LodhpdlW4k+4gRY5u+RWjO9JtivA2uE/pokfliFNw4
tH7OD6b/FGNp4pXWH3VkuRh9VW+1FZQw/agY6O01Z3oqOU+MddLxKcU+ZIUY
LtHxhYMtyUViTDK+57BBl1wqxjH5ipVbu6hfLRPj68FO17OPmf5VjCsnCuZV
nibXiFGkUlVyMotcKwZvSGlg+mZygxjnNG1N7K3JzWJ42U+6+nsCuVWM8ge8
O2nM9xttYnxnPxnYp4n64Q4xLPUVpt5nySwJbvSI6HlsC1lNgosGMbqNm8nq
EpybPX3xZyuypgR9pnuOfjuezJbgLmY7Vf2l/tlAgiLW9wL5YzJHgtAhoxSc
U2RTCZYZz+9VkU6GBAkXewdP9SVbSRDm3D9FuIhsJ4FsbMP3sjFkZwnC/95a
cf8n9eNcCXhLh5jU3iP7SDAhPsG65DCZJ4Hz0qyxPCmZ370eYmOnsZEskODh
wPG8XFOyXILy+Db1ziHkTAkgvl1p/oH6+TwJkrR6DOZeJSsk+D7rtdC9gFwk
gZ9RtWJRBLlUgtVf7n5WWUkuk+Bo1psPu/XJSgk+FiQOG8Ui10iw/MiRF7wG
mg9qu3+/VkU1+0rJDRLkDv0z54Sc3CzB3Hbjgzu45FYJ7K2rQzeaktskqGuq
V+saTO6QoHjH0OrQtzRfsKTwr0rvc+UiWU2KifHRE97nktWlKE3tCmwNIGtK
0WtY58yKRWS2FJXqt897jyIbSKHYqGX5to3mE44UYwbEDJp7jWwqhfkeS1v3
AjKk+DDddKpLKNlKioKzUx/rW5PtpDDZWsO7qkN2lkJiYjTKvZXmHa4UnsUR
8Y+3kH2kaJn6cewnczJPihfyLX+3t9A8xJeiOamjz4sMskCK4YMXjagwJcul
0K0d/5/hC5qXMrvz+1YsnJZEzpNi49+Q4oscskKKEMWewsZHNE8VSfHWd8Fe
UTy5VIo7gwPelk4gl0lx3626cNMNmreUUkx/f719WxC5RooRyR+u2Awj10oR
m7HjJb+M5rEGKS6vGv1Xx4Xc3P3+7eN3mv2j+axViqYZa7Wq9pDbpIgrFx2s
WETukCLsiNRy7Bua31iJKGscUf1GSlZLhMWrMZcH6JHVExHleSk/o4rmO81E
RLT0DPL1ILMTYfh6kG6uCtkgEXzVhiUDFTT/cRKRN2j1pFvmZNNEbMxTq7jZ
QPMgEvHwyI3tvcPIVonoHVv/M2QQ2S4RodPv7BxQRPOicyLa4mobb4DMTcTE
xZOkBxpofvTp/vndJ55kB5F5iTgqEwpTe5P5iRhnfCBYup3mS0EiXhnufRU6
jSxPxIm7C+baVtK8mZmIgxdM/+uxipyXiMjHfTfLXgno/BNRdMa743YIuSgR
Bs760ioWuTQRx3VMhp8bRfNqWSLMsi8X/OPE0/knYtesGLtZi2l+rUnErfyl
HgaOsXT+iahPintTyKXvhxsSgdbjj/m+zHybiO0ZxkbrAqPo/BMxOXRxpEoQ
M+8mQtNohaGOfySdfyJsR8mPLnePoPOXYQnnpGCcI83DajLs7Du3ZjTC6Pxl
2B2yKnHPxFA6fxnUR32Z+LcnzctsGTKzrHlOT3h0/jJcdT2vMX1lEJ2/DP3r
OrQa6wPo/GVYq9j1evZCPzp/GTbNepRbsMWbzl+GmMp+blmXPOj8ZfDM2asb
esmNzl+GxcJbp2N6u9L5y1BxJydl/2MnOn8Z8pZd+5fTYkPnLwPr/774Mpy3
K3bdC6onAhku3kyPdzQiy2XYoAh60WMcOVOGoGGtCcUa5DwZXo6RrFrRk6yQ
4cVUpdOnb1QvimQY8VtNIHtNLpXhP5sLN7UfkMtk+Hhu/IyjVWSlDB2i+COm
Z8g1Mhy1/Dnz0kFybffv/2ZRJbaRG2SQ3dq5okJGbpbB7/jN+7P45FYZslZr
2xT6kNu6P/+tTcXD1pI7ZHAc6fkp1prMkqPtU23/ZjOymhwHIiz/Wkwmq8uR
23NFxdZRZE05gm+7L3jfj3k+Jsf3I60i099UvwzkGHifEy1k6iVHjpIE/tgq
5nmZqRyzzrb69bzFPD+Tg/sj19G8nGwlx9PXCfVBR5jnaXJYq2a9LNhJdpbj
lO+uiOpU5vmaHElrvOXvYsk+crzqyhncZzOZJ4f56PM9x7qS+XL4Fzq4GC0n
C+Rojb6iPs+CLJfD5vtaTcup5Ew5unYs81syhqn/cgytPt21YCBT/+WYPaPg
ukkX1dciOXYd+nRV/xO5VA6NHVEtQ56Sy+S4f6pzwo9bZKUcobEDIuvLyTVy
iF8b3z9yhKn/cqg2P5uesJOp/3Ic+uYoXpbK1P/ufFevXxkSy9R/OcYccHh7
z5+p/3L46bS+SlnP1H85XPieJfOXkVlJWDVPPv/THLJaEuIq/0vKmUxWT0Jo
nrbEeBRZMwm/R/PG1/Yls7vdPMXVo5Op/0nwnx6s97WVzEmCYwTCohrIpknY
W86f++saGUm4PugRL+ws2SoJnHftaq0HyXZJmLzbtsNxK9k5CcKL02ZekJK5
3Z8v6ObRUeFknyT8qzV0CfUg85IQYm8yo2oVmZ+EkT0PjVdn+hdBEl581Jzg
OIMsT4Lqmh96WbrM89juzz9UPvaaOjkvCVaVH1g//lE/okhC0sDhF8f8Ry5K
wqePt6znPWOe1yZhT13p1jW3yWVJyHhhtM23nHl+2/370MyxCDtMrumOj/oU
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
            "]]}, "Charting`Private`Tag#2"], 
         Annotation[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[1, 180]], 
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
k7fQuSpMrRge4C/RFhWWJz0pajOdLlLhanpK3729aKsKXh0Gf6trT5eroJ5Q
a8GA58ynshgMDAs43e8MbR+DVy0CptdcR8tj0KfubOWWaNo5BmOcCgfV86QR
g9ur5DYjOtAeMVh8ZeNzt6q0IgbL2nVq3/gO864yBsaJ30r3HKClyvFdk/s0
MNMZMZjavPXoAfPprBi0sfvZ2XkAnVt5fS773j5rRFtiUIyGG/xeMj8XxeDl
51d9c07T1hh8zc/PP7SKLo/B+0LPhsmhtCwW2edWda3nRtvHInpjn7czWog8
Hgt5y469/N8zjzvHwmVc7IVeF0U+j0XfAwVRJ9bTHrHo9vP1F5tIWhGLyanG
mjajaWUsEgNMY/Jb0FIsbG/t8+nwjnk+IxbnCuoWe5yns2LhWhzWs9NqOjcW
bYylFfnBtCUWj2Mea74OpotiIZvzfeDLRrQ1FjkHi8OMT3k+KI/Fj2XLZv17
hJbFIW5qnZ5/G2n7ODzKKasTPJOWx6Fd8xOfDnShneNwr7D5q6yfPF8gDt2d
0q50LaI94lDtnXfIrCxaEcd8TivjmLdpKY75mc6IYx7meSUrjvmWzo1jXqUt
ccyfdFEc86Q478QxH/K8Ux7HvCfOP/HMb7R9PPMYLY9nvqKd45mXeF5CPPMP
7RHPPEMr4plPaGU88wbPV1I88wOdEc88QGfFc3+nc+O5X9OWeO6/PJ8VxXM/
pa3x3B/p8njud7QsgfsXz3P2CdyPaHkC9xfaOYH7BY0E1v8szj+B9ZxWJLA+
08oE1ltaSmD95PkxI4H1cB3nn8D6RucmsF6t5fwTWH/oogTWE54/rQmsD6s5
/wS+77Qske/vKs4/ke8jz6vyRL5ftHMi35dMzj+Rz/8Kzj+RzzOtSOTzyfOu
MpHP25+cfyKfn2WcfyKfh6WcfyLXl+fj3ESu12LOP5H3P4PzT+T9XMT5J/L+
mDl/MV8D55/E69dx/km8Hg3nn8Tvlzh/8flozj8Jsv/755EEO62dIfcV64Ui
CTYP6uy9Y6WVSaiIiexjc52WkhDy9b8GLc/TGUm43MfR1TVf/J6RhPJTs9eP
3k3nJqGeoVO/yVm0JQlHo/OrTF1KFyXhc5VuZZO1tDUJ889mPhwTI+pfEuY6
3i3rGyjqn4R+awtftppF20roeK3ho6oTRD2U4LV+xOm7w2hHCfoHxYm5fUR9
lLDjU0O7+A60k4TGw3vMQHNRLyXEHBq+4Hs92kWC26j+zffb0JBQpnsSMbuC
9c9NQnfbtwrbMlFPJYQ9eXZ92y3aW8LlAb3PDLos6quEp2ubtio6SftK+Cch
/773PlFvJXTeVffDzc20SsLwY689J64Q9VeCv9Ku7EwarZdg3/LNji7xoh5L
eCb/bsoIpjMlFDYPlZ4r6CwJ4xN9ovtPpLMl1Di2Z652OJ0rYX5+2z4Ffeg8
Ce+aeD2s0kH8PlX5ef2eqT2a0QUSDtcKMc4Q+0GRhGqjtvslyOgSCXWvDHv8
51tR3yXMGP/l9ZZHdJmE8psTo3ffoMsl9G2xK3hXAf1Jwqplnc9uzKdlauj2
XfXP2EXbquHYSOEeuY62V+POhqA5nhm0oxqP9k5f2iaZlqtxv7XX1dfhtJMa
TVRedrnzaWc1et5v7uzrRbuoscOjZ5fGo2iosTnh5btjfWm3ys8/8QmZ2on2
UOPsRb/0l81pbzWk1rkDo+rRisrrX5QZ9EFG+6rxasBY26C33K+UatQuOvj1
5kNapYZbL6nngGJaUuNq0q/rl5+j9WrM2Le2/ZPDdIYai7Tfj3TcTmeqcatj
8eCFq+gsNbb/SNyRaaSz1TD1qVt6Mp7OVaPHknEX7wTReWp8eHF8yhsf2lJ5
P24uC/7oTheoEd/z6Nf3oIvUMK4tfPq0G12iht0n+2ZFrWirGgk3NerdDeky
NcreXJZJ1cR+r4Z+5sDkkRXcfz+pcaHmtVdVn9CyZLR62qnjQbGf2yZD3Xll
y+nnaftkPNBXz6s4TDsm43C/qsWabPF7aTLyep7xsV1JO1W2N27ST0qjnZNR
3TXE/WUM7ZKM74a/pbH+Ij8kAwn/7s+aRrslo81ly6Wy0SJPJOPOiMl72vSj
vZNxLeq/gZM6inyRjNzRap/oprRvMpI2JJSb7UTeSMaUi89urPjKvKBKxrty
j3fLXoj8kYwd0afbpd6m9cn4b8B1T99CkUeS8eban5MGHqUzk+GxdEXdGjtF
PknGmr0PfP5aRWcnY6LTx9ZKg8gryaj9Z0E/+1g6Lxnrv+anbPQT+SWZv2fQ
BcmYuiPXYa0bXZSMnVGLmlR3oUuSYecw6JhPe9qajOkxLW9ud6DLkjFkzrtR
T6rT5ZXfP6/gacMK5p1PyehW8Iux+yORf1IQ7jbXbojIT7YpyNl3Z9CQv2j7
FGTOOvyj+17aMQWPdarmjbJoeQqqht1XPk6nnVKgjX5+aWsC7ZyCzdbj1bwD
aZcU1F627/mnaTRSMHrlCI+0UbRbCl4ENPmlpgvtkQLv5k9uR7ejvVMwd2hC
VnEj8Xt8pfeeaNmqKu2bAuPnJZ1m/sd8pkxBxwOPTNpSWpUCd8PKOusui9/v
U9CyilG16Sitr7yeqknLl2+nM1Lg01beNXoFnZmCKRsrbIen0lkpKKw9/dnP
MDo7Bav3Ri/bpqBzUzAtu9flfuPpvBRcMLtMPtaPtlR+/6N/Xjr9QRekYKdD
lYlqB7ooBb83njz8bFW6JAXpmRVJ78uZH62V9/uW+Xjde3RZCppXG3q4YSFd
noLrNbLbVM2jP6VgZa29R+9spmUanBy51TlrMW2rwfQAh97jEml7DWrOKIh/
6E87anAhcNf+OV60XAObN5d0F4fSThokNRu4+Tdn2lmDMI86+yY0o1006K3t
6h1mS0MDfft7UW/LmH/dNFjSYe+3yxbaQ4Mm38clR2XS3hqMM80c+iKEVmgw
ul9GVMeRtK8GDScox/VuQSs1uDOu+/taFczPKg2Wv0tenF1ISxoEV504ou5G
Wl85vl9W534qOkOD1uf6z+gyns7UwNx6sfVJa5HPNZD2+Pw19zPzd7YGa0bG
22z+m87VQLstY9XWTXSeBsNtLsT7q0R+16DkknHp67F0gQa+ce1PdWsp8rwG
V1/Fl3avYJ4v0eD9kC0nywtEvtfAeGbJH/5r6DINfizfdXttCF2ugf21eQbD
EPpT5fWuLyjt8istS8XT9zXj0p7yPGCbitcRNuWZR2j7VIz6knNuupF2TIX9
sE2xRTNoeSp6d42MrehMO6Xiwu0W7S/84HnCORWo6/XPqCu0Syqc6pT+FSnO
G0jF5z/O/jEmhHZLRU/71R0LBtIeqQixrrv1vA7tXXm91W703nuH5xFFKoYv
cezcZCftm4pbz+yWy2NoZSruO9v1OjuCVqXihN23Q9Ua0VIq8znPM/pU5m06
I5X5mc5MZR6ms1KZb+nsVOZVnn9yU5k/6bxU5knaksp8SBekMu/RRanMbzw/
laQyj9HWVOYruiyVeYkuT2X+4XnrUyrzDC3TMp/QtlrmDdpey/zA85mjlnmA
lmu5v9NOWu7XtLOW+y/Pcy5a7qc0tNwfaTct9zvaQ8v9i+c/by33I1qh5f5C
+2q5X9BKLes/z4sqLes5LWlZn2m9lvWWztCyfvJ8mallPaSztKxvdLaW9Yrn
z1wt608611/LekJbtKwPPJ8WaPm+m7j+Wr6/dImW76OR66/l+8XzbJmW7wtd
ruXzz39P/qTl86zn+uv4fPL8a6vj86bl+uv4/KRy/XV8HsT5WMf1TeH667he
yVx/He+/muuv4/3keRo63p9Err+O843n+ut4/TFcf3E9kVx/8f2hXH/xeT+u
vw6y//un0mGPbpvusD3rn6RD1N6B0SNsaL0OF94cL7/8jvUso/J69+nLxj2m
M3Xw6vxowrkbdJYO7x5/aN2ngM7WIWBEgXuWqJ+5Olx0wsUqO+m8yvY57XTT
19AWHa6MbRW720wX6NBnbP7yj4l0kQ5vJk4sclXSJTp4+Dr/FjGbtuowskXY
wq0T6DIdJEeHnUVDxe89OnxVf/j3bU/6kw7NtBestduJ33/0aHhOnteisaj/
eqwp9PVwshX1X49yVdnqPz6z/jrq8TbSYmr1nJbrEbzqeaOGt2knPfwmu7b7
Wijqvx7z63vtu3VM1H89Fv15dsfe3aL+65E/965MWifqvx6ODS9vGb5I1H89
Nm7LNNhIov7rUe+JY9YhJa3Qw23zlxuzZ9O+eoxxOPF7tQm0Uo8pjQ/5rx1C
q/QYH1Iju3MPWqr8fKPs8wda03o92vj6HOneiM7Q40WoJXBbNTpTj34Ne1xt
UMH9I0uP/q7PiiMe09l6DKv50O9yMZ2rxyvbV3HNztF5eiwZvP7L7EO0RY9q
s2ZcX7uVLqi8Xxc8Pl5ZThfp8fFIqOcnLV2ix9+j44scosX/n0QPV/X72R0X
0mV6HJ3Q5l0vL7pcj9DNv4X2Hkl/0qNg2I6CTn1oWRqGlvo+cWxP26Zh5PPd
h7440PZpWJ++uO21X2jHNOToX7RY/4H7nTwN9apOSJ/9hHZKw0J/x1lNbtDO
aVD0HR9/7iztkobA08eLfA+K3w8rx3/2fIRsC+2WhvM3618wLaM90tDjWNvB
dTW0dxrgfSVTE04r0uBwMODImzm0bxou7allcp9AK9PwR1rQ502DaVUaIvyr
P3/pTEtpqHb/v+Ed5GL/T8Noj5/vp4v9PKPy+6dtuaf+wf04Mw0n+ld/vvoV
nZWGu+3Kvm+/Q2enYbp0XLarUOz/aQh2WlmyIV/s/5XXk90twLhd7P9pmDr1
3lrfTLH/p6Gv+s/Jrjqx/6fhkM/zqO+RdEka8jraPTkwj7amoVf9k9pZE+my
NCTUmdf/+2C6PA3el14+MzvTn9KQrrwXWv93WmbA8PHjD+nq0LYG/PNnaWb5
V+YHewP8Xlu+jHlOOxrgINtxbGUJLTdg08uSEzfP0U4GpB+qd9/uIO1swLE/
F9s4b6JdDGjoKrcZsZiGAZHvPx0fl0S7GTD/1tWGI4NoDwNWWW5Yu02nvQ24
2mVrlbqjaIUBDfqMn3C7N+1rwNreo3JWthG/NxuwOzG23K0BrTKg96MO78p+
it+fDcjpVT0j5hWtN0C2vEHWl1t0hgHLjh76GlBAZxpgarAr9vJBOsuAr5af
71psorMN+M1UZ6Aig841YMjauC6LE+g8A4La9l6115+2GFD7nv/kU150gQGF
8zU9LMPoIgPeRLetkSPyWEll+7fWGw0taKsBN/9LKZ5sR5cZcL59WGi9T8xf
5Qa8vT5w+OFH9KfK+/vF6/dxV2mZEftWDr1cdJy2NWLNkZVNh+yg7Y3Y0OdH
cdZykf+MGDXvt/Mvk0X+M+LnwuV5bUNE/jOiTXCD8DHTRf4z4v3S30/MHEm7
GLE900UxowcNI3qPzW8x8nfazYijR24fb25HexhRWGurzPqBedDbiLnyl9nm
B7TCCNd7g6Pb/U37GuHQ9l2HHUdopRFK1Re14xZaZYRxzEeX0AxaMqLh29Z2
B+JovRFlXcfssy6gMyqvd+7xJx886Uwjho0cPutDf/HvE0bEDm529V57OtuI
HkPvvdnTgM414mWHhCC/78yjeUYEZ/f4UquMthjx56roYcuu0QVGSNYXn6od
p4uMGLLC868Z2+gSI1YfU41avZi2GvG2i3MvSxxdVnl9Nr06FM6ny41o3rJl
4VF3+pMRC52n5i12pWUmfN/5edHY1rStCYndTr96UZu2N6Hv6+oBIR+Yhx1N
aN7GtO6GyNNyE+yOpDRreYF2MsHm9IKo8ftoZxP22Dzs67OadjHhRX9LhbuG
hgl355zt2jqIdjOhYfSa4H8n0x4mPG52sGfgQNrbhJon2la5345WmPDG2eje
qx7ta8KDgicrfD8yjytN8DocOz62lFaZ8HHT5od+52nJhEazDp3uvYfWm9Am
49IU63I6w4TQQZtkCxJF/jehtLGv/Px8kf9NKO5rsK86TuR/E3QJunZNetK5
JoQ8PLTPtimdZ4Khnb3sahXaYsLVHtZtD4p4XigwobrP/ttX19JFJgw7vaBu
sD9dYkL0kipbD/YW/75lwrf6zl+32tBlJizdtMUbf/N8UV45/+GRX5JW0p9M
eH1zVp1582iZGZ5hjXOed6FtzWh1Kqqs/meeR+zNGH5p56F//6Idzbhwa5Ks
r4mWm7EuNX1l78m0kxlHD/43uLA57WxGeX9pU8Vjnl9czDAvS/Tcv5uGGfZO
ruerRNJuZpQu3L/gXj/aw8x8Tnubmbd5/lGYmZ9pXzPzMK00M9/SKjPzKs9H
kpn5k9abmSfpDDPzIZ1pZt7jeSrLzPxGZ5uZx+hcM/MVnWdmXuL5y2Jm/qEL
zMwzdJGZ+YQuMTNv8LxmNTM/0GVm5gG63Mz9nf5k5n7N850snfsvbZvO/VSc
/9K5P4rzXzr3O1qezv2LdkrnfkQ7p3N/4XnRJZ37BY101n/aLZ31nOdJj3TW
Z9o7nfWWVqSzfvK86ZvOekgr01nfaFU66xXPo1I66w+tT2c9oTPSWR94Xs1M
5/tOZ6Xz/U3i+qfzfaRz0/l+8Xybl873JYHrn87nn+fdgnQ+z3Fc/3Q+n7Fc
/3Q+bzwPW9P5/Ki4/ul8Hvjv0+VifaO4/mK9eH6WLeL9j+D6L+L9DOP6L+L9
4fnacRHnG8L1X8TrD+T6L+L1+HL9xffP4/qLz8/g+i+CjH//DxeAnfM=
            "]]}, "Charting`Private`Tag#3"]}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 1000.}, {0, 0.19959959919799442`}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {300, 300/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             PointSize[
              Rational[1, 180]], 
             RGBColor[0.560181, 0.691569, 0.194885], 
             AbsoluteThickness[2]], 
            Directive[
             PointSize[
              Rational[1, 180]], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2]], 
            Directive[
             PointSize[
              Rational[1, 180]], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          ListLinePlot, "GroupHighlight" -> False|>|>, 
       "DynamicHighlight"], {{}, {}}}, {
     DisplayFunction -> Identity, DisplayFunction -> Identity, 
      DisplayFunction -> Identity, AspectRatio -> GoldenRatio^(-1), 
      Axes -> {True, True}, AxesLabel -> {
        HoldForm["Iterations"], 
        HoldForm["Learning Rate"]}, AxesOrigin -> {0, 0}, DisplayFunction :> 
      Identity, Frame -> {{False, False}, {False, False}}, 
      FrameLabel -> {{None, None}, {None, None}}, 
      FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
      GridLines -> {None, None}, GridLinesStyle -> Directive[
        GrayLevel[0.5, 0.4]], ImageSize -> 300, 
      Method -> {
       "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
          Directive[
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.922526, 0.385626, 0.209179], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.528488, 0.470624, 0.701351], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.772079, 0.431554, 0.102387], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.363898, 0.618501, 0.782349], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[1, 0.75, 0], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.647624, 0.37816, 0.614037], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.571589, 0.586483, 0.], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.915, 0.3325, 0.2125], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[
           0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
           AbsoluteThickness[2]], 
          Directive[
           RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
           AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
        "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
        "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
        "OptimizePlotMarkers" -> True, 
        "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), "CopiedValueFunction" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& )}}, 
      PlotRange -> {{0, 1000.}, {0, 0.19959959919799442`}}, PlotRangeClipping -> 
      True, PlotRangePadding -> {{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
    Placed[
     Unevaluated[
      LineLegend[{
        Directive[
         PointSize[
          Rational[1, 180]], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[2]], 
        Directive[
         PointSize[
          Rational[1, 180]], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[2]], 
        Directive[
         PointSize[
          Rational[1, 180]], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[2]]}, {"n=0.9", "n=0.7", "n=0.5"}, 
       LegendMarkers -> {{False, Automatic}, {False, Automatic}, {
         False, Automatic}}, Joined -> {True, True, True}, LabelStyle -> {}, 
       LegendLayout -> "Column"]], {0.85, 0.78}, Identity]]& ],
  AutoDelete->True,
  Editable->True,
  SelectWithContents->False,
  Selectable->True]], "Output",
 CellChangeTimes->{3.94506892654084*^9},
 CellLabel->"Out[13]=",
 CellID->298497383,ExpressionUUID->"e521dac2-636a-4c42-bca1-fec377e9edb3"]
}, Open  ]],

Cell["code 6.7 Cyclical Learning Rates", "CodeCaption",
 CellChangeTimes->{{3.945113379120302*^9, 3.9451133813649883`*^9}, {
  3.945115544825231*^9, 3.94511554926782*^9}},
 CellID->1806503720,ExpressionUUID->"589425ac-a2d2-4ad5-b17f-220f390b749e"],

Cell["\<\
(* Cyclical Learning Rates (CLR) proves particularly valuable in overcoming \
challenges associated with saddle points in the loss landscape. The code \
presented below creates an interactive environment for exploring the impact \
of different parameters on the cyclical learning rate schedule. Key \
Parameters adjusted via Manipulate are base learning rate, the initial \
learning rate at the start of each cycle, max learning rate, the peak \
learning rate reached during a cycle, half cycle length, a parameter \
controlling how quickly the learning rate increases and decreases, and total \
iterations, the number of iterations to visualize. As users manipulate these \
parameters using sliders, the code dynamically recalculates and visualizes \
the corresponding cyclical learning rate schedule. The resulting plot \
provides insights into how changes in the learning rate parameters impact the \
training process, offering an intuitive understanding of \
CLR\[CloseCurlyQuote]s adaptability and efficiency: *)\
\>", "comment",
 CellChangeTimes->{{3.945113389758801*^9, 3.9451133931775017`*^9}},
 CellID->793847424,ExpressionUUID->"fdf420b5-6b61-4763-92b0-32363589589b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"triangularLR", "[", 
    RowBox[{"epoch_", ",", "stepsize_", ",", "baseLR_", ",", "maxLR_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cycle", ",", "x", ",", "lr"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cycle", "=", 
       RowBox[{"Floor", "[", 
        RowBox[{"1", "+", 
         RowBox[{"epoch", "/", 
          RowBox[{"(", 
           RowBox[{"2", "*", "stepsize"}], ")"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"epoch", "/", "stepsize"}], "-", 
         RowBox[{"2", "*", "cycle"}], "+", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"lr", "=", 
       RowBox[{"baseLR", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"maxLR", "-", "baseLR"}], ")"}], "*", 
         RowBox[{"Max", "[", 
          RowBox[{"0", ",", 
           RowBox[{"(", 
            RowBox[{"1", "-", "x"}], ")"}]}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", "lr"}]}], " ", "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"epochs", ",", "LearningRates"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"epochs", "=", 
       RowBox[{"Range", "[", 
        RowBox[{"1", ",", "totalIterations"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"LearningRates", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"triangularLR", "[", 
          RowBox[{"#", ",", "stepsize", ",", "baseLR", ",", "maxLR"}], "]"}], 
         "&"}], "/@", "epochs"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"epochs", ",", "LearningRates"}], "}"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "PlotLabel", "->", "\"\<Cyclical Learning Rate Schedule\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "200"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.005", ",", "0.4"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Joined", "->", "True"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Mesh", "->", "All"}], ",", "\[IndentingNewLine]", 
        RowBox[{"MeshStyle", "->", 
         RowBox[{"Directive", "[", 
          RowBox[{
           RowBox[{"PointSize", "[", "0.01", "]"}], ",", "Purple"}], "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"baseLR", ",", "0.1", ",", "\"\<Base Learning Rate\>\""}], 
      "}"}], ",", "0.1", ",", "0.2", ",", "0.0001", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxLR", ",", "0.2", ",", "\"\<Max Learning Rate\>\""}], "}"}], 
     ",", "0.2", ",", "0.3", ",", "0.001", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"stepsize", ",", "5", ",", "\"\<Half Cycle Length\>\""}], "}"}],
      ",", "5", ",", "10", ",", "1", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"totaliterations", ",", "100", ",", "\"\<Total Epochs\>\""}], 
      "}"}], ",", "10", ",", "200", ",", "20", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.945113398025716*^9, 3.945113495892187*^9}, {
  3.945113601785029*^9, 3.945113645584572*^9}, {3.9451136987772627`*^9, 
  3.9451137137178802`*^9}, {3.94511420573759*^9, 3.945114226612619*^9}, {
  3.945115357688932*^9, 3.945115392638586*^9}},
 CellLabel->"In[14]:=",
 CellID->1599210417,ExpressionUUID->"8f6293a2-6304-425f-9f00-b549f36966c0"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`baseLR$$ = 
    0.11180000000000001`, $CellContext`maxLR$$ = 
    0.23500000000000001`, $CellContext`stepsize$$ = 
    6, $CellContext`totaliterations$$ = 110, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`baseLR$$], 0.1, "Base Learning Rate"}, 0.1, 0.2, 
      0.0001, ControlType -> Manipulator}, {{
       Hold[$CellContext`maxLR$$], 0.2, "Max Learning Rate"}, 0.2, 0.3, 0.001,
       ControlType -> Manipulator}, {{
       Hold[$CellContext`stepsize$$], 5, "Half Cycle Length"}, 5, 10, 1, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`totaliterations$$], 100, "Total Epochs"}, 10, 200, 
      20, ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {120.38047774796308`, 129.42100509171308`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`baseLR$$ = 0.1, $CellContext`maxLR$$ = 
        0.2, $CellContext`stepsize$$ = 5, $CellContext`totaliterations$$ = 
        100}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`epochs$, $CellContext`LearningRates$}, \
$CellContext`epochs$ = 
         Range[1, $CellContext`totalIterations]; $CellContext`LearningRates$ = 
         Map[$CellContext`triangularLR[#, $CellContext`stepsize$$, \
$CellContext`baseLR$$, $CellContext`maxLR$$]& , $CellContext`epochs$]; 
        ListLinePlot[
          Transpose[{$CellContext`epochs$, $CellContext`LearningRates$}], 
          PlotLabel -> "Cyclical Learning Rate Schedule", 
          PlotRange -> {{1, 200}, {0.005, 0.4}}, Joined -> True, Mesh -> All, 
          MeshStyle -> Directive[
            PointSize[0.01], Purple], ImageSize -> 300]], 
      "Specifications" :> {{{$CellContext`baseLR$$, 0.1, 
          "Base Learning Rate"}, 0.1, 0.2, 0.0001, Appearance -> 
         "Labeled"}, {{$CellContext`maxLR$$, 0.2, "Max Learning Rate"}, 0.2, 
         0.3, 0.001, Appearance -> 
         "Labeled"}, {{$CellContext`stepsize$$, 5, "Half Cycle Length"}, 5, 
         10, 1, Appearance -> 
         "Labeled"}, {{$CellContext`totaliterations$$, 100, "Total Epochs"}, 
         10, 200, 20, Appearance -> "Labeled"}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{
      451.3807861328125, {224.38047774796308`, 233.42100509171308`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9451153929532633`*^9},
 CellLabel->"Out[15]=",
 CellID->247623110,ExpressionUUID->"e871eaf8-2698-4b71-99a2-e90a47e8d824"]
}, Open  ]],

Cell["code 6.8 Cosine Annealing Learning Rate Scheduler", "CodeCaption",
 CellChangeTimes->{{3.945115509994377*^9, 3.945115537382753*^9}},
 CellID->1749095697,ExpressionUUID->"1952f8c2-33d0-4caf-9481-ab57861b0488"],

Cell["\<\
(* The code implements a cosine annealing learning rate scheduler within a \
Manipulate environment, allowing users to interactively explore and visualize \
the learning rate schedule. It defines a function, CosineAnnealingLR, to \
compute learning rates based on parameters such as the minimum and maximum \
learning rates, total iterations in a cycle, and the current iteration \
number. The code generates learning rates over multiple cycles using the \
cosine annealing method and plots the learning rate schedule using \
ListLinePlot. Users can adjust hyperparameters such as the minimum and \
maximum learning rates, total iterations in a cycle, and the number of cycles \
through sliders to observe the corresponding changes in the learning rate \
schedule: *)\
\>", "comment",
 CellChangeTimes->{{3.9451155242946863`*^9, 3.9451155273078613`*^9}},
 CellID->720288178,ExpressionUUID->"b2a11ab8-e093-4f28-a7e6-e6bc6ad63cae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"CosineAnnealingLR", "[", 
      RowBox[{"minLR", ",", "maxLR", ",", "Ti", ",", "Tcur_"}], "]"}], ":=", 
     RowBox[{"minLR", "+", 
      RowBox[{"0.5", 
       RowBox[{"(", 
        RowBox[{"maxLR", "-", "minLR"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Tcur", "/", "Ti"}], ")"}], "\[Pi]"}], "]"}]}], 
        ")"}]}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"cycles", "=", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "Ti"}], "]"}], ",", "numCycles"}], "]"}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"learningRates", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"CosineAnnealingLR", "[", 
        RowBox[{"minLR", ",", "maxLR", ",", "Ti", ",", "#"}], "]"}], "&"}], "/@",
       "cycles"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"epochs", "=", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", "cycles", "]"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"data", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"epochs", ",", "learningRates"}], "}"}], "]"}]}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
     RowBox[{"data", ",", "\[IndentingNewLine]", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1000"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.005", ",", "0.15"}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<Iterations\>\"", ",", "\"\<Learning Rate\>\""}], "}"}]}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
      "PlotLabel", "->", "\"\<Cosine Annealing Learning Rate Schedule\>\""}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Joined", "->", "True"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", "]"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"minLR", ",", "0.02", ",", "\"\<Minimum LR\>\""}], "}"}], ",", 
     "0", ",", "0.1", ",", "0.0001", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxLR", ",", "0.08", ",", "\"\<Maximum LR\>\""}], "}"}], ",", 
     "0", ",", "0.1", ",", "0.0001", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Ti", ",", "50", ",", "\"\<Total Iterations in a Cycle\>\""}], 
      "}"}], ",", "10", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"numCycles", ",", "4", ",", "\"\<Total Cycles\>\""}], "}"}], 
     ",", "1", ",", "10", ",", "1", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.9451156352210417`*^9, 3.945115800145046*^9}, {
  3.945115847791936*^9, 3.945115848069518*^9}},
 CellLabel->"In[17]:=",
 CellID->178492711,ExpressionUUID->"186ee039-3bf2-4b9a-9249-7b5590282de0"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`maxLR$$ = 
    0.059000000000000004`, $CellContext`minLR$$ = 
    0.0334, $CellContext`numCycles$$ = 6, $CellContext`Ti$$ = 75, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`minLR$$], 0.02, "Minimum LR"}, 0, 0.1, 0.0001, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`maxLR$$], 0.08, "Maximum LR"}, 0, 0.1, 0.0001, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`Ti$$], 50, "Total Iterations in a Cycle"}, 10, 100, 
      1, ControlType -> Manipulator}, {{
       Hold[$CellContext`numCycles$$], 4, "Total Cycles"}, 1, 10, 1, 
      ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {108.40903235489422`, 117.44955969864422`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`maxLR$$ = 0.08, $CellContext`minLR$$ = 
        0.02, $CellContext`numCycles$$ = 4, $CellContext`Ti$$ = 50}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, 
      "Body" :> ($CellContext`CosineAnnealingLR[$CellContext`minLR$$, \
$CellContext`maxLR$$, $CellContext`Ti$$, 
          Pattern[$CellContext`Tcur$, 
           Blank[]]] := $CellContext`minLR$$ + 
         0.5 ($CellContext`maxLR$$ - $CellContext`minLR$$) (1 + 
           Cos[($CellContext`Tcur$/$CellContext`Ti$$) 
             Pi]); $CellContext`cycles = Flatten[
          Table[
           Range[
           0, $CellContext`Ti$$], $CellContext`numCycles$$]]; \
$CellContext`learningRates = 
        Map[$CellContext`CosineAnnealingLR[$CellContext`minLR$$, \
$CellContext`maxLR$$, $CellContext`Ti$$, #]& , $CellContext`cycles]; \
$CellContext`epochs = Range[1, 
          Length[$CellContext`cycles]]; $CellContext`data = 
        Transpose[{$CellContext`epochs, $CellContext`learningRates}]; 
       ListLinePlot[$CellContext`data, 
         PlotRange -> {{1, 1000}, {0.005, 0.15}}, 
         AxesLabel -> {"Iterations", "Learning Rate"}, PlotLabel -> 
         "Cosine Annealing Learning Rate Schedule", Joined -> True, ImageSize -> 
         300]), "Specifications" :> {{{$CellContext`minLR$$, 0.02, 
          "Minimum LR"}, 0, 0.1, 0.0001, Appearance -> 
         "Labeled"}, {{$CellContext`maxLR$$, 0.08, "Maximum LR"}, 0, 0.1, 
         0.0001, Appearance -> 
         "Labeled"}, {{$CellContext`Ti$$, 50, "Total Iterations in a Cycle"}, 
         10, 100, 1, Appearance -> 
         "Labeled"}, {{$CellContext`numCycles$$, 4, "Total Cycles"}, 1, 10, 1,
          Appearance -> "Labeled"}}, "Options" :> {}, "DefaultOptions" :> {}],
     
     ImageSizeCache->{
      484.2738525390625, {212.40903235489424`, 221.44955969864424`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.945115800599828*^9, 3.945115850841926*^9},
 CellLabel->"Out[17]=",
 CellID->943230992,ExpressionUUID->"be37f9ba-278d-45a5-b6bd-e2fcc7ff0cf5"]
}, Open  ]],

Cell["code 6.9 Stochastic Gradient Descent with Restarts", "CodeCaption",
 CellChangeTimes->{{3.945115867351076*^9, 3.945115876666215*^9}},
 CellID->159000390,ExpressionUUID->"4aac9c57-9261-4bda-b0a0-d79d878600b9"],

Cell["\<\
(* The code constructs a learning rate schedule based on the stochastic \
gradient descent with restarts (SGDR) method utilizing cosine annealing. It \
initializes parameters such as the multiplier factor for cycle length, the \
initial cycle length, and the number of cycles. Subsequently, it calculates \
the cycle lengths and computes learning rates for each iteration within each \
cycle using the SGDRCosineLR function, which implements the cosine annealing \
formula. The resulting learning rate schedule is then visualized using \
ListLinePlot, displaying epochs against corresponding learning rates: *)\
\>", "comment",
 CellChangeTimes->{{3.945115884929784*^9, 3.945115887839428*^9}},
 CellID->1765035942,ExpressionUUID->"1da31738-b434-4a99-bf2c-fabb228f1bf7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Tmult", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"T", "[", "0", "]"}], "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numofcycles", "=", "4"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Ti", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"T", "[", 
        RowBox[{"i", "+", "1"}], "]"}], "=", 
       RowBox[{
        RowBox[{"T", "[", "i", "]"}], "*", "Tmult"}]}], ";", 
      RowBox[{"T", "[", 
       RowBox[{"i", "+", "1"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "numofcycles"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TiValues", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"PrependTo", "[", 
      RowBox[{"Ti", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"T", "[", "0", "]"}]}], "}"}]}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nmin", "=", "0.0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nmax", "=", "0.05"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SGDRCosineLR", "[", 
    RowBox[{"nmin_", ",", "nmax_", ",", "Tcur_", ",", "Ti_"}], "]"}], ":=", 
   RowBox[{"nmin", "+", 
    RowBox[{
     RowBox[{"1", "/", "2"}], 
     RowBox[{"(", 
      RowBox[{"nmax", "-", "nmin"}], ")"}], 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Cos", "[", 
        RowBox[{
         RowBox[{"Tcur", "/", "Ti"}], " ", "\[Pi]"}], "]"}]}], ")"}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lrValues", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SGDRCosineLR", "[", 
          RowBox[{"nmin", ",", "nmax", ",", "t", ",", 
           RowBox[{"TiValues", "[", 
            RowBox[{"[", 
             RowBox[{"j", "+", "1"}], "]"}], "]"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{"TiValues", "[", 
             RowBox[{"[", "j", "]"}], "]"}], "-", "1"}], ",", 
           RowBox[{
            RowBox[{"TiValues", "[", 
             RowBox[{"[", 
              RowBox[{"j", "+", "1"}], "]"}], "]"}], "-", "1"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{
          RowBox[{"Length", "[", "TiValues", "]"}], "-", "1"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"epochs", "=", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", 
      RowBox[{
       RowBox[{"Length", "[", "lrValues", "]"}], "-", "1"}]}], "]"}]}], ";"}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"epochs", ",", "lrValues"}], "}"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Epoch\>\"", ",", "\"\<Learning Rate\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLabel", "->", "\"\<SGDR Leanring Rate Schedule\>\""}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.945115893617173*^9, 3.9451159267549763`*^9}, {
  3.9451167318415747`*^9, 3.9451168800424957`*^9}},
 CellLabel->"In[31]:=",
 CellID->1503570273,ExpressionUUID->"936ac13f-f1fa-4340-a846-6216148fa282"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
          NCache[
           Rational[1, 90], 0.011111111111111112`]], AbsoluteThickness[2], 
         LineBox[CompressedData["
1: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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[
               Rational[1, 90]], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1: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
              "]]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 324.}, {0, 0.05}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[
                Rational[1, 90]], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 324.}, {0, 0.05}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[
               Rational[1, 90]], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListLinePlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[
           Rational[1, 90]], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
          "]]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 324.}, {0, 0.05}}, 
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           PointSize[
            Rational[1, 90]], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListLinePlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Epoch\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Learning Rate\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"SGDR Leanring Rate Schedule\"", TraditionalForm],
  PlotRange->{{0, 324.}, {0, 0.05}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.945116880459304*^9},
 CellLabel->"Out[41]=",
 CellID->67452524,ExpressionUUID->"f77bdb4c-49ca-4778-bd9c-b71b3e814ccf"]
}, Open  ]],

Cell["code 6.10 Exponential Decay Sine Wave Learning Rate", "CodeCaption",
 CellChangeTimes->{{3.945116887058949*^9, 3.945116897493503*^9}},
 CellID->278932810,ExpressionUUID->"db684eeb-2e6c-4a39-aa16-b95b0b160f46"],

Cell["\<\
(* The code implements a Manipulate interface in Mathematica, facilitating \
interactive exploration of a custom learning rate schedule. The schedule is \
defined by a function combining exponential decay and sine wave oscillation \
components. Users can adjust parameters such as the initial learning rate, \
decay rate, total iterations, oscillation parameter, and number of batches \
per epoch. These parameters influence the shape and behavior of the learning \
rate schedule, impacting the optimization process. The interface dynamically \
updates a plot showcasing the learning rate schedule, enabling users to \
visualize how changes in parameters affect the rate at which the algorithm \
adjusts its weights during training: *\
\>", "comment",
 CellChangeTimes->{{3.945116907664225*^9, 3.945116910458234*^9}},
 CellID->456315950,ExpressionUUID->"b5c788f3-b1f3-4f5e-8054-616ff6bde6f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "lrFunction", ",", "initialRate", ",", "decayRate", ",", 
       "totalIterations", ",", "oscillationParam", ",", "batchesPerEpoch"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"lrFunction", "[", 
        RowBox[{
        "t_", ",", "initialRate_", ",", "decayRate_", ",", "totalIterations_",
          ",", "oscillationParam_", ",", "batchesPerEpoch_"}], "]"}], ":=", 
       RowBox[{"initialRate", " ", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{"decayRate", " ", "t"}], ")"}]}], "/", 
          "totalIterations"}], "]"}], 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"oscillationParam", " ", "t"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"2", "\[Pi]", " ", "batchesPerEpoch"}], ")"}]}], "]"}], 
          "+", 
          RowBox[{"Exp", "[", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"decayRate", " ", "t"}], ")"}]}], "/", 
            "totalIterations"}], "]"}], "+", "0.5"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"initialRate", "=", "initialRate0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"decayRate", "=", "decayRate0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"totalIterations", "=", "totalIterations0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"oscillationParam", "=", "oscillationParam0"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"batchesPerEpoch", "=", "batchesPerEpoch0"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Plot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"lrFunction", "[", 
         RowBox[{
         "t", ",", "initialRate", ",", "decayRate", ",", "totalIterations", 
          ",", "oscillationParam", ",", "batchesPerEpoch"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t", ",", "0", ",", "totalIterations"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Iteration\>\"", ",", "\"\<Learning Rate\>\""}], 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{"Automatic", ",", 
           RowBox[{"{", 
            RowBox[{"0.005", ",", "2.5"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "initialRate0", ",", "0.59", ",", 
       "\"\<Initial learning rate (\[Alpha]\:2080)\>\""}], "}"}], ",", "0", 
     ",", "1", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"decayRate0", ",", "0.6", ",", "\"\<Decay rate (\[Rho])\>\""}], 
      "}"}], ",", "0", ",", "1", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "totalIterations0", ",", "50000", ",", "\"\<Total iterations (T)\>\""}],
       "}"}], ",", "100", ",", "1000000", ",", "1000"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "oscillationParam0", ",", "0.05", ",", 
       "\"\<Oscillation parameter (\[Tau])\>\""}], "}"}], ",", "0", ",", "1", 
     ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "batchesPerEpoch0", ",", "10", ",", 
       "\"\<Number of batches per epoch (b)\>\""}], "}"}], ",", "1", ",", 
     "100", ",", "1"}], "}"}], ",", 
   RowBox[{"ControlPlacement", "->", "Left"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.945116927590809*^9, 3.9451169307676477`*^9}, {
  3.945117386852798*^9, 3.945117464267231*^9}, {3.9451174961892014`*^9, 
  3.945117668849771*^9}},
 CellLabel->"In[43]:=",
 CellID->258835257,ExpressionUUID->"2fb6be01-24bd-4463-afd3-03c783ed98c3"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`batchesPerEpoch0$$ = 
    20, $CellContext`decayRate0$$ = 
    0.5700000000000001, $CellContext`initialRate0$$ = 
    0.63, $CellContext`oscillationParam0$$ = 
    0.08, $CellContext`totalIterations0$$ = 154100, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialRate0$$], 0.59, 
       "Initial learning rate (\[Alpha]\:2080)"}, 0, 1, 0.01, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`decayRate0$$], 0.6, "Decay rate (\[Rho])"}, 0, 1, 
      0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`totalIterations0$$], 50000, "Total iterations (T)"}, 
      100, 1000000, 1000, ControlType -> Manipulator}, {{
       Hold[$CellContext`oscillationParam0$$], 0.05, 
       "Oscillation parameter (\[Tau])"}, 0, 1, 0.01, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`batchesPerEpoch0$$], 10, 
       "Number of batches per epoch (b)"}, 1, 100, 1, ControlType -> 
      Manipulator}}, Typeset`size$$ = {
    375., {103.72458236548485`, 112.76510970923485`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`batchesPerEpoch0$$ = 
        10, $CellContext`decayRate0$$ = 0.6, $CellContext`initialRate0$$ = 
        0.59, $CellContext`oscillationParam0$$ = 
        0.05, $CellContext`totalIterations0$$ = 50000}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`lrFunction$, $CellContext`initialRate$, \
$CellContext`decayRate$, $CellContext`totalIterations$, \
$CellContext`oscillationParam$, $CellContext`batchesPerEpoch$}, \
$CellContext`lrFunction$[
           Pattern[$CellContext`t, 
            Blank[]], 
           Pattern[$CellContext`initialRate, 
            Blank[]], 
           Pattern[$CellContext`decayRate, 
            Blank[]], 
           Pattern[$CellContext`totalIterations, 
            Blank[]], 
           Pattern[$CellContext`oscillationParam, 
            Blank[]], 
           Pattern[$CellContext`batchesPerEpoch, 
            Blank[]]] := $CellContext`initialRate 
          Exp[(-($CellContext`decayRate \
$CellContext`t))/$CellContext`totalIterations] (
           Sin[($CellContext`oscillationParam $CellContext`t)/(2 
             Pi $CellContext`batchesPerEpoch)] + 
           Exp[(-($CellContext`decayRate \
$CellContext`t))/$CellContext`totalIterations] + 
           0.5); $CellContext`initialRate$ = $CellContext`initialRate0$$; \
$CellContext`decayRate$ = $CellContext`decayRate0$$; \
$CellContext`totalIterations$ = $CellContext`totalIterations0$$; \
$CellContext`oscillationParam$ = $CellContext`oscillationParam0$$; \
$CellContext`batchesPerEpoch$ = $CellContext`batchesPerEpoch0$$; Plot[
          $CellContext`lrFunction$[$CellContext`t, $CellContext`initialRate$, \
$CellContext`decayRate$, $CellContext`totalIterations$, \
$CellContext`oscillationParam$, $CellContext`batchesPerEpoch$], \
{$CellContext`t, 0, $CellContext`totalIterations$}, 
          AxesLabel -> {"Iteration", "Learning Rate"}, 
          PlotRange -> {Automatic, {0.005, 2.5}}, ImageSize -> 300]], 
      "Specifications" :> {{{$CellContext`initialRate0$$, 0.59, 
          "Initial learning rate (\[Alpha]\:2080)"}, 0, 1, 
         0.01}, {{$CellContext`decayRate0$$, 0.6, "Decay rate (\[Rho])"}, 0, 
         1, 0.01}, {{$CellContext`totalIterations0$$, 50000, 
          "Total iterations (T)"}, 100, 1000000, 
         1000}, {{$CellContext`oscillationParam0$$, 0.05, 
          "Oscillation parameter (\[Tau])"}, 0, 1, 
         0.01}, {{$CellContext`batchesPerEpoch0$$, 10, 
          "Number of batches per epoch (b)"}, 1, 100, 1}}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{875.584375, {137.84958236548485`, 146.89010970923485`}},
     
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9451176297577267`*^9, 3.9451176691122923`*^9},
 CellLabel->"Out[43]=",
 CellID->1393840099,ExpressionUUID->"60f93097-7a1c-4acb-bfb2-83a8ea504f8c"]
}, Open  ]],

Cell["code 6.11 Hessian-Aware Learning Rate Schedule", "CodeCaption",
 CellChangeTimes->{{3.945117685520281*^9, 3.945117695577235*^9}},
 CellID->1518922417,ExpressionUUID->"ec112c28-f7eb-4f28-a20d-8fb717d054a6"],

Cell["\<\
(* The code creates a Manipulate interface that allows users to visualize and \
interact with the Hessian-Aware Learning Rate schedule based on specific \
parameters. The code defines a piecewise learning rate function, allowing for \
different learning rates to be applied in various epochs of the training \
process. Users can adjust parameters such as the initial learning rate, decay \
factor, starting epoch for decay, ending epoch for decay, and total number of \
epochs. The interface dynamically updates the plotted learning rate decay \
curve based on the chosen parameter values, providing users with insights \
into how changes in these parameters affect the learning rate schedule during \
training: *)\
\>", "comment",
 CellChangeTimes->{{3.945117704247213*^9, 3.94511770706039*^9}},
 CellID->1351990717,ExpressionUUID->"58012de5-9a12-44fb-916b-a5c1cc94f224"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"lr", ",", "decayFunc", ",", "data"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"decayFunc", "[", "t_", "]"}], ":=", 
       RowBox[{
        RowBox[{"decayFunc", "[", 
         RowBox[{"t", "-", "1"}], "]"}], "*", 
        RowBox[{"decayFactor", "^", 
         RowBox[{"(", 
          RowBox[{"1", "/", 
           RowBox[{"(", 
            RowBox[{"endEpoch", "-", "startEpoch"}], ")"}]}], ")"}]}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"lr", "[", 
        RowBox[{
        "t_", ",", "initialLR_", ",", "decayFactor_", ",", "startEpoch_", ",",
          "endEpoch_", ",", "totalEpochs_"}], "]"}], ":=", 
       RowBox[{"Piecewise", "[", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"initialLR", ",", 
            RowBox[{"1", "<=", "t", "<", "startEpoch"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"decayFunc", "[", "t", "]"}], ",", 
            RowBox[{"startEpoch", "<", "t", "<=", "endEpoch"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"decayFactor", "*", "initialLR"}], ",", 
            RowBox[{"endEpoch", "<", "t", "<=", "totalEpochs"}]}], "}"}]}], 
         "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"decayFunc", "[", "startEpoch", "]"}], "=", "initialLR"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"t", ",", 
           RowBox[{"lr", "[", 
            RowBox[{
            "t", ",", "initialLR", ",", "decayFactor", ",", "startEpoch", ",",
              "endEpoch", ",", "totalEpochs"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "1", ",", "totalEpochs"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
       RowBox[{"data", ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1000"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AxesLabel", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<Epoch\>\"", ",", "\"\<Learning Rate\>\""}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", 
        RowBox[{"GridLines", "->", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"startEpoch", ",", "endEpoch"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"initialLR", ",", 
             RowBox[{"decayFactor", "*", "initialLR"}]}], "}"}]}], "}"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Epilog", "->", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Text", "[", 
            RowBox[{"\"\<initialLR\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"startEpoch", ",", "initialLR"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Text", "[", 
            RowBox[{"\"\<decayFactor*initialLR\>\"", ",", 
             RowBox[{"{", 
              RowBox[{"endEpoch", ",", 
               RowBox[{"decayFactor", "*", "initialLR"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1"}], ",", 
               RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
          "}"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "initialLR", ",", "0.7", ",", 
       "\"\<Initial learning rate (initialLR)\>\""}], "}"}], ",", "0", ",", 
     "1", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "decayFactor", ",", "0.28", ",", "\"\<Decay factor (decayFactor)\>\""}],
       "}"}], ",", "0", ",", "1", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "startEpoch", ",", "350", ",", 
       "\"\<Starting epoch for decay (startEpoch)\>\""}], "}"}], ",", "1", 
     ",", 
     RowBox[{"totalEpochs", "-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "endEpoch", ",", "480", ",", 
       "\"\<Ending epoch for decay (endEpoch)\>\""}], "}"}], ",", 
     RowBox[{"startEpoch", "+", "1"}], ",", "totalEpochs", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "totalEpochs", ",", "900", ",", 
       "\"\<Total number of epochs (totalEpochs)\>\""}], "}"}], ",", "10", 
     ",", "1000", ",", "10"}], "}"}], ",", 
   RowBox[{"ControlPlacement", "->", "Left"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.945117712445861*^9, 3.94511798122927*^9}, 
   3.945118063329831*^9, {3.9451181573885736`*^9, 3.9451182017722*^9}},
 CellLabel->"In[49]:=",
 CellID->1527566946,ExpressionUUID->"ea149d92-8204-4864-83af-082b8b8e31c9"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`decayFactor$$ = 
    0.28, $CellContext`endEpoch$$ = 480, $CellContext`initialLR$$ = 
    0.7, $CellContext`startEpoch$$ = 350, $CellContext`totalEpochs$$ = 900, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialLR$$], 0.7, 
       "Initial learning rate (initialLR)"}, 0, 1, 0.01, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`decayFactor$$], 0.28, "Decay factor (decayFactor)"}, 
      0, 1, 0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`startEpoch$$], 350, 
       "Starting epoch for decay (startEpoch)"}, 1, 
      Dynamic[$CellContext`totalEpochs$$ - 1], 1, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`endEpoch$$], 480, 
       "Ending epoch for decay (endEpoch)"}, 
      Dynamic[$CellContext`startEpoch$$ + 1], 
      Dynamic[$CellContext`totalEpochs$$], 1, ControlType -> Manipulator}, {{
       Hold[$CellContext`totalEpochs$$], 900, 
       "Total number of epochs (totalEpochs)"}, 10, 1000, 10, ControlType -> 
      Manipulator}}, Typeset`size$$ = {
    300., {81.78974919693452, 90.83027654068452}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`decayFactor$$ = 
        0.28, $CellContext`endEpoch$$ = 480, $CellContext`initialLR$$ = 
        0.7, $CellContext`startEpoch$$ = 350, $CellContext`totalEpochs$$ = 
        900}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`lr$, $CellContext`decayFunc$, $CellContext`data$}, \
$CellContext`decayFunc$[
           Pattern[$CellContext`t$, 
            Blank[]]] := $CellContext`decayFunc$[$CellContext`t$ - 
            1] $CellContext`decayFactor$$^(
            1/($CellContext`endEpoch$$ - $CellContext`startEpoch$$)); \
$CellContext`lr$[
           Pattern[$CellContext`t$, 
            Blank[]], 
           Pattern[$CellContext`initialLR$, 
            Blank[]], 
           Pattern[$CellContext`decayFactor$, 
            Blank[]], 
           Pattern[$CellContext`startEpoch$, 
            Blank[]], 
           Pattern[$CellContext`endEpoch$, 
            Blank[]], 
           Pattern[$CellContext`totalEpochs$, 
            Blank[]]] := Piecewise[{{$CellContext`initialLR$, 
             Inequality[
             1, LessEqual, $CellContext`t$, Less, $CellContext`startEpoch$]}, {
             $CellContext`decayFunc$[$CellContext`t$], 
             
             Inequality[$CellContext`startEpoch$, Less, $CellContext`t$, 
              LessEqual, $CellContext`endEpoch$]}, {$CellContext`decayFactor$ \
$CellContext`initialLR$, 
             
             Inequality[$CellContext`endEpoch$, Less, $CellContext`t$, 
              LessEqual, $CellContext`totalEpochs$]}}]; \
$CellContext`decayFunc$[$CellContext`startEpoch$$] = $CellContext`initialLR$$; \
$CellContext`data$ = Table[{$CellContext`t, 
            $CellContext`lr$[$CellContext`t, $CellContext`initialLR$$, \
$CellContext`decayFactor$$, $CellContext`startEpoch$$, \
$CellContext`endEpoch$$, $CellContext`totalEpochs$$]}, {$CellContext`t, 
            1, $CellContext`totalEpochs$$}]; 
        ListLinePlot[$CellContext`data$, PlotRange -> {{1, 1000}, {0, 1}}, 
          AxesLabel -> {"Epoch", "Learning Rate"}, PlotRange -> All, 
          GridLines -> {{$CellContext`startEpoch$$, $CellContext`endEpoch$$}, \
{$CellContext`initialLR$$, $CellContext`decayFactor$$ \
$CellContext`initialLR$$}}, Epilog -> {
            Text[
            "initialLR", {$CellContext`startEpoch$$, \
$CellContext`initialLR$$}, {3, 2}], 
            Text[
            "decayFactor*initialLR", {$CellContext`endEpoch$$, \
$CellContext`decayFactor$$ $CellContext`initialLR$$}, {-1, -1}]}]], 
      "Specifications" :> {{{$CellContext`initialLR$$, 0.7, 
          "Initial learning rate (initialLR)"}, 0, 1, 
         0.01}, {{$CellContext`decayFactor$$, 0.28, 
          "Decay factor (decayFactor)"}, 0, 1, 
         0.01}, {{$CellContext`startEpoch$$, 350, 
          "Starting epoch for decay (startEpoch)"}, 1, 
         Dynamic[$CellContext`totalEpochs$$ - 1], 
         1}, {{$CellContext`endEpoch$$, 480, 
          "Ending epoch for decay (endEpoch)"}, 
         Dynamic[$CellContext`startEpoch$$ + 1], 
         Dynamic[$CellContext`totalEpochs$$], 
         1}, {{$CellContext`totalEpochs$$, 900, 
          "Total number of epochs (totalEpochs)"}, 10, 1000, 10}}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{810.63125, {115.91474919693452`, 124.95527654068452`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.945117981526855*^9, 3.945118067145344*^9, {3.94511817632524*^9, 
   3.94511820222863*^9}},
 CellLabel->"Out[49]=",
 CellID->1500192633,ExpressionUUID->"19aed961-0bb3-43bc-a1d9-a34ee05fec44"]
}, Open  ]],

Cell["code 6.12 Gradient Descent with Momentum (1D)", "CodeCaption",
 CellChangeTimes->{{3.9451182449434843`*^9, 3.945118255095841*^9}},
 CellID->1745002770,ExpressionUUID->"95856c6b-99e3-4908-9213-1729a5e7518a"],

Cell["\<\
(* The code showcases the implementation and visualization of gradient \
descent with momentum for optimizing the function f(x)=x^2*sin(x). The code \
defines the function and its derivative, then employs a gradient descent \
algorithm with momentum to iteratively update the value of x towards the \
minimum of the function. Through interactive controls, users can adjust \
parameters such as the initial point, number of steps, learning rate, and \
momentum parameter, allowing them to observe how different settings affect \
the optimization process, convergence speed, and trajectory: *)\
\>", "comment",
 CellChangeTimes->{{3.945118262789714*^9, 3.945118272426339*^9}},
 CellID->1763915421,ExpressionUUID->"e14ad006-1ebf-4b15-95dd-434bd390365f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"targetFunction", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"x", "^", "2"}], "*", 
    RowBox[{"Sin", "[", "x", "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"functionDerivative", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "2"}], " ", 
     RowBox[{"Cos", "[", "x", "]"}]}], "+", 
    RowBox[{"2", " ", "x", " ", 
     RowBox[{"Sin", "[", "x", "]"}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gradientDescentWithMomentum", "[", 
    RowBox[{
    "func_", ",", "funcDerivative_", ",", "initialPoint_", ",", 
     "learningRate_", ",", "momentumParameter_", ",", "iterations_"}], "]"}], 
   ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "=", "initialPoint"}], ",", 
       RowBox[{"v", "=", "0"}], ",", 
       RowBox[{"path", "=", 
        RowBox[{"{", "initialPoint", "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", "\[IndentingNewLine]", 
        RowBox[{"i", "<=", "iterations"}], ",", "\[IndentingNewLine]", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"v", "=", 
          RowBox[{
           RowBox[{"momentumParameter", "*", "v"}], "-", 
           RowBox[{"learningRate", "*", 
            RowBox[{"funcDerivative", "[", "x", "]"}]}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"x", "=", 
          RowBox[{"x", "+", "v"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"path", ",", "x"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "path", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"path", "=", 
     RowBox[{"gradientDescentWithMomentum", "[", 
      RowBox[{
      "targetFunction", ",", "functionDerivative", ",", "initialPoint", ",", 
       "learningRate", ",", "momentumParameter", ",", "steps"}], "]"}]}], ";",
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"targetFunction", "[", "x", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "5"}], ",", "9"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Epilog", "->", 
       RowBox[{"{", 
        RowBox[{"Purple", ",", 
         RowBox[{"PointSize", "[", "0.02", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"Thread", "[", 
           RowBox[{"{", 
            RowBox[{"path", ",", 
             RowBox[{"targetFunction", "/@", "path"}]}], "}"}], "]"}], 
          "]"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"PlotLabel", "->", "\"\<Gradient Descent with Momentum\>\""}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<f(x)\>\""}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "->", "300"}]}], "\[IndentingNewLine]", "]"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"initialPoint", ",", 
       RowBox[{"-", "5"}], ",", "\"\<Initial Point\>\""}], "}"}], ",", 
     RowBox[{"-", "6"}], ",", "6", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"steps", ",", "1", ",", "\"\<Steps\>\""}], "}"}], ",", "1", ",",
      "50", ",", "1", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"learningRate", ",", "0.01", ",", "\"\<Learning Rate\>\""}], 
      "}"}], ",", "0.001", ",", "0.1", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "momentumParameter", ",", "0.95", ",", "\"\<Momentum Parameter\>\""}], 
      "}"}], ",", "0.1", ",", "0.99", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.94511827721138*^9, 3.9451184974708652`*^9}},
 CellLabel->"In[55]:=",
 CellID->716681717,ExpressionUUID->"69d99404-0d2e-48c2-ab63-74254ae8faa7"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`initialPoint$$ = -5, \
$CellContext`learningRate$$ = 0.01, $CellContext`momentumParameter$$ = 
    0.95, $CellContext`steps$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialPoint$$], -5, "Initial Point"}, -6, 6, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`steps$$], 1, "Steps"}, 1, 50, 1, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`learningRate$$], 0.01, "Learning Rate"}, 0.001, 0.1, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`momentumParameter$$], 0.95, "Momentum Parameter"}, 
      0.1, 0.99, ControlType -> Manipulator}}, Typeset`size$$ = {
    375., {125.76125856927808`, 134.80178591302808`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`initialPoint$$ = -5, \
$CellContext`learningRate$$ = 0.01, $CellContext`momentumParameter$$ = 
        0.95, $CellContext`steps$$ = 1}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, 
      "Body" :> ($CellContext`path = \
$CellContext`gradientDescentWithMomentum[$CellContext`targetFunction, \
$CellContext`functionDerivative, $CellContext`initialPoint$$, \
$CellContext`learningRate$$, $CellContext`momentumParameter$$, \
$CellContext`steps$$]; Plot[
         $CellContext`targetFunction[$CellContext`x], {$CellContext`x, -5, 9},
          Epilog -> {Purple, 
           PointSize[0.02], 
           Point[
            Thread[{$CellContext`path, 
              Map[$CellContext`targetFunction, $CellContext`path]}]]}, 
         PlotLabel -> "Gradient Descent with Momentum", 
         AxesLabel -> {"x", "f(x)"}, ImageSize -> 300]), 
      "Specifications" :> {{{$CellContext`initialPoint$$, -5, 
          "Initial Point"}, -6, 6, Appearance -> 
         "Labeled"}, {{$CellContext`steps$$, 1, "Steps"}, 1, 50, 1, 
         Appearance -> 
         "Labeled"}, {{$CellContext`learningRate$$, 0.01, "Learning Rate"}, 
         0.001, 0.1, Appearance -> 
         "Labeled"}, {{$CellContext`momentumParameter$$, 0.95, 
          "Momentum Parameter"}, 0.1, 0.99, Appearance -> "Labeled"}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{
      466.7177001953125, {229.76125856927808`, 238.80178591302808`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9451184979569397`*^9},
 CellLabel->"Out[58]=",
 CellID->200836744,ExpressionUUID->"515f3afa-5421-4398-a121-2a1f349cfa70"]
}, Open  ]],

Cell["code 6.13 Gradient Descent with Momentum (2D)", "CodeCaption",
 CellChangeTimes->{{3.9451185071333*^9, 3.9451185191807127`*^9}},
 CellID->1766346971,ExpressionUUID->"7ca1ffa3-6718-45a5-bd8c-81b3b2c8106a"],

Cell["\<\
(* The code defines a target function f(x,y)=x^2*sin(x)+y^2*sin(y) and its \
gradient, and implements gradient descent with momentum for optimization. It \
allows interactive manipulation of parameters such as the initial point, \
number of iterations, learning rate, and momentum parameter. The optimization \
process is visualized through a contour plot of the target function overlaid \
with the optimization path and step direction arrows. The primary goal is to \
demonstrate the convergence of the gradient descent algorithm with momentum \
towards the minimum point of the target function, providing an intuitive \
understanding of the optimization process: *)\
\>", "comment",
 CellChangeTimes->{{3.9451185268380404`*^9, 3.9451185298409147`*^9}},
 CellID->1454056616,ExpressionUUID->"0903e79b-4b90-453e-aa22-64cb8886c632"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"targetFunction", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "2"}], "*", 
     RowBox[{"Sin", "[", "x", "]"}]}], "+", 
    RowBox[{
     RowBox[{"y", "^", "2"}], "*", 
     RowBox[{"Sin", "[", "y", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"functionGradient", "[", 
     RowBox[{"x_", ",", "y_"}], "]"}], "=", 
    RowBox[{"Grad", "[", 
     RowBox[{
      RowBox[{"targetFunction", "[", 
       RowBox[{"x", ",", "y"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gradientDescentWithMomentum", "[", 
     RowBox[{
     "func_", ",", "grad_", ",", "initialPoint_", ",", "learningRate_", ",", 
      "momentumParameter_", ",", "iterations_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "=", "initialPoint"}], ",", 
        RowBox[{"v", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", 
        RowBox[{"path", "=", 
         RowBox[{"{", "initialPoint", "}"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", "\[IndentingNewLine]", 
         RowBox[{"i", "<=", "iterations"}], ",", "\[IndentingNewLine]", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"v", "=", 
           RowBox[{
            RowBox[{"momentumParameter", "*", "v"}], "-", 
            RowBox[{"learningRate", "*", 
             RowBox[{"grad", "@@", "x"}]}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"x", "=", 
           RowBox[{"x", "+", "v"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"path", ",", "x"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "path", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"path", ",", "minPoint"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"path", "=", 
       RowBox[{"gradientDescentWithMomentum", "[", 
        RowBox[{
        "targetFunction", ",", "functionGradient", ",", "initialPoint", ",", 
         "learningRate", ",", "momentumParameter", ",", "iterations"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"stepArrows", "=", 
       RowBox[{"Arrow", "/@", 
        RowBox[{"Partition", "[", 
         RowBox[{"path", ",", "2", ",", "1"}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Show", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ContourPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"targetFunction", "[", 
           RowBox[{"x", ",", "y"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Contours", "->", "10"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ContourStyle", "->", 
           RowBox[{"{", "White", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"ClippingStyle", "->", "Automatic"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ColorFunction", "->", "\"\<BlueGreenYellow\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "->", "300"}], ",", "\[IndentingNewLine]", 
          RowBox[{"PlotLegends", "->", "Automatic"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "PlotLabel", "->", "\"\<Gradient Descent with Momentum\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"AspectRatio", "->", "Automatic"}]}], "\[IndentingNewLine]",
          "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"Blue", ",", "\[IndentingNewLine]", 
           RowBox[{"PointSize", "[", "0.015", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Point", "[", "path", "]"}], ",", "\[IndentingNewLine]", 
           "Purple", ",", "\[IndentingNewLine]", "stepArrows"}], 
          "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"initialPoint", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "5.3"}], ",", "7.6"}], "}"}], ",", 
       "\"\<Initial Point\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "10"}], ",", 
       RowBox[{"-", "10"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}], ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"iterations", ",", "1", ",", "\"\<Iterations\>\""}], "}"}], ",",
      "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"learningRate", ",", "0.001", ",", "\"\<Learning Rate\>\""}], 
      "}"}], ",", "0.001", ",", "0.01", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "momentumParameter", ",", "0.99", ",", "\"\<Momentum Parameter\>\""}], 
      "}"}], ",", "0.1", ",", "0.99", ",", 
     RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"TrackedSymbols", ":>", 
    RowBox[{"{", 
     RowBox[{
     "initialPoint", ",", "iterations", ",", "learningRate", ",", 
      "momentumParameter"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellChangeTimes->{{3.94511854465436*^9, 3.945118848808864*^9}},
 CellLabel->"In[70]:=",
 CellID->1616119402,ExpressionUUID->"d242682b-2090-4ecc-82a9-3346a9b0278f"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`initialPoint$$ = {6.1000000000000005`, 
    3.400000000000001}, $CellContext`iterations$$ = 
    13, $CellContext`learningRate$$ = 
    0.00504, $CellContext`momentumParameter$$ = 0.91, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`initialPoint$$], {-5.3, 7.6}, 
       "Initial Point"}, {-10, -10}, {10, 10}, ControlType -> Slider2D}, {{
       Hold[$CellContext`iterations$$], 1, "Iterations"}, 1, 100, 1, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`learningRate$$], 0.001, "Learning Rate"}, 0.001, 
      0.01, ControlType -> Manipulator}, {{
       Hold[$CellContext`momentumParameter$$], 0.99, "Momentum Parameter"}, 
      0.1, 0.99, ControlType -> Manipulator}}, Typeset`size$$ = {
    455.7472514822034, {187.4500189887153, 196.49054633246524`}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`initialPoint$$ = {-5.3, 
         7.6}, $CellContext`iterations$$ = 1, $CellContext`learningRate$$ = 
        0.001, $CellContext`momentumParameter$$ = 0.99}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`path$, $CellContext`minPoint$}, $CellContext`path$ = \
$CellContext`gradientDescentWithMomentum[$CellContext`targetFunction, \
$CellContext`functionGradient, $CellContext`initialPoint$$, \
$CellContext`learningRate$$, $CellContext`momentumParameter$$, \
$CellContext`iterations$$]; $CellContext`stepArrows = Map[Arrow, 
           Partition[$CellContext`path$, 2, 1]]; Show[
          ContourPlot[
           $CellContext`targetFunction[$CellContext`x, $CellContext`y], \
{$CellContext`x, -10, 10}, {$CellContext`y, -10, 10}, Contours -> 10, 
           ContourStyle -> {White}, ClippingStyle -> Automatic, ColorFunction -> 
           "BlueGreenYellow", ImageSize -> 300, PlotLegends -> Automatic, 
           PlotLabel -> "Gradient Descent with Momentum", AspectRatio -> 
           Automatic], 
          Graphics[{Blue, 
            PointSize[0.015], 
            Point[$CellContext`path$], Purple, $CellContext`stepArrows}]]], 
      "Specifications" :> {{{$CellContext`initialPoint$$, {-5.3, 7.6}, 
          "Initial Point"}, {-10, -10}, {10, 10}, Appearance -> 
         "Labeled"}, {{$CellContext`iterations$$, 1, "Iterations"}, 1, 100, 1,
          Appearance -> 
         "Labeled"}, {{$CellContext`learningRate$$, 0.001, "Learning Rate"}, 
         0.001, 0.01, Appearance -> 
         "Labeled"}, {{$CellContext`momentumParameter$$, 0.99, 
          "Momentum Parameter"}, 0.1, 0.99, Appearance -> "Labeled"}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`initialPoint$$, \
$CellContext`iterations$$, $CellContext`learningRate$$, \
$CellContext`momentumParameter$$}}, "DefaultOptions" :> {}],
     ImageSizeCache->{
      510.8722514822034, {335.94977484809027`, 344.99030219184027`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.945118849916819*^9},
 CellLabel->"Out[73]=",
 CellID->2034502772,ExpressionUUID->"359265b9-41d4-46b2-9e4d-c4b06fa06bcf"]
}, Open  ]],

Cell["code 6.14 Nesterov Accelerated Gradient Descent", "CodeCaption",
 CellChangeTimes->{{3.945118885816474*^9, 3.945118897424241*^9}},
 CellID->1653461470,ExpressionUUID->"d7f8a3a3-6597-4ade-8579-602725e70b4a"],

Cell["\<\
(* The code implements an interactive visualization of the Nesterov \
Accelerated Gradient Descent optimization algorithm. It defines an objective \
function f(x1,x2)=sin(x1)+cos(x2) and its gradient, allowing users to adjust \
parameters such as learning rate, momentum, number of iterations, and initial \
guess through interactive controls. Within a module, the Nesterov Accelerated \
Gradient Descent algorithm is executed, updating parameters iteratively and \
storing the trajectory of parameter updates. The visualization consists of a \
contour plot of the objective function overlaid with the trajectory of \
parameter updates, enabling users to observe how the optimization algorithm \
progresses towards the function\[CloseCurlyQuote]s minimum, with arrows \
indicating the direction of parameter updates at each iteration: *)\
\>", "comment",
 CellChangeTimes->{{3.945118907250814*^9, 3.945118909778166*^9}},
 CellID->603703084,ExpressionUUID->"fbc022e7-317d-4162-a7cd-69f3e5de62c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "f", ",", "gradient", ",", "learningRate", ",", "momentum", ",", 
       "numIterations", ",", "initialGuess", ",", "x", ",", "v", ",", 
       "trajectory"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"f", "[", 
        RowBox[{"x1_", ",", "x2_"}], "]"}], "=", 
       RowBox[{
        RowBox[{"Sin", "[", "x1", "]"}], "+", 
        RowBox[{"Cos", "[", "x2", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"gradient", "[", 
        RowBox[{"x1_", ",", "x2_"}], "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"x1", ",", "x2"}], "]"}], ",", "x1"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{
           RowBox[{"f", "[", 
            RowBox[{"x1", ",", "x2"}], "]"}], ",", "x2"}], "]"}]}], "}"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"learningRate", "=", "lr"}], ";", "\[IndentingNewLine]", 
      RowBox[{"momentum", "=", "m"}], ";", "\[IndentingNewLine]", 
      RowBox[{"numIterations", "=", "n"}], ";", "\[IndentingNewLine]", 
      RowBox[{"initialGuess", "=", 
       RowBox[{"{", 
        RowBox[{"x0", ",", "y0"}], "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"x", "=", "initialGuess"}], ";", "\[IndentingNewLine]", 
      RowBox[{"v", "=", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"trajectory", "=", 
       RowBox[{"{", "x", "}"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"lookaheadParams", "=", 
          RowBox[{"x", "+", 
           RowBox[{"momentum", "*", "v"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"grad", "=", 
          RowBox[{"gradient", "@@", "lookaheadParams"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"v", "=", 
          RowBox[{
           RowBox[{"momentum", "*", "v"}], "-", 
           RowBox[{"learningRate", "*", "grad"}]}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"x", "=", 
          RowBox[{"x", "+", "v"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"trajectory", ",", "x"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numIterations"}], "}"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Plot3D", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"f", "[", 
           RowBox[{"x1", ",", "x2"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"x1", ",", 
            RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"x2", ",", 
            RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Mesh", "->", "None"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "->", "300"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ColorFunction", "->", "\"\<BlueGreenYellow\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "PlotLabel", "->", 
           "\"\<Nesterov Accelerated Gradient Descent Trajectory\>\""}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ContourPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"f", "[", 
           RowBox[{"x1", ",", "x2"}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"x1", ",", 
            RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"x2", ",", 
            RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Contours", "->", "10"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ContourStyle", "->", 
           RowBox[{"{", "White", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"ClippingStyle", "->", "Automatic"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ColorFunction", "->", "\"\<BlueGreenYellow\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "->", "300"}], ",", "\[IndentingNewLine]", 
          RowBox[{"PlotLegends", "->", "Automatic"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Epilog", "->", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"Red", ",", "\[IndentingNewLine]", 
             RowBox[{"PointSize", "[", "Medium", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Point", "[", "trajectory", "]"}], ",", 
             "\[IndentingNewLine]", "Blue", ",", "\[IndentingNewLine]", 
             RowBox[{"Arrowheads", "[", "0.02", "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Table", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Arrow", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"trajectory", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"trajectory", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", "+", "1"}], "]"}], "]"}]}], "}"}], "]"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"{", 
                RowBox[{"i", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "trajectory", "]"}], "-", "1"}]}], 
                "}"}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"FrameLabel", "->", 
           RowBox[{"{", 
            RowBox[{"\"\<x1\>\"", ",", "\"\<x2\>\""}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "PlotLabel", "->", 
           "\"\<Nesterov Accelerated Gradient Descent Trajectory\>\""}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"lr", ",", "0.1", ",", "\"\<Learning Rate\>\""}], "}"}], ",", 
     "0.01", ",", "1", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "0.9", ",", "\"\<Momentum\>\""}], "}"}], ",", "0", 
     ",", "1", ",", "0.01"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<Number of Iterations\>\""}], "}"}], 
     ",", "1", ",", "50", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x0", ",", "1.5", ",", "\"\<Initial x1\>\""}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "0.1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "0.5"}], ",", "\"\<Initial x2\>\""}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "0.1"}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.945118915279902*^9, 3.9451192880961723`*^9}},
 CellLabel->"In[75]:=",
 CellID->121115456,ExpressionUUID->"402c8c03-3d70-4dfc-9959-ceb4faea08f2"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`lr$$ = 0.01, $CellContext`m$$ = 
    0.67, $CellContext`n$$ = 1, $CellContext`x0$$ = 
    3.0000000000000004`, $CellContext`y0$$ = -1.7999999999999998`, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`lr$$], 0.1, "Learning Rate"}, 0.01, 1, 0.01, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`m$$], 0.9, "Momentum"}, 0, 1, 0.01, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`n$$], 1, "Number of Iterations"}, 1, 50, 1, 
      ControlType -> Manipulator}, {{
       Hold[$CellContext`x0$$], 1.5, "Initial x1"}, -4, 4, 0.1, ControlType -> 
      Manipulator}, {{
       Hold[$CellContext`y0$$], -0.5, "Initial x2"}, -4, 4, 0.1, ControlType -> 
      Manipulator}}, Typeset`size$$ = {
    469.27961206597223`, {616.2287391252792, 196.87679685097373`}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`lr$$ = 0.1, $CellContext`m$$ = 
        0.9, $CellContext`n$$ = 1, $CellContext`x0$$ = 
        1.5, $CellContext`y0$$ = -0.5}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`f$, $CellContext`gradient$, \
$CellContext`learningRate$, $CellContext`momentum$, \
$CellContext`numIterations$, $CellContext`initialGuess$, $CellContext`x$, \
$CellContext`v$, $CellContext`trajectory$}, $CellContext`f$[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] = 
         Sin[$CellContext`x1] + Cos[$CellContext`x2]; $CellContext`gradient$[
           Pattern[$CellContext`x1$, 
            Blank[]], 
           Pattern[$CellContext`x2$, 
            Blank[]]] = {
           D[
            $CellContext`f$[$CellContext`x1$, $CellContext`x2$], \
$CellContext`x1$], 
           D[
            $CellContext`f$[$CellContext`x1$, $CellContext`x2$], \
$CellContext`x2$]}; $CellContext`learningRate$ = $CellContext`lr$$; \
$CellContext`momentum$ = $CellContext`m$$; $CellContext`numIterations$ = \
$CellContext`n$$; $CellContext`initialGuess$ = {$CellContext`x0$$, \
$CellContext`y0$$}; $CellContext`x$ = $CellContext`initialGuess$; \
$CellContext`v$ = {0, 0}; $CellContext`trajectory$ = {$CellContext`x$}; 
        Do[$CellContext`lookaheadParams = $CellContext`x$ + \
$CellContext`momentum$ $CellContext`v$; $CellContext`grad = 
           Apply[$CellContext`gradient$, $CellContext`lookaheadParams]; \
$CellContext`v$ = $CellContext`momentum$ $CellContext`v$ - \
$CellContext`learningRate$ $CellContext`grad; $CellContext`x$ = \
$CellContext`x$ + $CellContext`v$; 
          AppendTo[$CellContext`trajectory$, $CellContext`x$], \
{$CellContext`i, $CellContext`numIterations$}]; {
          Plot3D[
           $CellContext`f$[$CellContext`x1, $CellContext`x2], \
{$CellContext`x1, -5, 5}, {$CellContext`x2, -5, 5}, PlotRange -> All, Mesh -> 
           None, ImageSize -> 300, ColorFunction -> "BlueGreenYellow", 
           PlotLabel -> "Nesterov Accelerated Gradient Descent Trajectory"], 
          ContourPlot[
           $CellContext`f$[$CellContext`x1, $CellContext`x2], \
{$CellContext`x1, -5, 5}, {$CellContext`x2, -5, 5}, PlotRange -> All, 
           Contours -> 10, ContourStyle -> {White}, ClippingStyle -> 
           Automatic, ColorFunction -> "BlueGreenYellow", ImageSize -> 300, 
           PlotLegends -> Automatic, Epilog -> {Red, 
             PointSize[Medium], 
             Point[$CellContext`trajectory$], Blue, 
             Arrowheads[0.02], 
             Table[
              Arrow[{
                Part[$CellContext`trajectory$, $CellContext`i], 
                
                Part[$CellContext`trajectory$, $CellContext`i + 
                 1]}], {$CellContext`i, Length[$CellContext`trajectory$] - 
               1}]}, FrameLabel -> {"x1", "x2"}, PlotLabel -> 
           "Nesterov Accelerated Gradient Descent Trajectory"]}], 
      "Specifications" :> {{{$CellContext`lr$$, 0.1, "Learning Rate"}, 0.01, 
         1, 0.01}, {{$CellContext`m$$, 0.9, "Momentum"}, 0, 1, 
         0.01}, {{$CellContext`n$$, 1, "Number of Iterations"}, 1, 50, 
         1}, {{$CellContext`x0$$, 1.5, "Initial x1"}, -4, 4, 
         0.1}, {{$CellContext`y0$$, -0.5, "Initial x2"}, -4, 4, 0.1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{724.25, {522.6575043162514, 531.6980316600014}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.945119042193104*^9, 3.9451192883998747`*^9},
 CellLabel->"Out[75]=",
 CellID->1644865722,ExpressionUUID->"65028c38-8079-41c7-886b-1ced70c0b94a"]
}, Open  ]],

Cell["code 6.15 AdaGrad Optimization", "CodeCaption",
 CellChangeTimes->{{3.945119319613447*^9, 3.9451193273459167`*^9}},
 CellID->1802546135,ExpressionUUID->"9946d66c-04c7-425f-8bd9-89bada3f6a5e"],

Cell["\<\
(* The code implements AdaGrad optimization to optimize the objective \
function sin(x)+cos(y). It defines functions to compute the gradient of the \
objective function, as well as the AdaGrad optimization procedure itself. \
Through a Manipulate interface, users can interactively set initial variable \
values, learning rate, epsilon, and the maximum number of iterations, while \
visualizing the trajectory of the optimization process on a contour plot of \
the objective function: *)\
\>", "comment",
 CellChangeTimes->{{3.945119335943655*^9, 3.945119344905051*^9}},
 CellID->853898530,ExpressionUUID->"789d8881-8aa8-4717-8ae6-a5898ef42f5a"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{960, 1027},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->"RDS-book.nb",
ExpressionUUID->"8861bace-5584-420b-8e0c-c51fd7c6d3a1"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 4243, 105, 130, "Text",ExpressionUUID->"67aab6c7-b186-4fbc-a04a-683b7453f682",
 CellID->912160115],
Cell[CellGroupData[{
Cell[4822, 129, 419, 5, 174, "Section",ExpressionUUID->"4fba7fed-0087-40ae-a263-55e5b8fe4d49",
 CellID->622795188],
Cell[5244, 136, 1114, 22, 190, "Note",ExpressionUUID->"2c93b86d-f330-4fb3-b295-cb7eba6efbe1",
 CellID->1196547533],
Cell[6361, 160, 913, 14, 281, "Text",ExpressionUUID->"9c04cc97-43e3-4730-b5bc-dcc954aa4d36",
 CellID->1852358015],
Cell[7277, 176, 928, 14, 281, "Text",ExpressionUUID->"32af0e9e-cff1-4546-a556-342119b1ebb8",
 CellID->1958808618],
Cell[8208, 192, 1337, 19, 429, "Text",ExpressionUUID->"725bc243-34ac-4fcd-b39b-1aa31711dd8e",
 CellID->1222639042],
Cell[9548, 213, 885, 13, 281, "Text",ExpressionUUID->"67459e35-aac0-4cfb-8540-9078cbe169d7",
 CellID->917494872],
Cell[10436, 228, 989, 15, 281, "Text",ExpressionUUID->"91cd7dcc-9710-4dd3-8837-22795265f2b6",
 CellID->1928013366],
Cell[11428, 245, 1075, 20, 163, "Text",ExpressionUUID->"a4559d79-a52b-4b71-a36f-d86b9c10f7a7",
 CellID->1252636148],
Cell[12506, 267, 1199, 17, 370, "Text",ExpressionUUID->"dfbe4eb3-47cb-406a-8360-736ec78ad9b5",
 CellID->436130983],
Cell[13708, 286, 2012, 34, 458, "Text",ExpressionUUID->"45823881-5d48-42ba-809e-19140bd18048",
 CellID->1066240197],
Cell[15723, 322, 795, 13, 193, "Text",ExpressionUUID->"56c49089-eb54-4933-bd67-2fb558a83506",
 CellID->1061686974],
Cell[16521, 337, 330, 6, 75, "Text",ExpressionUUID->"0e588cdb-56e4-44cc-b5f2-f65b8f4b83b2",
 CellID->1953244382],
Cell[CellGroupData[{
Cell[16876, 347, 250, 4, 96, "Subsection",ExpressionUUID->"cdc48c09-4572-4914-9a2a-5cddfbf41931",
 CellID->1037312285],
Cell[17129, 353, 232, 3, 65, "CodeCaption",ExpressionUUID->"04f12eb4-2e31-4c4d-b128-1d0e14284dd0",
 CellID->621517190],
Cell[17364, 358, 751, 11, 225, "comment",ExpressionUUID->"5a9ecda5-3caf-4d78-a6da-5c00ed3b5716",
 CellID->16470362],
Cell[CellGroupData[{
Cell[18140, 373, 2579, 60, 543, "Input",ExpressionUUID->"b10f9d9d-6008-4bcf-ba2a-cb10f100c6ed",
 CellID->133249425],
Cell[20722, 435, 3126, 62, 393, "Output",ExpressionUUID->"39908a1c-e068-49fd-ab43-dfcf716fef53",
 CellID->2048253551]
}, Open  ]],
Cell[23863, 500, 241, 3, 65, "CodeCaption",ExpressionUUID->"9503363b-a30e-424d-8322-5c41958f92cc",
 CellID->834570247],
Cell[24107, 505, 461, 7, 144, "comment",ExpressionUUID->"1c3d77ec-eebf-4a12-bfdf-ca3432e0620b",
 CellID->2002736252],
Cell[CellGroupData[{
Cell[24593, 516, 2658, 66, 520, "Input",ExpressionUUID->"231891b5-431a-4439-8dbf-ef9f1d27f667",
 CellID->760592262],
Cell[27254, 584, 3087, 60, 435, "Output",ExpressionUUID->"9536af7f-6c59-4614-9771-360fe01239f2",
 CellID->784067528]
}, Open  ]],
Cell[30356, 647, 242, 3, 65, "CodeCaption",ExpressionUUID->"e056f3d2-c2e9-4c49-9055-d527721c0ba1",
 CellID->1159324126],
Cell[30601, 652, 488, 8, 144, "comment",ExpressionUUID->"0072c5ca-69c4-4a94-b834-4483368970fd",
 CellID->1240756433],
Cell[CellGroupData[{
Cell[31114, 664, 2659, 65, 543, "Input",ExpressionUUID->"f741ef93-6f8a-4182-a659-db9cfe8ecde6",
 CellID->237913771],
Cell[33776, 731, 3188, 61, 435, "Output",ExpressionUUID->"f8a9cd2d-7502-40ad-88bb-083c9e458434",
 CellID->1810917716]
}, Open  ]],
Cell[36979, 795, 265, 3, 65, "CodeCaption",ExpressionUUID->"f31b30c1-cb82-4fa6-82c5-14c575a29c38",
 CellID->1955807528],
Cell[37247, 800, 499, 8, 144, "comment",ExpressionUUID->"476bd5eb-fc93-4628-9c2a-58ea1cad1d44",
 CellID->1410798970],
Cell[CellGroupData[{
Cell[37771, 812, 3803, 99, 637, "Input",ExpressionUUID->"be384573-2cc6-4d03-9c91-50ee6e204c5a",
 CellID->965875613],
Cell[41577, 913, 3795, 71, 393, "Output",ExpressionUUID->"d457eaf3-e5a2-461e-9ac9-2c7ca042ec4f",
 CellID->549243851]
}, Open  ]],
Cell[45387, 987, 241, 3, 65, "CodeCaption",ExpressionUUID->"ebfcdebf-2566-45c8-8412-8af4b9c031e9",
 CellID->1256688951],
Cell[45631, 992, 806, 12, 252, "comment",ExpressionUUID->"47e4b08c-25e8-4ef6-abf5-a449b5a6a4c8",
 CellID->1602674610],
Cell[CellGroupData[{
Cell[46462, 1008, 3175, 78, 660, "Input",ExpressionUUID->"1de7dee8-7219-487a-beb1-b76c74acfe4f",
 CellID->2027549323],
Cell[49640, 1088, 3612, 67, 447, "Output",ExpressionUUID->"5c505344-c49e-4aeb-af58-c61923640be2",
 CellID->173389460]
}, Open  ]],
Cell[53267, 1158, 256, 3, 65, "CodeCaption",ExpressionUUID->"b6e56348-7654-4c5a-83b1-d119ce7f71ff",
 CellID->21345241],
Cell[53526, 1163, 918, 13, 306, "comment",ExpressionUUID->"5a18c0ef-572d-4b96-9d95-f4565a69f586",
 CellID->1376829416],
Cell[CellGroupData[{
Cell[54469, 1180, 6406, 157, 1108, "Input",ExpressionUUID->"b2ba42e6-f58c-4bdb-b946-5d6a4e6a216c",
 CellID->1436264831],
Cell[60878, 1339, 179193, 3140, 235, "Output",ExpressionUUID->"e521dac2-636a-4c42-bca1-fec377e9edb3",
 CellID->298497383]
}, Open  ]],
Cell[240086, 4482, 247, 3, 65, "CodeCaption",ExpressionUUID->"589425ac-a2d2-4ad5-b17f-220f390b749e",
 CellID->1806503720],
Cell[240336, 4487, 1187, 17, 388, "comment",ExpressionUUID->"fdf420b5-6b61-4763-92b0-32363589589b",
 CellID->793847424],
Cell[CellGroupData[{
Cell[241548, 4508, 4438, 111, 707, "Input",ExpressionUUID->"8f6293a2-6304-425f-9f00-b549f36966c0",
 CellID->1599210417],
Cell[245989, 4621, 3513, 66, 484, "Output",ExpressionUUID->"e871eaf8-2698-4b71-99a2-e90a47e8d824",
 CellID->247623110]
}, Open  ]],
Cell[249517, 4690, 214, 2, 65, "CodeCaption",ExpressionUUID->"1952f8c2-33d0-4caf-9481-ab57861b0488",
 CellID->1749095697],
Cell[249734, 4694, 939, 14, 306, "comment",ExpressionUUID->"b2a11ab8-e093-4f28-a7e6-e6bc6ad63cae",
 CellID->720288178],
Cell[CellGroupData[{
Cell[250698, 4712, 3503, 89, 520, "Input",ExpressionUUID->"186ee039-3bf2-4b9a-9249-7b5590282de0",
 CellID->178492711],
Cell[254204, 4803, 3847, 74, 460, "Output",ExpressionUUID->"be37f9ba-278d-45a5-b6bd-e2fcc7ff0cf5",
 CellID->943230992]
}, Open  ]],
Cell[258066, 4880, 214, 2, 65, "CodeCaption",ExpressionUUID->"4aac9c57-9261-4bda-b0a0-d79d878600b9",
 CellID->159000390],
Cell[258283, 4884, 779, 11, 252, "comment",ExpressionUUID->"1da31738-b434-4a99-bf2c-fabb228f1bf7",
 CellID->1765035942],
Cell[CellGroupData[{
Cell[259087, 4899, 3752, 107, 661, "Input",ExpressionUUID->"936ac13f-f1fa-4340-a846-6216148fa282",
 CellID->1503570273],
Cell[262842, 5008, 18156, 367, 215, "Output",ExpressionUUID->"f77bdb4c-49ca-4778-bd9c-b71b3e814ccf",
 CellID->67452524]
}, Open  ]],
Cell[281013, 5378, 215, 2, 65, "CodeCaption",ExpressionUUID->"db684eeb-2e6c-4a39-aa16-b95b0b160f46",
 CellID->278932810],
Cell[281231, 5382, 902, 13, 306, "comment",ExpressionUUID->"b5c788f3-b1f3-4f5e-8054-616ff6bde6f1",
 CellID->456315950],
Cell[CellGroupData[{
Cell[282158, 5399, 4298, 108, 777, "Input",ExpressionUUID->"2fb6be01-24bd-4463-afd3-03c783ed98c3",
 CellID->258835257],
Cell[286459, 5509, 5026, 97, 310, "Output",ExpressionUUID->"60f93097-7a1c-4acb-bfb2-83a8ea504f8c",
 CellID->1393840099]
}, Open  ]],
Cell[291500, 5609, 211, 2, 65, "CodeCaption",ExpressionUUID->"ec112c28-f7eb-4f28-a20d-8fb717d054a6",
 CellID->1518922417],
Cell[291714, 5613, 882, 13, 279, "comment",ExpressionUUID->"58012de5-9a12-44fb-916b-a5c1cc94f224",
 CellID->1351990717],
Cell[CellGroupData[{
Cell[292621, 5630, 5655, 144, 965, "Input",ExpressionUUID->"ea149d92-8204-4864-83af-082b8b8e31c9",
 CellID->1527566946],
Cell[298279, 5776, 5808, 115, 267, "Output",ExpressionUUID->"19aed961-0bb3-43bc-a1d9-a34ee05fec44",
 CellID->1500192633]
}, Open  ]],
Cell[304102, 5894, 212, 2, 65, "CodeCaption",ExpressionUUID->"95856c6b-99e3-4908-9213-1729a5e7518a",
 CellID->1745002770],
Cell[304317, 5898, 760, 11, 252, "comment",ExpressionUUID->"e14ad006-1ebf-4b15-95dd-434bd390365f",
 CellID->1763915421],
Cell[CellGroupData[{
Cell[305102, 5913, 4634, 117, 918, "Input",ExpressionUUID->"69d99404-0d2e-48c2-ab63-74254ae8faa7",
 CellID->716681717],
Cell[309739, 6032, 3452, 67, 494, "Output",ExpressionUUID->"515f3afa-5421-4398-a121-2a1f349cfa70",
 CellID->200836744]
}, Open  ]],
Cell[313206, 6102, 210, 2, 65, "CodeCaption",ExpressionUUID->"7ca1ffa3-6718-45a5-bd8c-81b3b2c8106a",
 CellID->1766346971],
Cell[313419, 6106, 840, 12, 279, "comment",ExpressionUUID->"0903e79b-4b90-453e-aa22-64cb8886c632",
 CellID->1454056616],
Cell[CellGroupData[{
Cell[314284, 6122, 6559, 161, 1387, "Input",ExpressionUUID->"d242682b-2090-4ecc-82a9-3346a9b0278f",
 CellID->1616119402],
Cell[320846, 6285, 4086, 75, 707, "Output",ExpressionUUID->"359265b9-41d4-46b2-9e4d-c4b06fa06bcf",
 CellID->2034502772]
}, Open  ]],
Cell[324947, 6363, 212, 2, 65, "CodeCaption",ExpressionUUID->"d7f8a3a3-6597-4ade-8579-602725e70b4a",
 CellID->1653461470],
Cell[325162, 6367, 1005, 14, 306, "comment",ExpressionUUID->"fbc022e7-317d-4162-a7cd-69f3e5de62c5",
 CellID->603703084],
Cell[CellGroupData[{
Cell[326192, 6385, 7626, 173, 1575, "Input",ExpressionUUID->"402c8c03-3d70-4dfc-9959-ceb4faea08f2",
 CellID->121115456],
Cell[333821, 6560, 5573, 105, 1080, "Output",ExpressionUUID->"65028c38-8079-41c7-886b-1ced70c0b94a",
 CellID->1644865722]
}, Open  ]],
Cell[339409, 6668, 197, 2, 65, "CodeCaption",ExpressionUUID->"9946d66c-04c7-425f-8bd9-89bada3f6a5e",
 CellID->1802546135],
Cell[339609, 6672, 655, 10, 225, "comment",ExpressionUUID->"789d8881-8aa8-4717-8ae6-a5898ef42f5a",
 CellID->853898530]
}, Open  ]]
}, Open  ]]
}
]
*)

